
11th-week-timeclock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  000002f0  00000384  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800120  00800120  000003a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000414  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009ca  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000835  00000000  00000000  00000e36  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ba  00000000  00000000  0000166b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  00001a28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000482  00000000  00000000  00001af8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000178  00000000  00000000  00001f7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000020f2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	95 c0       	rjmp	.+298    	; 0x140 <__vector_5>
  16:	00 00       	nop
  18:	b4 c0       	rjmp	.+360    	; 0x182 <__vector_6>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	cd c0       	rjmp	.+410    	; 0x1d8 <__vector_15>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 ef       	ldi	r30, 0xF0	; 240
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 32       	cpi	r26, 0x20	; 32
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e2       	ldi	r26, 0x20	; 32
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 32       	cpi	r26, 0x26	; 38
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	b6 d0       	rcall	.+364    	; 0x230 <main>
  c4:	13 c1       	rjmp	.+550    	; 0x2ec <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <printSeg>:
void printSeg(int num, int segDigit){
    //by schematic, PORTE must being clear before set segment's digit and led.
    //because circuit use same port(A) to set segment's digit and led by latch.

    //set segment digit to print
    PORTA = FND_SEGPOS[segDigit];
  c8:	fb 01       	movw	r30, r22
  ca:	e8 5f       	subi	r30, 0xF8	; 248
  cc:	fe 4f       	sbci	r31, 0xFE	; 254
  ce:	20 81       	ld	r18, Z
  d0:	2b bb       	out	0x1b, r18	; 27
    PORTE = 0x04; //set 1 segment digit latch
  d2:	24 e0       	ldi	r18, 0x04	; 4
  d4:	23 b9       	out	0x03, r18	; 3
    PORTE = 0x00; //clear port E
  d6:	13 b8       	out	0x03, r1	; 3

    //print num at segment
    if(segDigit == 1) PORTA = FND_SEGWP[num];   //print with decimal point
  d8:	61 30       	cpi	r22, 0x01	; 1
  da:	71 05       	cpc	r23, r1
  dc:	31 f4       	brne	.+12     	; 0xea <printSeg+0x22>
  de:	fc 01       	movw	r30, r24
  e0:	e4 5f       	subi	r30, 0xF4	; 244
  e2:	fe 4f       	sbci	r31, 0xFE	; 254
  e4:	80 81       	ld	r24, Z
  e6:	8b bb       	out	0x1b, r24	; 27
  e8:	05 c0       	rjmp	.+10     	; 0xf4 <printSeg+0x2c>
    else PORTA = FND_SEGNP[num];                //print with out decimal point
  ea:	fc 01       	movw	r30, r24
  ec:	ea 5e       	subi	r30, 0xEA	; 234
  ee:	fe 4f       	sbci	r31, 0xFE	; 254
  f0:	80 81       	ld	r24, Z
  f2:	8b bb       	out	0x1b, r24	; 27
    PORTE = 0x08; //set 1 segment led latch
  f4:	88 e0       	ldi	r24, 0x08	; 8
  f6:	83 b9       	out	0x03, r24	; 3
    PORTE = 0x00; //clear port E
  f8:	13 b8       	out	0x03, r1	; 3
  fa:	08 95       	ret

000000fc <initPort>:
}

void initPort(){
    //initialize port A and E
    DDRA = 0xFF;    //set portA(7:0) to output
  fc:	8f ef       	ldi	r24, 0xFF	; 255
  fe:	8a bb       	out	0x1a, r24	; 26
    DDRE = 0x0C;    //set portE(3:2) to output
 100:	8c e0       	ldi	r24, 0x0C	; 12
 102:	82 b9       	out	0x02, r24	; 2
    PORTE = 0x04;   //init port E
 104:	84 e0       	ldi	r24, 0x04	; 4
 106:	83 b9       	out	0x03, r24	; 3
    PORTA = 0x0F;   //init port A
 108:	8f e0       	ldi	r24, 0x0F	; 15
 10a:	8b bb       	out	0x1b, r24	; 27
 10c:	08 95       	ret

0000010e <initInterrupt>:

void initInterrupt(){
    //timer interrupt 
    //normal mode(0), no prescaling
    //when timer being overflow, interrupt exc
    TCCR0 = 0x01;   //normal mode and no prescaling
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	83 bf       	out	0x33, r24	; 51
    TCNT0 = 0x00;   //clear count value register
 112:	12 be       	out	0x32, r1	; 50
    TIMSK = 0x01;   //enable Timer/Counter0 overflow interrupt, disable compare match interrupt
 114:	87 bf       	out	0x37, r24	; 55
    TIFR = 0xff;    //write logic 1 on flag for clear register
 116:	8f ef       	ldi	r24, 0xFF	; 255
 118:	86 bf       	out	0x36, r24	; 54
    //external interrupt

    //external interrupt int4 enable
    //active int4 when falling edge
    EICRB  &= ~(1<<ISC40);
 11a:	8a b7       	in	r24, 0x3a	; 58
 11c:	8e 7f       	andi	r24, 0xFE	; 254
 11e:	8a bf       	out	0x3a, r24	; 58
    EICRB  |= 1<<ISC41;     //same to EICRB = 0d00000010
 120:	8a b7       	in	r24, 0x3a	; 58
 122:	82 60       	ori	r24, 0x02	; 2
 124:	8a bf       	out	0x3a, r24	; 58
    //enable external interrupt 4
    EIMSK |= 1<<INT4;
 126:	89 b7       	in	r24, 0x39	; 57
 128:	80 61       	ori	r24, 0x10	; 16
 12a:	89 bf       	out	0x39, r24	; 57

    //external interrupt int5 enable
    //active int5 when falling edge
    EICRB  &= ~(1<<ISC50);  //clear
 12c:	8a b7       	in	r24, 0x3a	; 58
 12e:	8b 7f       	andi	r24, 0xFB	; 251
 130:	8a bf       	out	0x3a, r24	; 58
    EICRB  |= 1<<ISC51;     //set
 132:	8a b7       	in	r24, 0x3a	; 58
 134:	88 60       	ori	r24, 0x08	; 8
 136:	8a bf       	out	0x3a, r24	; 58
    //enable external interrupt 5
    EIMSK |= 1<<INT5;
 138:	89 b7       	in	r24, 0x39	; 57
 13a:	80 62       	ori	r24, 0x20	; 32
 13c:	89 bf       	out	0x39, r24	; 57
 13e:	08 95       	ret

00000140 <__vector_5>:
}

////////////////////////interrupt///////////////////
ISR(INT4_vect){
 140:	1f 92       	push	r1
 142:	0f 92       	push	r0
 144:	0f b6       	in	r0, 0x3f	; 63
 146:	0f 92       	push	r0
 148:	11 24       	eor	r1, r1
 14a:	8f 93       	push	r24
 14c:	9f 93       	push	r25
    //external interrupt execution when press int4 BT(falling edge)
    //when state is init or pause,  change state to running
    //when state is runnung,  change state to pause(keep timeNum)
    if(state == STATE_RUNNING){
 14e:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <state>
 152:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <state+0x1>
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	39 f4       	brne	.+14     	; 0x168 <__vector_5+0x28>
        state = STATE_PAUSE;    //pause stopwatch. keep print timeNum.
 15a:	82 e0       	ldi	r24, 0x02	; 2
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <state+0x1>
 162:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <state>
 166:	06 c0       	rjmp	.+12     	; 0x174 <__vector_5+0x34>
    }else{
        state = STATE_RUNNING;  //start(or resume) stopwatch
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <state+0x1>
 170:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <state>
    }
}
 174:	9f 91       	pop	r25
 176:	8f 91       	pop	r24
 178:	0f 90       	pop	r0
 17a:	0f be       	out	0x3f, r0	; 63
 17c:	0f 90       	pop	r0
 17e:	1f 90       	pop	r1
 180:	18 95       	reti

00000182 <__vector_6>:

ISR(INT5_vect){
 182:	1f 92       	push	r1
 184:	0f 92       	push	r0
 186:	0f b6       	in	r0, 0x3f	; 63
 188:	0f 92       	push	r0
 18a:	11 24       	eor	r1, r1
 18c:	8f 93       	push	r24
 18e:	9f 93       	push	r25
    //external interrupt launch when press int4 BT(falling edge)
    //when state is pause, then reset timeNum(print 0000) and change state to init
    //when state is running, then reset timeNum(print 0000) and keep running
    if(state == STATE_RUNNING){
 190:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <state>
 194:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <state+0x1>
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	29 f4       	brne	.+10     	; 0x1a6 <__vector_6+0x24>
        timeNum = 0;            //clear timeNum and print "0000" but keep running stop watch
 19c:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <timeNum+0x1>
 1a0:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <timeNum>
 1a4:	08 c0       	rjmp	.+16     	; 0x1b6 <__vector_6+0x34>
    }else{
        timeNum = 0;            //clear timeNum and print "0000"
 1a6:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <timeNum+0x1>
 1aa:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <timeNum>
        state = STATE_INIT;     //initialize stopwatch
 1ae:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <state+0x1>
 1b2:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <state>
    }
}
 1b6:	9f 91       	pop	r25
 1b8:	8f 91       	pop	r24
 1ba:	0f 90       	pop	r0
 1bc:	0f be       	out	0x3f, r0	; 63
 1be:	0f 90       	pop	r0
 1c0:	1f 90       	pop	r1
 1c2:	18 95       	reti

000001c4 <initTimerInterrupt>:

void initTimerInterrupt()
{
	TCCR0 = 0x0e; //0d00001110//CTC mode and 256 prescaling
 1c4:	8e e0       	ldi	r24, 0x0E	; 14
 1c6:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0x00; //clear count value register. TCNT0 increase count from 0, clear on 124
 1c8:	12 be       	out	0x32, r1	; 50
	TIMSK = 0x02; //enable Timer/Counter0 compare match interrupt, disable overflow interrupt
 1ca:	82 e0       	ldi	r24, 0x02	; 2
 1cc:	87 bf       	out	0x37, r24	; 55
	TIFR = 0xff;  //write logic 1 on flag for clear register
 1ce:	8f ef       	ldi	r24, 0xFF	; 255
 1d0:	86 bf       	out	0x36, r24	; 54
	OCR0 = 0x7c;  //compare 124
 1d2:	8c e7       	ldi	r24, 0x7C	; 124
 1d4:	81 bf       	out	0x31, r24	; 49
 1d6:	08 95       	ret

000001d8 <__vector_15>:
}
ISR(TIMER0_COMP_vect)
{
 1d8:	1f 92       	push	r1
 1da:	0f 92       	push	r0
 1dc:	0f b6       	in	r0, 0x3f	; 63
 1de:	0f 92       	push	r0
 1e0:	11 24       	eor	r1, r1
 1e2:	8f 93       	push	r24
 1e4:	9f 93       	push	r25
	timeInterruptExec++;
 1e6:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
 1ea:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <__data_end+0x1>
 1ee:	01 96       	adiw	r24, 0x01	; 1
 1f0:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <__data_end+0x1>
 1f4:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
	if ((timeInterruptExec > 4) && (state == STATE_RUNNING))
 1f8:	05 97       	sbiw	r24, 0x05	; 5
 1fa:	98 f0       	brcs	.+38     	; 0x222 <__vector_15+0x4a>
 1fc:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <state>
 200:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <state+0x1>
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	69 f4       	brne	.+26     	; 0x222 <__vector_15+0x4a>
	{
		timeNum++;
 208:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <timeNum>
 20c:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <timeNum+0x1>
 210:	01 96       	adiw	r24, 0x01	; 1
 212:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <timeNum+0x1>
 216:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <timeNum>
		timeInterruptExec = 0;
 21a:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <__data_end+0x1>
 21e:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__data_end>
	}
}
 222:	9f 91       	pop	r25
 224:	8f 91       	pop	r24
 226:	0f 90       	pop	r0
 228:	0f be       	out	0x3f, r0	; 63
 22a:	0f 90       	pop	r0
 22c:	1f 90       	pop	r1
 22e:	18 95       	reti

00000230 <main>:
*/
///////////////////interrupt service routine end////////////////////////

int main(void){
    //initialize port and interrupt
    initPort();
 230:	65 df       	rcall	.-310    	; 0xfc <initPort>
    initInterrupt();
 232:	6d df       	rcall	.-294    	; 0x10e <initInterrupt>
    initTimerInterrupt();
 234:	c7 df       	rcall	.-114    	; 0x1c4 <initTimerInterrupt>
 236:	78 94       	sei

    //Global Interrupt Enable
    sei();
 238:	00 e0       	ldi	r16, 0x00	; 0
 23a:	11 e0       	ldi	r17, 0x01	; 1
 23c:	c3 e0       	ldi	r28, 0x03	; 3
    }
}
*/
///////////////////interrupt service routine end////////////////////////

int main(void){
 23e:	d0 e0       	ldi	r29, 0x00	; 0
 240:	f8 01       	movw	r30, r16
    //print 7segment by global variable timeNum
    //timeNum variable is increase by time interrupt
    while (1){
        //segment print
        for(int i = 0; i < 4; i++){
            printSeg((timeNum/exp10[i])%10,3-i);
 242:	61 91       	ld	r22, Z+
 244:	71 91       	ld	r23, Z+
 246:	8f 01       	movw	r16, r30
 248:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <timeNum>
 24c:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <timeNum+0x1>
 250:	2a d0       	rcall	.+84     	; 0x2a6 <__udivmodhi4>
 252:	ab 01       	movw	r20, r22
 254:	9b 01       	movw	r18, r22
 256:	ad ec       	ldi	r26, 0xCD	; 205
 258:	bc ec       	ldi	r27, 0xCC	; 204
 25a:	39 d0       	rcall	.+114    	; 0x2ce <__umulhisi3>
 25c:	96 95       	lsr	r25
 25e:	87 95       	ror	r24
 260:	96 95       	lsr	r25
 262:	87 95       	ror	r24
 264:	96 95       	lsr	r25
 266:	87 95       	ror	r24
 268:	9c 01       	movw	r18, r24
 26a:	22 0f       	add	r18, r18
 26c:	33 1f       	adc	r19, r19
 26e:	88 0f       	add	r24, r24
 270:	99 1f       	adc	r25, r25
 272:	88 0f       	add	r24, r24
 274:	99 1f       	adc	r25, r25
 276:	88 0f       	add	r24, r24
 278:	99 1f       	adc	r25, r25
 27a:	82 0f       	add	r24, r18
 27c:	93 1f       	adc	r25, r19
 27e:	be 01       	movw	r22, r28
 280:	9a 01       	movw	r18, r20
 282:	28 1b       	sub	r18, r24
 284:	39 0b       	sbc	r19, r25
 286:	c9 01       	movw	r24, r18
 288:	1f df       	rcall	.-450    	; 0xc8 <printSeg>
 28a:	21 97       	sbiw	r28, 0x01	; 1
 28c:	c8 f6       	brcc	.-78     	; 0x240 <main+0x10>
 28e:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <timeNum>
        }
        //출력할 수가 9999를 넘으면 초기화
        if(timeNum == 10000) timeNum = 0;
 292:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <timeNum+0x1>
 296:	80 31       	cpi	r24, 0x10	; 16
 298:	97 42       	sbci	r25, 0x27	; 39
 29a:	71 f6       	brne	.-100    	; 0x238 <main+0x8>
 29c:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <timeNum+0x1>
 2a0:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <timeNum>
 2a4:	c9 cf       	rjmp	.-110    	; 0x238 <main+0x8>

000002a6 <__udivmodhi4>:
 2a6:	aa 1b       	sub	r26, r26
 2a8:	bb 1b       	sub	r27, r27
 2aa:	51 e1       	ldi	r21, 0x11	; 17
 2ac:	07 c0       	rjmp	.+14     	; 0x2bc <__udivmodhi4_ep>

000002ae <__udivmodhi4_loop>:
 2ae:	aa 1f       	adc	r26, r26
 2b0:	bb 1f       	adc	r27, r27
 2b2:	a6 17       	cp	r26, r22
 2b4:	b7 07       	cpc	r27, r23
 2b6:	10 f0       	brcs	.+4      	; 0x2bc <__udivmodhi4_ep>
 2b8:	a6 1b       	sub	r26, r22
 2ba:	b7 0b       	sbc	r27, r23

000002bc <__udivmodhi4_ep>:
 2bc:	88 1f       	adc	r24, r24
 2be:	99 1f       	adc	r25, r25
 2c0:	5a 95       	dec	r21
 2c2:	a9 f7       	brne	.-22     	; 0x2ae <__udivmodhi4_loop>
 2c4:	80 95       	com	r24
 2c6:	90 95       	com	r25
 2c8:	bc 01       	movw	r22, r24
 2ca:	cd 01       	movw	r24, r26
 2cc:	08 95       	ret

000002ce <__umulhisi3>:
 2ce:	a2 9f       	mul	r26, r18
 2d0:	b0 01       	movw	r22, r0
 2d2:	b3 9f       	mul	r27, r19
 2d4:	c0 01       	movw	r24, r0
 2d6:	a3 9f       	mul	r26, r19
 2d8:	70 0d       	add	r23, r0
 2da:	81 1d       	adc	r24, r1
 2dc:	11 24       	eor	r1, r1
 2de:	91 1d       	adc	r25, r1
 2e0:	b2 9f       	mul	r27, r18
 2e2:	70 0d       	add	r23, r0
 2e4:	81 1d       	adc	r24, r1
 2e6:	11 24       	eor	r1, r1
 2e8:	91 1d       	adc	r25, r1
 2ea:	08 95       	ret

000002ec <_exit>:
 2ec:	f8 94       	cli

000002ee <__stop_program>:
 2ee:	ff cf       	rjmp	.-2      	; 0x2ee <__stop_program>
