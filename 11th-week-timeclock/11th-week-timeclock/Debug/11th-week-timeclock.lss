
11th-week-timeclock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000248  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a46  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007ff  00000000  00000000  00000cfe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000039e  00000000  00000000  000014fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000007c  00000000  00000000  0000189c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000043c  00000000  00000000  00001918  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002ec  00000000  00000000  00001d54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00002040  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__vector_5>
  16:	00 00       	nop
  18:	5e c0       	rjmp	.+188    	; 0xd6 <__vector_6>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	3a d0       	rcall	.+116    	; 0x10e <main>
  9a:	92 c0       	rjmp	.+292    	; 0x1c0 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <__vector_5>:
#include <avr/interrupt.h>
#include <util/delay.h>


ISR(INT4_vect)
{
  9e:	1f 92       	push	r1
  a0:	0f 92       	push	r0
  a2:	0f b6       	in	r0, 0x3f	; 63
  a4:	0f 92       	push	r0
  a6:	11 24       	eor	r1, r1
  a8:	2f 93       	push	r18
  aa:	8f 93       	push	r24
  ac:	9f 93       	push	r25
	PORTF = 0xF0;
  ae:	80 ef       	ldi	r24, 0xF0	; 240
  b0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	2f ef       	ldi	r18, 0xFF	; 255
  b6:	81 ee       	ldi	r24, 0xE1	; 225
  b8:	94 e0       	ldi	r25, 0x04	; 4
  ba:	21 50       	subi	r18, 0x01	; 1
  bc:	80 40       	sbci	r24, 0x00	; 0
  be:	90 40       	sbci	r25, 0x00	; 0
  c0:	e1 f7       	brne	.-8      	; 0xba <__vector_5+0x1c>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <__vector_5+0x26>
  c4:	00 00       	nop
	_delay_ms(100);
	
}
  c6:	9f 91       	pop	r25
  c8:	8f 91       	pop	r24
  ca:	2f 91       	pop	r18
  cc:	0f 90       	pop	r0
  ce:	0f be       	out	0x3f, r0	; 63
  d0:	0f 90       	pop	r0
  d2:	1f 90       	pop	r1
  d4:	18 95       	reti

000000d6 <__vector_6>:
ISR(INT5_vect)
{
  d6:	1f 92       	push	r1
  d8:	0f 92       	push	r0
  da:	0f b6       	in	r0, 0x3f	; 63
  dc:	0f 92       	push	r0
  de:	11 24       	eor	r1, r1
  e0:	2f 93       	push	r18
  e2:	8f 93       	push	r24
  e4:	9f 93       	push	r25
	PORTF = 0x20;
  e6:	80 e2       	ldi	r24, 0x20	; 32
  e8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
  ec:	2f ef       	ldi	r18, 0xFF	; 255
  ee:	83 ec       	ldi	r24, 0xC3	; 195
  f0:	99 e0       	ldi	r25, 0x09	; 9
  f2:	21 50       	subi	r18, 0x01	; 1
  f4:	80 40       	sbci	r24, 0x00	; 0
  f6:	90 40       	sbci	r25, 0x00	; 0
  f8:	e1 f7       	brne	.-8      	; 0xf2 <__vector_6+0x1c>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <__vector_6+0x26>
  fc:	00 00       	nop
	_delay_ms(200);
	
}
  fe:	9f 91       	pop	r25
 100:	8f 91       	pop	r24
 102:	2f 91       	pop	r18
 104:	0f 90       	pop	r0
 106:	0f be       	out	0x3f, r0	; 63
 108:	0f 90       	pop	r0
 10a:	1f 90       	pop	r1
 10c:	18 95       	reti

0000010e <main>:


int main(void)
{
	
	DDRF = 0xF0;         //PORTB3을 출력으로 설정, LED용
 10e:	80 ef       	ldi	r24, 0xF0	; 240
 110:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	
	
	//falling edge에서 인터러브 발생
	EICRB  &= ~(1<<ISC40);
 114:	8a b7       	in	r24, 0x3a	; 58
 116:	8e 7f       	andi	r24, 0xFE	; 254
 118:	8a bf       	out	0x3a, r24	; 58
	EICRB  |= 1<<ISC41;
 11a:	8a b7       	in	r24, 0x3a	; 58
 11c:	82 60       	ori	r24, 0x02	; 2
 11e:	8a bf       	out	0x3a, r24	; 58
	
	EIMSK |= 1<<INT4;    //External Interrupt Request 0 Enable
 120:	89 b7       	in	r24, 0x39	; 57
 122:	80 61       	ori	r24, 0x10	; 16
 124:	89 bf       	out	0x39, r24	; 57
	//PD0에 스위치 연결, 풀업 저항을 추가한 회로여야 한다.
	
	EICRB  &= ~(1<<ISC50);
 126:	8a b7       	in	r24, 0x3a	; 58
 128:	8b 7f       	andi	r24, 0xFB	; 251
 12a:	8a bf       	out	0x3a, r24	; 58
	EICRB  |= 1<<ISC51;
 12c:	8a b7       	in	r24, 0x3a	; 58
 12e:	88 60       	ori	r24, 0x08	; 8
 130:	8a bf       	out	0x3a, r24	; 58
	
	EIMSK |= 1<<INT5;
 132:	89 b7       	in	r24, 0x39	; 57
 134:	80 62       	ori	r24, 0x20	; 32
 136:	89 bf       	out	0x39, r24	; 57
	
	sei();      //Global Interrupt Enable
 138:	78 94       	sei
	
	while(1)
	{
		_delay_ms(400);
		PORTF = 0x10;        //led1 출력
 13a:	e2 e6       	ldi	r30, 0x62	; 98
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	30 e1       	ldi	r19, 0x10	; 16
		_delay_ms(200);
		PORTF = 0x20;        //led2 출력
 140:	90 e2       	ldi	r25, 0x20	; 32
		_delay_ms(200);
		PORTF = 0x40;        //led3 출력
 142:	80 e4       	ldi	r24, 0x40	; 64
		_delay_ms(200);
		PORTF = 0x80;        //led4출력
 144:	20 e8       	ldi	r18, 0x80	; 128
 146:	4f ef       	ldi	r20, 0xFF	; 255
 148:	57 e8       	ldi	r21, 0x87	; 135
 14a:	63 e1       	ldi	r22, 0x13	; 19
 14c:	41 50       	subi	r20, 0x01	; 1
 14e:	50 40       	sbci	r21, 0x00	; 0
 150:	60 40       	sbci	r22, 0x00	; 0
 152:	e1 f7       	brne	.-8      	; 0x14c <main+0x3e>
 154:	00 c0       	rjmp	.+0      	; 0x156 <main+0x48>
 156:	00 00       	nop
	sei();      //Global Interrupt Enable
	
	while(1)
	{
		_delay_ms(400);
		PORTF = 0x10;        //led1 출력
 158:	30 83       	st	Z, r19
 15a:	4f ef       	ldi	r20, 0xFF	; 255
 15c:	53 ec       	ldi	r21, 0xC3	; 195
 15e:	69 e0       	ldi	r22, 0x09	; 9
 160:	41 50       	subi	r20, 0x01	; 1
 162:	50 40       	sbci	r21, 0x00	; 0
 164:	60 40       	sbci	r22, 0x00	; 0
 166:	e1 f7       	brne	.-8      	; 0x160 <main+0x52>
 168:	00 c0       	rjmp	.+0      	; 0x16a <main+0x5c>
 16a:	00 00       	nop
		_delay_ms(200);
		PORTF = 0x20;        //led2 출력
 16c:	90 83       	st	Z, r25
 16e:	4f ef       	ldi	r20, 0xFF	; 255
 170:	53 ec       	ldi	r21, 0xC3	; 195
 172:	69 e0       	ldi	r22, 0x09	; 9
 174:	41 50       	subi	r20, 0x01	; 1
 176:	50 40       	sbci	r21, 0x00	; 0
 178:	60 40       	sbci	r22, 0x00	; 0
 17a:	e1 f7       	brne	.-8      	; 0x174 <main+0x66>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <main+0x70>
 17e:	00 00       	nop
		_delay_ms(200);
		PORTF = 0x40;        //led3 출력
 180:	80 83       	st	Z, r24
 182:	4f ef       	ldi	r20, 0xFF	; 255
 184:	53 ec       	ldi	r21, 0xC3	; 195
 186:	69 e0       	ldi	r22, 0x09	; 9
 188:	41 50       	subi	r20, 0x01	; 1
 18a:	50 40       	sbci	r21, 0x00	; 0
 18c:	60 40       	sbci	r22, 0x00	; 0
 18e:	e1 f7       	brne	.-8      	; 0x188 <main+0x7a>
 190:	00 c0       	rjmp	.+0      	; 0x192 <main+0x84>
 192:	00 00       	nop
		_delay_ms(200);
		PORTF = 0x80;        //led4출력
 194:	20 83       	st	Z, r18
 196:	4f ef       	ldi	r20, 0xFF	; 255
 198:	57 e8       	ldi	r21, 0x87	; 135
 19a:	63 e1       	ldi	r22, 0x13	; 19
 19c:	41 50       	subi	r20, 0x01	; 1
 19e:	50 40       	sbci	r21, 0x00	; 0
 1a0:	60 40       	sbci	r22, 0x00	; 0
 1a2:	e1 f7       	brne	.-8      	; 0x19c <main+0x8e>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <main+0x98>
 1a6:	00 00       	nop
		_delay_ms(400);
		PORTF = 0x40;        //led3 출력
 1a8:	80 83       	st	Z, r24
 1aa:	4f ef       	ldi	r20, 0xFF	; 255
 1ac:	57 e8       	ldi	r21, 0x87	; 135
 1ae:	63 e1       	ldi	r22, 0x13	; 19
 1b0:	41 50       	subi	r20, 0x01	; 1
 1b2:	50 40       	sbci	r21, 0x00	; 0
 1b4:	60 40       	sbci	r22, 0x00	; 0
 1b6:	e1 f7       	brne	.-8      	; 0x1b0 <main+0xa2>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <main+0xac>
 1ba:	00 00       	nop
		_delay_ms(400);
		PORTF = 0x20;        //led2 출력
 1bc:	90 83       	st	Z, r25
 1be:	c3 cf       	rjmp	.-122    	; 0x146 <main+0x38>

000001c0 <_exit>:
 1c0:	f8 94       	cli

000001c2 <__stop_program>:
 1c2:	ff cf       	rjmp	.-2      	; 0x1c2 <__stop_program>
