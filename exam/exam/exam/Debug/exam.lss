
exam.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  0000046c  00000500  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000046c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800114  00800114  00000514  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000514  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000544  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000584  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bda  00000000  00000000  00000614  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008da  00000000  00000000  000011ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000546  00000000  00000000  00001ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ec  00000000  00000000  00002010  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000504  00000000  00000000  000021fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003d9  00000000  00000000  00002700  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00002ad9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	32 c1       	rjmp	.+612    	; 0x27a <__vector_5>
  16:	00 00       	nop
  18:	5f c1       	rjmp	.+702    	; 0x2d8 <__vector_6>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	8b c1       	rjmp	.+790    	; 0x354 <__vector_15>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	76 c1       	rjmp	.+748    	; 0x336 <__vector_18>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e6       	ldi	r30, 0x6C	; 108
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 31       	cpi	r26, 0x14	; 20
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e1       	ldi	r26, 0x14	; 20
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 32       	cpi	r26, 0x20	; 32
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	9c d1       	rcall	.+824    	; 0x3fc <main>
  c4:	d1 c1       	rjmp	.+930    	; 0x468 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <initSegment>:
		}else{
		//print with out decimal point
		PORTA = FND_SEGNP[segNum];
	}
	PORTE |= 0x08; //set 1 segment led latch
	PORTE &= ~(0x08); //clear LED_DATA(PE3)
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	8a bb       	out	0x1a, r24	; 26
  cc:	82 b1       	in	r24, 0x02	; 2
  ce:	8c 60       	ori	r24, 0x0C	; 12
  d0:	82 b9       	out	0x02, r24	; 2
  d2:	1a 9a       	sbi	0x03, 2	; 3
  d4:	8f e0       	ldi	r24, 0x0F	; 15
  d6:	8b bb       	out	0x1b, r24	; 27
  d8:	08 95       	ret

000000da <initUART>:
  da:	11 9a       	sbi	0x02, 1	; 2
  dc:	10 98       	cbi	0x02, 0	; 2
  de:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
  e2:	87 e6       	ldi	r24, 0x67	; 103
  e4:	89 b9       	out	0x09, r24	; 9
  e6:	88 e1       	ldi	r24, 0x18	; 24
  e8:	8a b9       	out	0x0a, r24	; 10
  ea:	57 9a       	sbi	0x0a, 7	; 10
  ec:	08 95       	ret

000000ee <initExternalInterrupt>:
  ee:	8a b7       	in	r24, 0x3a	; 58
  f0:	8e 7f       	andi	r24, 0xFE	; 254
  f2:	8a bf       	out	0x3a, r24	; 58
  f4:	8a b7       	in	r24, 0x3a	; 58
  f6:	82 60       	ori	r24, 0x02	; 2
  f8:	8a bf       	out	0x3a, r24	; 58
  fa:	89 b7       	in	r24, 0x39	; 57
  fc:	80 61       	ori	r24, 0x10	; 16
  fe:	89 bf       	out	0x39, r24	; 57
 100:	8a b7       	in	r24, 0x3a	; 58
 102:	8b 7f       	andi	r24, 0xFB	; 251
 104:	8a bf       	out	0x3a, r24	; 58
 106:	8a b7       	in	r24, 0x3a	; 58
 108:	88 60       	ori	r24, 0x08	; 8
 10a:	8a bf       	out	0x3a, r24	; 58
 10c:	89 b7       	in	r24, 0x39	; 57
 10e:	80 62       	ori	r24, 0x20	; 32
 110:	89 bf       	out	0x39, r24	; 57
 112:	08 95       	ret

00000114 <initTimerInterrupt>:
 114:	8e e0       	ldi	r24, 0x0E	; 14
 116:	83 bf       	out	0x33, r24	; 51
 118:	12 be       	out	0x32, r1	; 50
 11a:	82 e0       	ldi	r24, 0x02	; 2
 11c:	87 bf       	out	0x37, r24	; 55
 11e:	8f ef       	ldi	r24, 0xFF	; 255
 120:	86 bf       	out	0x36, r24	; 54
 122:	8c e7       	ldi	r24, 0x7C	; 124
 124:	81 bf       	out	0x31, r24	; 49
 126:	08 95       	ret

00000128 <numToChar>:

//uart통신시 4자리의 int형 숫자를 스트링으로 바꿔주는 함수
//리턴값은 3:0 스트링의 포인터 입니다.
//uart send ascii, so we must convert intizer to ascii
//intizer num + ascii '0' is ascii num
char * numToChar(int num){
 128:	ef 92       	push	r14
 12a:	ff 92       	push	r15
 12c:	0f 93       	push	r16
 12e:	1f 93       	push	r17
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
 134:	7c 01       	movw	r14, r24
 136:	c7 e0       	ldi	r28, 0x07	; 7
 138:	d1 e0       	ldi	r29, 0x01	; 1
 13a:	ef e1       	ldi	r30, 0x1F	; 31
 13c:	f1 e0       	ldi	r31, 0x01	; 1
 13e:	0b e1       	ldi	r16, 0x1B	; 27
 140:	11 e0       	ldi	r17, 0x01	; 1
	for(int i = 0; i < 4; i++){
		characterizedNum[3-i] = (char)((num/exp10[i])%10 + '0');
 142:	69 91       	ld	r22, Y+
 144:	79 91       	ld	r23, Y+
 146:	c7 01       	movw	r24, r14
 148:	6c d1       	rcall	.+728    	; 0x422 <__udivmodhi4>
 14a:	ab 01       	movw	r20, r22
 14c:	9b 01       	movw	r18, r22
 14e:	ad ec       	ldi	r26, 0xCD	; 205
 150:	bc ec       	ldi	r27, 0xCC	; 204
 152:	7b d1       	rcall	.+758    	; 0x44a <__umulhisi3>
 154:	96 95       	lsr	r25
 156:	87 95       	ror	r24
 158:	96 95       	lsr	r25
 15a:	87 95       	ror	r24
 15c:	96 95       	lsr	r25
 15e:	87 95       	ror	r24
 160:	9c 01       	movw	r18, r24
 162:	22 0f       	add	r18, r18
 164:	33 1f       	adc	r19, r19
 166:	88 0f       	add	r24, r24
 168:	99 1f       	adc	r25, r25
 16a:	88 0f       	add	r24, r24
 16c:	99 1f       	adc	r25, r25
 16e:	88 0f       	add	r24, r24
 170:	99 1f       	adc	r25, r25
 172:	82 0f       	add	r24, r18
 174:	93 1f       	adc	r25, r19
 176:	48 1b       	sub	r20, r24
 178:	59 0b       	sbc	r21, r25
 17a:	40 5d       	subi	r20, 0xD0	; 208
 17c:	42 93       	st	-Z, r20
//uart통신시 4자리의 int형 숫자를 스트링으로 바꿔주는 함수
//리턴값은 3:0 스트링의 포인터 입니다.
//uart send ascii, so we must convert intizer to ascii
//intizer num + ascii '0' is ascii num
char * numToChar(int num){
	for(int i = 0; i < 4; i++){
 17e:	e0 17       	cp	r30, r16
 180:	f1 07       	cpc	r31, r17
 182:	f9 f6       	brne	.-66     	; 0x142 <numToChar+0x1a>
		characterizedNum[3-i] = (char)((num/exp10[i])%10 + '0');
	}
	return characterizedNum;
}
 184:	8b e1       	ldi	r24, 0x1B	; 27
 186:	91 e0       	ldi	r25, 0x01	; 1
 188:	df 91       	pop	r29
 18a:	cf 91       	pop	r28
 18c:	1f 91       	pop	r17
 18e:	0f 91       	pop	r16
 190:	ff 90       	pop	r15
 192:	ef 90       	pop	r14
 194:	08 95       	ret

00000196 <uartTx>:

//bitTx의 스트링 포인터값을 이용해 스트링을 UART통신으로 컴퓨터에 출력해줍니다.
//스트링의 끝은 NULL('\0')이여야 합니다
void uartTx(char * bitTx){
 196:	fc 01       	movw	r30, r24
	//send string. final bit of string is always NULL
	for(int i = 0; bitTx[i] != '\0'; i++){
 198:	90 81       	ld	r25, Z
 19a:	99 23       	and	r25, r25
 19c:	39 f0       	breq	.+14     	; 0x1ac <uartTx+0x16>
 19e:	31 96       	adiw	r30, 0x01	; 1
		//wait complete of foword transmission
		while((UCSR0A & 0x20) == 0x00);
 1a0:	5d 9b       	sbis	0x0b, 5	; 11
 1a2:	fe cf       	rjmp	.-4      	; 0x1a0 <uartTx+0xa>
		UDR0 = bitTx[i];
 1a4:	9c b9       	out	0x0c, r25	; 12

//bitTx의 스트링 포인터값을 이용해 스트링을 UART통신으로 컴퓨터에 출력해줍니다.
//스트링의 끝은 NULL('\0')이여야 합니다
void uartTx(char * bitTx){
	//send string. final bit of string is always NULL
	for(int i = 0; bitTx[i] != '\0'; i++){
 1a6:	91 91       	ld	r25, Z+
 1a8:	91 11       	cpse	r25, r1
 1aa:	fa cf       	rjmp	.-12     	; 0x1a0 <uartTx+0xa>
		//wait complete of foword transmission
		while((UCSR0A & 0x20) == 0x00);
		UDR0 = bitTx[i];
	}
	//아래부분이 활성화 되면 자동으로 스트링을 보낸뒤 줄넘김 처리를 해줍니다.
	while((UCSR0A & 0x20) == 0x00);
 1ac:	5d 9b       	sbis	0x0b, 5	; 11
 1ae:	fe cf       	rjmp	.-4      	; 0x1ac <uartTx+0x16>
	UDR0 = '\r';
 1b0:	8d e0       	ldi	r24, 0x0D	; 13
 1b2:	8c b9       	out	0x0c, r24	; 12
	while((UCSR0A & 0x20) == 0x00);
 1b4:	5d 9b       	sbis	0x0b, 5	; 11
 1b6:	fe cf       	rjmp	.-4      	; 0x1b4 <uartTx+0x1e>
	UDR0 = '\n';
 1b8:	8a e0       	ldi	r24, 0x0A	; 10
 1ba:	8c b9       	out	0x0c, r24	; 12
 1bc:	08 95       	ret

000001be <button>:
//버튼입력
//아래함수를 실행하면 버튼의 입력에 따라 케이스문에 있는 코드를 실행
void button(){
	//falling edge detect sw input
	//아래에 스위치 한번의 입력당 뭘 할지 쓰세요
	if((PING&0x0f) != 0x0f && postPING == 0x0f){
 1be:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7e0063>
 1c2:	8f 70       	andi	r24, 0x0F	; 15
 1c4:	8f 30       	cpi	r24, 0x0F	; 15
 1c6:	a9 f1       	breq	.+106    	; 0x232 <button+0x74>
 1c8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <postPING>
 1cc:	8f 30       	cpi	r24, 0x0F	; 15
 1ce:	89 f5       	brne	.+98     	; 0x232 <button+0x74>
		switch(PING){
 1d0:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7e0063>
 1d4:	8b 30       	cpi	r24, 0x0B	; 11
 1d6:	b9 f0       	breq	.+46     	; 0x206 <button+0x48>
 1d8:	18 f4       	brcc	.+6      	; 0x1e0 <button+0x22>
 1da:	87 30       	cpi	r24, 0x07	; 7
 1dc:	31 f0       	breq	.+12     	; 0x1ea <button+0x2c>
 1de:	29 c0       	rjmp	.+82     	; 0x232 <button+0x74>
 1e0:	8d 30       	cpi	r24, 0x0D	; 13
 1e2:	e1 f0       	breq	.+56     	; 0x21c <button+0x5e>
 1e4:	8e 30       	cpi	r24, 0x0E	; 14
 1e6:	f9 f0       	breq	.+62     	; 0x226 <button+0x68>
 1e8:	24 c0       	rjmp	.+72     	; 0x232 <button+0x74>
			//sw8
			case(0x07) : //write your code here
				carSpeed /= 2;
 1ea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1ee:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1f2:	99 23       	and	r25, r25
 1f4:	0c f4       	brge	.+2      	; 0x1f8 <button+0x3a>
 1f6:	01 96       	adiw	r24, 0x01	; 1
 1f8:	95 95       	asr	r25
 1fa:	87 95       	ror	r24
 1fc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 200:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			break;
 204:	16 c0       	rjmp	.+44     	; 0x232 <button+0x74>
			//sw7
			case(0x0b) : //write your code here
				carSpeed *= 2;
 206:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 20a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 20e:	88 0f       	add	r24, r24
 210:	99 1f       	adc	r25, r25
 212:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 216:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			break;
 21a:	0b c0       	rjmp	.+22     	; 0x232 <button+0x74>
			//sw6
			case(0x0d) : //write your code here
			num = 0;
 21c:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <num+0x1>
 220:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <num>
			break;
 224:	06 c0       	rjmp	.+12     	; 0x232 <button+0x74>
			//sw5
			case(0x0e) : //write your code here
			uartTx(numToChar(num));
 226:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <num>
 22a:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <num+0x1>
 22e:	7c df       	rcall	.-264    	; 0x128 <numToChar>
 230:	b2 df       	rcall	.-156    	; 0x196 <uartTx>
			break;
		}
	}
	postPING = PING;
 232:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7e0063>
 236:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <postPING>
 23a:	08 95       	ret

0000023c <updateCount>:
}

//signed increase만큼 글로벌 변수 num을 증가 혹은 감소시킵니다. 자동으로 0~9999로 변환시킴
void updateCount(int increase){
	//update num
	num += increase;
 23c:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <num>
 240:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <num+0x1>
 244:	82 0f       	add	r24, r18
 246:	93 1f       	adc	r25, r19
	//overflow(under flow) prevention
	if(num > 9999)    //when overflow
 248:	80 31       	cpi	r24, 0x10	; 16
 24a:	27 e2       	ldi	r18, 0x27	; 39
 24c:	92 07       	cpc	r25, r18
 24e:	3c f0       	brlt	.+14     	; 0x25e <updateCount+0x22>
	num = num - 10000;
 250:	80 51       	subi	r24, 0x10	; 16
 252:	97 42       	sbci	r25, 0x27	; 39
 254:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <num+0x1>
 258:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <num>
 25c:	08 95       	ret
	else if(num < 0)  //when underflow
 25e:	99 23       	and	r25, r25
 260:	2c f0       	brlt	.+10     	; 0x26c <updateCount+0x30>
}

//signed increase만큼 글로벌 변수 num을 증가 혹은 감소시킵니다. 자동으로 0~9999로 변환시킴
void updateCount(int increase){
	//update num
	num += increase;
 262:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <num+0x1>
 266:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <num>
 26a:	08 95       	ret
	//overflow(under flow) prevention
	if(num > 9999)    //when overflow
	num = num - 10000;
	else if(num < 0)  //when underflow
	num = num + 10000;
 26c:	80 5f       	subi	r24, 0xF0	; 240
 26e:	98 4d       	sbci	r25, 0xD8	; 216
 270:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <num+0x1>
 274:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <num>
 278:	08 95       	ret

0000027a <__vector_5>:
	//아래가 활성화 되면 카운트한 넘버를 자동으로 송신 send count by uart
	//uartTx(numToChar(num));
}

//-------------------------------interrupt 처리부
ISR(INT4_vect){
 27a:	1f 92       	push	r1
 27c:	0f 92       	push	r0
 27e:	0f b6       	in	r0, 0x3f	; 63
 280:	0f 92       	push	r0
 282:	11 24       	eor	r1, r1
 284:	0b b6       	in	r0, 0x3b	; 59
 286:	0f 92       	push	r0
 288:	2f 93       	push	r18
 28a:	3f 93       	push	r19
 28c:	4f 93       	push	r20
 28e:	5f 93       	push	r21
 290:	6f 93       	push	r22
 292:	7f 93       	push	r23
 294:	8f 93       	push	r24
 296:	9f 93       	push	r25
 298:	af 93       	push	r26
 29a:	bf 93       	push	r27
 29c:	ef 93       	push	r30
 29e:	ff 93       	push	r31
	//when interrupt 4 excu, increase num
	//예시코드
	//아래코드는 int4입력이 들어오면 num값을 1 증가시킵니다.
	updateCount(1000);
 2a0:	88 ee       	ldi	r24, 0xE8	; 232
 2a2:	93 e0       	ldi	r25, 0x03	; 3
 2a4:	cb df       	rcall	.-106    	; 0x23c <updateCount>
	uartTx(numToChar(num));
 2a6:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <num>
 2aa:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <num+0x1>
 2ae:	3c df       	rcall	.-392    	; 0x128 <numToChar>
 2b0:	72 df       	rcall	.-284    	; 0x196 <uartTx>
}
 2b2:	ff 91       	pop	r31
 2b4:	ef 91       	pop	r30
 2b6:	bf 91       	pop	r27
 2b8:	af 91       	pop	r26
 2ba:	9f 91       	pop	r25
 2bc:	8f 91       	pop	r24
 2be:	7f 91       	pop	r23
 2c0:	6f 91       	pop	r22
 2c2:	5f 91       	pop	r21
 2c4:	4f 91       	pop	r20
 2c6:	3f 91       	pop	r19
 2c8:	2f 91       	pop	r18
 2ca:	0f 90       	pop	r0
 2cc:	0b be       	out	0x3b, r0	; 59
 2ce:	0f 90       	pop	r0
 2d0:	0f be       	out	0x3f, r0	; 63
 2d2:	0f 90       	pop	r0
 2d4:	1f 90       	pop	r1
 2d6:	18 95       	reti

000002d8 <__vector_6>:

ISR(INT5_vect){
 2d8:	1f 92       	push	r1
 2da:	0f 92       	push	r0
 2dc:	0f b6       	in	r0, 0x3f	; 63
 2de:	0f 92       	push	r0
 2e0:	11 24       	eor	r1, r1
 2e2:	0b b6       	in	r0, 0x3b	; 59
 2e4:	0f 92       	push	r0
 2e6:	2f 93       	push	r18
 2e8:	3f 93       	push	r19
 2ea:	4f 93       	push	r20
 2ec:	5f 93       	push	r21
 2ee:	6f 93       	push	r22
 2f0:	7f 93       	push	r23
 2f2:	8f 93       	push	r24
 2f4:	9f 93       	push	r25
 2f6:	af 93       	push	r26
 2f8:	bf 93       	push	r27
 2fa:	ef 93       	push	r30
 2fc:	ff 93       	push	r31
	//when interrupt 5 excu, decrease num
	//예시코드
	//아래코드는 int4입력이 들어오면 num값을 1 감소시킵니다.
	updateCount(-1000);
 2fe:	88 e1       	ldi	r24, 0x18	; 24
 300:	9c ef       	ldi	r25, 0xFC	; 252
 302:	9c df       	rcall	.-200    	; 0x23c <updateCount>
	uartTx(numToChar(num));
 304:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <num>
 308:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <num+0x1>
 30c:	0d df       	rcall	.-486    	; 0x128 <numToChar>
 30e:	43 df       	rcall	.-378    	; 0x196 <uartTx>
}
 310:	ff 91       	pop	r31
 312:	ef 91       	pop	r30
 314:	bf 91       	pop	r27
 316:	af 91       	pop	r26
 318:	9f 91       	pop	r25
 31a:	8f 91       	pop	r24
 31c:	7f 91       	pop	r23
 31e:	6f 91       	pop	r22
 320:	5f 91       	pop	r21
 322:	4f 91       	pop	r20
 324:	3f 91       	pop	r19
 326:	2f 91       	pop	r18
 328:	0f 90       	pop	r0
 32a:	0b be       	out	0x3b, r0	; 59
 32c:	0f 90       	pop	r0
 32e:	0f be       	out	0x3f, r0	; 63
 330:	0f 90       	pop	r0
 332:	1f 90       	pop	r1
 334:	18 95       	reti

00000336 <__vector_18>:

//RX인터럽트
//uart수신한 값을 uartRX에 넣습니다.
ISR(USART0_RX_vect){
 336:	1f 92       	push	r1
 338:	0f 92       	push	r0
 33a:	0f b6       	in	r0, 0x3f	; 63
 33c:	0f 92       	push	r0
 33e:	11 24       	eor	r1, r1
 340:	8f 93       	push	r24
	//update uartRX variable when AVR uart received
	uartRX = UDR0;
 342:	8c b1       	in	r24, 0x0c	; 12
 344:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <uartRX>
	
}
 348:	8f 91       	pop	r24
 34a:	0f 90       	pop	r0
 34c:	0f be       	out	0x3f, r0	; 63
 34e:	0f 90       	pop	r0
 350:	1f 90       	pop	r1
 352:	18 95       	reti

00000354 <__vector_15>:

char count = 0;
char segDigit = 0;
//아래 타이머 인터럽트가 활성화되면 5번 실행될째마다 10ms가 카운트, num값을 1 증가시킴
ISR(TIMER0_COMP_vect)
{
 354:	1f 92       	push	r1
 356:	0f 92       	push	r0
 358:	0f b6       	in	r0, 0x3f	; 63
 35a:	0f 92       	push	r0
 35c:	11 24       	eor	r1, r1
 35e:	0b b6       	in	r0, 0x3b	; 59
 360:	0f 92       	push	r0
 362:	2f 93       	push	r18
 364:	3f 93       	push	r19
 366:	8f 93       	push	r24
 368:	9f 93       	push	r25
 36a:	ef 93       	push	r30
 36c:	ff 93       	push	r31
	timeInterruptExec++;
 36e:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <timeInterruptExec>
 372:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <timeInterruptExec+0x1>
 376:	01 96       	adiw	r24, 0x01	; 1
 378:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <timeInterruptExec+0x1>
 37c:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <timeInterruptExec>
	if ((timeInterruptExec > carSpeed)){
 380:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 384:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 388:	28 17       	cp	r18, r24
 38a:	39 07       	cpc	r19, r25
 38c:	54 f5       	brge	.+84     	; 0x3e2 <__vector_15+0x8e>
		//아래의 코드ㅜ는10ms마다 실행됩니다.
		//set segment digit to print
		PORTA = FND_SEGPOS[segDigit];
 38e:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <__data_end>
 392:	f0 e0       	ldi	r31, 0x00	; 0
 394:	e1 5f       	subi	r30, 0xF1	; 241
 396:	fe 4f       	sbci	r31, 0xFE	; 254
 398:	80 81       	ld	r24, Z
 39a:	8b bb       	out	0x1b, r24	; 27
		PORTE |= 0x04; //set 1 segment digit latch
 39c:	1a 9a       	sbi	0x03, 2	; 3
		PORTE &= ~(0x04); //clear LED_CTL(PE2)
 39e:	1a 98       	cbi	0x03, 2	; 3

		//print num at segment
		
			//print with decimal point
		PORTA = FND_SPEED[count++];
 3a0:	e0 91 15 01 	lds	r30, 0x0115	; 0x800115 <count>
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	8e 0f       	add	r24, r30
 3a8:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <count>
 3ac:	f0 e0       	ldi	r31, 0x00	; 0
 3ae:	ee 5f       	subi	r30, 0xFE	; 254
 3b0:	fe 4f       	sbci	r31, 0xFE	; 254
 3b2:	80 81       	ld	r24, Z
 3b4:	8b bb       	out	0x1b, r24	; 27
		PORTE |= 0x08; //set 1 segment led latch
 3b6:	1b 9a       	sbi	0x03, 3	; 3
		PORTE &= ~(0x08); //clear LED_DATA(PE3)
 3b8:	1b 98       	cbi	0x03, 3	; 3
		if (count > 3){
 3ba:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <count>
 3be:	84 30       	cpi	r24, 0x04	; 4
 3c0:	60 f0       	brcs	.+24     	; 0x3da <__vector_15+0x86>
			 count = 0;
 3c2:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <count>
			 segDigit++;
 3c6:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 3ca:	8f 5f       	subi	r24, 0xFF	; 255
			 if(segDigit > 3) segDigit = 0;
 3cc:	84 30       	cpi	r24, 0x04	; 4
 3ce:	18 f4       	brcc	.+6      	; 0x3d6 <__vector_15+0x82>
		PORTA = FND_SPEED[count++];
		PORTE |= 0x08; //set 1 segment led latch
		PORTE &= ~(0x08); //clear LED_DATA(PE3)
		if (count > 3){
			 count = 0;
			 segDigit++;
 3d0:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
 3d4:	02 c0       	rjmp	.+4      	; 0x3da <__vector_15+0x86>
			 if(segDigit > 3) segDigit = 0;
 3d6:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <__data_end>
			 
		}
		
		timeInterruptExec = 0;
 3da:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <timeInterruptExec+0x1>
 3de:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <timeInterruptExec>
		
		
	}
}
 3e2:	ff 91       	pop	r31
 3e4:	ef 91       	pop	r30
 3e6:	9f 91       	pop	r25
 3e8:	8f 91       	pop	r24
 3ea:	3f 91       	pop	r19
 3ec:	2f 91       	pop	r18
 3ee:	0f 90       	pop	r0
 3f0:	0b be       	out	0x3b, r0	; 59
 3f2:	0f 90       	pop	r0
 3f4:	0f be       	out	0x3f, r0	; 63
 3f6:	0f 90       	pop	r0
 3f8:	1f 90       	pop	r1
 3fa:	18 95       	reti

000003fc <main>:

int main(void){
	//초기화
	//알아서 기능에 맞춰 주석 지우세요
	initUART();
 3fc:	6e de       	rcall	.-804    	; 0xda <initUART>
	initSegment();
 3fe:	64 de       	rcall	.-824    	; 0xc8 <initSegment>
	initExternalInterrupt();
 400:	76 de       	rcall	.-788    	; 0xee <initExternalInterrupt>
	EIMSK |= 1 << INT5;
}

//버튼 입력을 받기위한 초기화
void initButton(){
	DDRG = 0x00;
 402:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	//알아서 기능에 맞춰 주석 지우세요
	initUART();
	initSegment();
	initExternalInterrupt();
	initButton();
	initTimerInterrupt();
 406:	86 de       	rcall	.-756    	; 0x114 <initTimerInterrupt>
 408:	78 94       	sei

	//Global Interrupt Enable
	//항상 써둘것
	sei();
 40a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <uartRX>
	
	while (1){
		//7-segment 에 num 값을 print
		
		
		if(uartRX != '\0'){
 40e:	88 23       	and	r24, r24
 410:	31 f0       	breq	.+12     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 412:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <num+0x1>
			num = 0;
 416:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <num>
			uartRX = '\0';
 41a:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <uartRX>
		}
		button();
 41e:	cf de       	rcall	.-610    	; 0x1be <button>
 420:	f4 cf       	rjmp	.-24     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>

00000422 <__udivmodhi4>:
		//     uartRX = '\0';
		// }else if(uartRX == 0x64 || uartRX == 0x44){
		//     updateCount(-1);
		//     uartRX = '\0';
		// }
	}
 422:	aa 1b       	sub	r26, r26
 424:	bb 1b       	sub	r27, r27
 426:	51 e1       	ldi	r21, 0x11	; 17
 428:	07 c0       	rjmp	.+14     	; 0x438 <__udivmodhi4_ep>

0000042a <__udivmodhi4_loop>:
 42a:	aa 1f       	adc	r26, r26
 42c:	bb 1f       	adc	r27, r27
 42e:	a6 17       	cp	r26, r22
 430:	b7 07       	cpc	r27, r23
 432:	10 f0       	brcs	.+4      	; 0x438 <__udivmodhi4_ep>
 434:	a6 1b       	sub	r26, r22
 436:	b7 0b       	sbc	r27, r23

00000438 <__udivmodhi4_ep>:
 438:	88 1f       	adc	r24, r24
 43a:	99 1f       	adc	r25, r25
 43c:	5a 95       	dec	r21
 43e:	a9 f7       	brne	.-22     	; 0x42a <__udivmodhi4_loop>
 440:	80 95       	com	r24
 442:	90 95       	com	r25
 444:	bc 01       	movw	r22, r24
 446:	cd 01       	movw	r24, r26
 448:	08 95       	ret

0000044a <__umulhisi3>:
 44a:	a2 9f       	mul	r26, r18
 44c:	b0 01       	movw	r22, r0
 44e:	b3 9f       	mul	r27, r19
 450:	c0 01       	movw	r24, r0
 452:	a3 9f       	mul	r26, r19
 454:	70 0d       	add	r23, r0
 456:	81 1d       	adc	r24, r1
 458:	11 24       	eor	r1, r1
 45a:	91 1d       	adc	r25, r1
 45c:	b2 9f       	mul	r27, r18
 45e:	70 0d       	add	r23, r0
 460:	81 1d       	adc	r24, r1
 462:	11 24       	eor	r1, r1
 464:	91 1d       	adc	r25, r1
 466:	08 95       	ret

00000468 <_exit>:
 468:	f8 94       	cli

0000046a <__stop_program>:
 46a:	ff cf       	rjmp	.-2      	; 0x46a <__stop_program>
