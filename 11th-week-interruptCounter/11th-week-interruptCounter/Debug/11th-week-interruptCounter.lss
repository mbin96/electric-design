
11th-week-interruptCounter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00000258  000002ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000258  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800116  00800116  00000302  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000302  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000334  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000996  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000835  00000000  00000000  00000d52  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000315  00000000  00000000  00001587  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a4  00000000  00000000  0000189c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000472  00000000  00000000  00001940  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000011e  00000000  00000000  00001db2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001ed0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	8b c0       	rjmp	.+278    	; 0x12c <__vector_5>
  16:	00 00       	nop
  18:	ab c0       	rjmp	.+342    	; 0x170 <__vector_6>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e5       	ldi	r30, 0x58	; 88
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 31       	cpi	r26, 0x16	; 22
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e1       	ldi	r26, 0x16	; 22
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 31       	cpi	r26, 0x18	; 24
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	76 d0       	rcall	.+236    	; 0x1b0 <main>
  c4:	c7 c0       	rjmp	.+398    	; 0x254 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <printSeg>:
unsigned int state = STATE_INIT;
//////////////////////

void printSeg(int num, int whatSegment){
	//자리수 지정
	PORTA = FND_SEGPOS[whatSegment];
  c8:	fb 01       	movw	r30, r22
  ca:	e8 5f       	subi	r30, 0xF8	; 248
  cc:	fe 4f       	sbci	r31, 0xFE	; 254
  ce:	20 81       	ld	r18, Z
  d0:	2b bb       	out	0x1b, r18	; 27
	PORTE = 0x04;
  d2:	24 e0       	ldi	r18, 0x04	; 4
  d4:	23 b9       	out	0x03, r18	; 3
	PORTE = 0x00;
  d6:	13 b8       	out	0x03, r1	; 3
	//세그먼트 숫자출력
	PORTA = FND_SEGNP[num];
  d8:	84 5f       	subi	r24, 0xF4	; 244
  da:	9e 4f       	sbci	r25, 0xFE	; 254
  dc:	fc 01       	movw	r30, r24
  de:	80 81       	ld	r24, Z
  e0:	8b bb       	out	0x1b, r24	; 27
	PORTE = 0x08;
  e2:	88 e0       	ldi	r24, 0x08	; 8
  e4:	83 b9       	out	0x03, r24	; 3
	PORTE = 0x00;
  e6:	13 b8       	out	0x03, r1	; 3
  e8:	08 95       	ret

000000ea <initPort>:
	
}

void initPort(){
	DDRA = 0xFF;
  ea:	8f ef       	ldi	r24, 0xFF	; 255
  ec:	8a bb       	out	0x1a, r24	; 26
	DDRF = 0xF0;
  ee:	80 ef       	ldi	r24, 0xF0	; 240
  f0:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	DDRG = 0x00;
  f4:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	DDRE = 0x0C;
  f8:	8c e0       	ldi	r24, 0x0C	; 12
  fa:	82 b9       	out	0x02, r24	; 2
	PORTE = 0x04;
  fc:	84 e0       	ldi	r24, 0x04	; 4
  fe:	83 b9       	out	0x03, r24	; 3
	PORTA = 0x0F;
 100:	8f e0       	ldi	r24, 0x0F	; 15
 102:	8b bb       	out	0x1b, r24	; 27
 104:	08 95       	ret

00000106 <initInterrupt>:
void initInterrupt(){
	
	//external interrupt
	
	//int4 버튼 falling edge활성화
	EICRB  &= ~(1<<ISC40);
 106:	8a b7       	in	r24, 0x3a	; 58
 108:	8e 7f       	andi	r24, 0xFE	; 254
 10a:	8a bf       	out	0x3a, r24	; 58
	EICRB  |= 1<<ISC41;
 10c:	8a b7       	in	r24, 0x3a	; 58
 10e:	82 60       	ori	r24, 0x02	; 2
 110:	8a bf       	out	0x3a, r24	; 58
	//int4 입력 활성화
	EIMSK |= 1<<INT4;    
 112:	89 b7       	in	r24, 0x39	; 57
 114:	80 61       	ori	r24, 0x10	; 16
 116:	89 bf       	out	0x39, r24	; 57
	
	//int5 버튼 falling edge활성화
	EICRB  &= ~(1<<ISC50);	//0으로 설정
 118:	8a b7       	in	r24, 0x3a	; 58
 11a:	8b 7f       	andi	r24, 0xFB	; 251
 11c:	8a bf       	out	0x3a, r24	; 58
	EICRB  |= 1<<ISC51;		//1로 설정
 11e:	8a b7       	in	r24, 0x3a	; 58
 120:	88 60       	ori	r24, 0x08	; 8
 122:	8a bf       	out	0x3a, r24	; 58
	//int5 입력 활성화
	EIMSK |= 1<<INT5;
 124:	89 b7       	in	r24, 0x39	; 57
 126:	80 62       	ori	r24, 0x20	; 32
 128:	89 bf       	out	0x39, r24	; 57
 12a:	08 95       	ret

0000012c <__vector_5>:
	
}
ISR(INT4_vect)
{
 12c:	1f 92       	push	r1
 12e:	0f 92       	push	r0
 130:	0f b6       	in	r0, 0x3f	; 63
 132:	0f 92       	push	r0
 134:	11 24       	eor	r1, r1
 136:	2f 93       	push	r18
 138:	8f 93       	push	r24
 13a:	9f 93       	push	r25
	if(timeNum == 9999){
 13c:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 140:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <__data_end+0x1>
 144:	8f 30       	cpi	r24, 0x0F	; 15
 146:	27 e2       	ldi	r18, 0x27	; 39
 148:	92 07       	cpc	r25, r18
 14a:	29 f4       	brne	.+10     	; 0x156 <__vector_5+0x2a>
		timeNum = 0;
 14c:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <__data_end+0x1>
 150:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <__data_end>
 154:	05 c0       	rjmp	.+10     	; 0x160 <__vector_5+0x34>
	}else{
		timeNum++; 
 156:	01 96       	adiw	r24, 0x01	; 1
 158:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <__data_end+0x1>
 15c:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
	}
	
	
	
}
 160:	9f 91       	pop	r25
 162:	8f 91       	pop	r24
 164:	2f 91       	pop	r18
 166:	0f 90       	pop	r0
 168:	0f be       	out	0x3f, r0	; 63
 16a:	0f 90       	pop	r0
 16c:	1f 90       	pop	r1
 16e:	18 95       	reti

00000170 <__vector_6>:
ISR(INT5_vect)
{
 170:	1f 92       	push	r1
 172:	0f 92       	push	r0
 174:	0f b6       	in	r0, 0x3f	; 63
 176:	0f 92       	push	r0
 178:	11 24       	eor	r1, r1
 17a:	8f 93       	push	r24
 17c:	9f 93       	push	r25
	if(timeNum == 0){
 17e:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 182:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <__data_end+0x1>
 186:	00 97       	sbiw	r24, 0x00	; 0
 188:	39 f4       	brne	.+14     	; 0x198 <__vector_6+0x28>
		timeNum = 9999;
 18a:	8f e0       	ldi	r24, 0x0F	; 15
 18c:	97 e2       	ldi	r25, 0x27	; 39
 18e:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <__data_end+0x1>
 192:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
 196:	05 c0       	rjmp	.+10     	; 0x1a2 <__vector_6+0x32>
		}else{
		timeNum--;
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <__data_end+0x1>
 19e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
	}
	
}
 1a2:	9f 91       	pop	r25
 1a4:	8f 91       	pop	r24
 1a6:	0f 90       	pop	r0
 1a8:	0f be       	out	0x3f, r0	; 63
 1aa:	0f 90       	pop	r0
 1ac:	1f 90       	pop	r1
 1ae:	18 95       	reti

000001b0 <main>:


int main(void)
{
	
	initPort();
 1b0:	9c df       	rcall	.-200    	; 0xea <initPort>
	initInterrupt();
 1b2:	a9 df       	rcall	.-174    	; 0x106 <initInterrupt>
 1b4:	78 94       	sei

	sei();      //Global Interrupt Enable
 1b6:	00 e0       	ldi	r16, 0x00	; 0
 1b8:	11 e0       	ldi	r17, 0x01	; 1
 1ba:	c3 e0       	ldi	r28, 0x03	; 3
}



int main(void)
{
 1bc:	d0 e0       	ldi	r29, 0x00	; 0
 1be:	f8 01       	movw	r30, r16
	
	while (1){
		
		//segment print
		for(int i = 0; i < 4; i++){
			printSeg((timeNum/exp10[i])%10,3-i);
 1c0:	61 91       	ld	r22, Z+
 1c2:	71 91       	ld	r23, Z+
 1c4:	8f 01       	movw	r16, r30
 1c6:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 1ca:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <__data_end+0x1>
 1ce:	1f d0       	rcall	.+62     	; 0x20e <__udivmodhi4>
 1d0:	ab 01       	movw	r20, r22
 1d2:	9b 01       	movw	r18, r22
 1d4:	ad ec       	ldi	r26, 0xCD	; 205
 1d6:	bc ec       	ldi	r27, 0xCC	; 204
 1d8:	2e d0       	rcall	.+92     	; 0x236 <__umulhisi3>
 1da:	96 95       	lsr	r25
 1dc:	87 95       	ror	r24
 1de:	96 95       	lsr	r25
 1e0:	87 95       	ror	r24
 1e2:	96 95       	lsr	r25
 1e4:	87 95       	ror	r24
 1e6:	9c 01       	movw	r18, r24
 1e8:	22 0f       	add	r18, r18
 1ea:	33 1f       	adc	r19, r19
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	88 0f       	add	r24, r24
 1f2:	99 1f       	adc	r25, r25
 1f4:	88 0f       	add	r24, r24
 1f6:	99 1f       	adc	r25, r25
 1f8:	82 0f       	add	r24, r18
 1fa:	93 1f       	adc	r25, r19
 1fc:	be 01       	movw	r22, r28
 1fe:	9a 01       	movw	r18, r20
 200:	28 1b       	sub	r18, r24
 202:	39 0b       	sbc	r19, r25
 204:	c9 01       	movw	r24, r18
 206:	60 df       	rcall	.-320    	; 0xc8 <printSeg>
 208:	21 97       	sbiw	r28, 0x01	; 1
 20a:	c8 f6       	brcc	.-78     	; 0x1be <main+0xe>
 20c:	d4 cf       	rjmp	.-88     	; 0x1b6 <main+0x6>

0000020e <__udivmodhi4>:
 20e:	aa 1b       	sub	r26, r26
 210:	bb 1b       	sub	r27, r27
 212:	51 e1       	ldi	r21, 0x11	; 17
 214:	07 c0       	rjmp	.+14     	; 0x224 <__udivmodhi4_ep>

00000216 <__udivmodhi4_loop>:
 216:	aa 1f       	adc	r26, r26
 218:	bb 1f       	adc	r27, r27
 21a:	a6 17       	cp	r26, r22
 21c:	b7 07       	cpc	r27, r23
 21e:	10 f0       	brcs	.+4      	; 0x224 <__udivmodhi4_ep>
 220:	a6 1b       	sub	r26, r22
 222:	b7 0b       	sbc	r27, r23

00000224 <__udivmodhi4_ep>:
 224:	88 1f       	adc	r24, r24
 226:	99 1f       	adc	r25, r25
 228:	5a 95       	dec	r21
 22a:	a9 f7       	brne	.-22     	; 0x216 <__udivmodhi4_loop>
 22c:	80 95       	com	r24
 22e:	90 95       	com	r25
 230:	bc 01       	movw	r22, r24
 232:	cd 01       	movw	r24, r26
 234:	08 95       	ret

00000236 <__umulhisi3>:
 236:	a2 9f       	mul	r26, r18
 238:	b0 01       	movw	r22, r0
 23a:	b3 9f       	mul	r27, r19
 23c:	c0 01       	movw	r24, r0
 23e:	a3 9f       	mul	r26, r19
 240:	70 0d       	add	r23, r0
 242:	81 1d       	adc	r24, r1
 244:	11 24       	eor	r1, r1
 246:	91 1d       	adc	r25, r1
 248:	b2 9f       	mul	r27, r18
 24a:	70 0d       	add	r23, r0
 24c:	81 1d       	adc	r24, r1
 24e:	11 24       	eor	r1, r1
 250:	91 1d       	adc	r25, r1
 252:	08 95       	ret

00000254 <_exit>:
 254:	f8 94       	cli

00000256 <__stop_program>:
 256:	ff cf       	rjmp	.-2      	; 0x256 <__stop_program>
