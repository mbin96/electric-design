
GPIOexercise.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00000232  000002a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000232  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c63  00000000  00000000  0000037c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000090d  00000000  00000000  00000fdf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000472  00000000  00000000  000018ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b4  00000000  00000000  00001d60  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000047a  00000000  00000000  00001e14  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000042a  00000000  00000000  0000228e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  000026b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e3       	ldi	r30, 0x32	; 50
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 31       	cpi	r26, 0x16	; 22
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	97 d0       	rcall	.+302    	; 0x1e2 <main>
  b4:	bc c0       	rjmp	.+376    	; 0x22e <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <init_port>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b8:	80 ef       	ldi	r24, 0xF0	; 240
  ba:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
  be:	8f ef       	ldi	r24, 0xFF	; 255
  c0:	8a bb       	out	0x1a, r24	; 26
  c2:	8c e0       	ldi	r24, 0x0C	; 12
  c4:	82 b9       	out	0x02, r24	; 2
  c6:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
  ca:	08 95       	ret

000000cc <printSeg>:
  cc:	fb 01       	movw	r30, r22
  ce:	e8 5f       	subi	r30, 0xF8	; 248
  d0:	fe 4f       	sbci	r31, 0xFE	; 254
  d2:	20 81       	ld	r18, Z
  d4:	2b bb       	out	0x1b, r18	; 27
  d6:	24 e0       	ldi	r18, 0x04	; 4
  d8:	23 b9       	out	0x03, r18	; 3
  da:	13 b8       	out	0x03, r1	; 3
  dc:	84 5f       	subi	r24, 0xF4	; 244
  de:	9e 4f       	sbci	r25, 0xFE	; 254
  e0:	fc 01       	movw	r30, r24
  e2:	80 81       	ld	r24, Z
  e4:	8b bb       	out	0x1b, r24	; 27
  e6:	88 e0       	ldi	r24, 0x08	; 8
  e8:	83 b9       	out	0x03, r24	; 3
  ea:	13 b8       	out	0x03, r1	; 3
  ec:	8f e9       	ldi	r24, 0x9F	; 159
  ee:	9f e0       	ldi	r25, 0x0F	; 15
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <printSeg+0x24>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <printSeg+0x2a>
  f6:	00 00       	nop
  f8:	08 95       	ret

000000fa <ex4>:
		printSeg(j,i);
		_delay_ms(200);
	}
}

void ex4(){
  fa:	bf 92       	push	r11
  fc:	cf 92       	push	r12
  fe:	df 92       	push	r13
 100:	ef 92       	push	r14
 102:	ff 92       	push	r15
 104:	0f 93       	push	r16
 106:	1f 93       	push	r17
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
	int num = 0;
	unsigned char postPING = 0x0f;
 10c:	0f 2e       	mov	r0, r31
 10e:	ff e0       	ldi	r31, 0x0F	; 15
 110:	bf 2e       	mov	r11, r31
 112:	f0 2d       	mov	r31, r0
		_delay_ms(200);
	}
}

void ex4(){
	int num = 0;
 114:	e1 2c       	mov	r14, r1
 116:	f1 2c       	mov	r15, r1
		}
		//detect sw input
		
		
		
		if(PING != 0x0f && postPING == 0x0f){
 118:	0f 2e       	mov	r0, r31
 11a:	f3 e6       	ldi	r31, 0x63	; 99
 11c:	cf 2e       	mov	r12, r31
 11e:	d1 2c       	mov	r13, r1
 120:	f0 2d       	mov	r31, r0
void ex4(){
	int num = 0;
	unsigned char postPING = 0x0f;
	for(;;){
		//범위초과처리
		if (num == 10000){
 122:	20 e1       	ldi	r18, 0x10	; 16
 124:	e2 16       	cp	r14, r18
 126:	27 e2       	ldi	r18, 0x27	; 39
 128:	f2 06       	cpc	r15, r18
 12a:	59 f0       	breq	.+22     	; 0x142 <ex4+0x48>
			num = 0;
		}else if(num == -1){
 12c:	3f ef       	ldi	r19, 0xFF	; 255
 12e:	e3 16       	cp	r14, r19
 130:	f3 06       	cpc	r15, r19
 132:	49 f4       	brne	.+18     	; 0x146 <ex4+0x4c>
			num = 9999;
 134:	0f 2e       	mov	r0, r31
 136:	ff e0       	ldi	r31, 0x0F	; 15
 138:	ef 2e       	mov	r14, r31
 13a:	f7 e2       	ldi	r31, 0x27	; 39
 13c:	ff 2e       	mov	r15, r31
 13e:	f0 2d       	mov	r31, r0
 140:	02 c0       	rjmp	.+4      	; 0x146 <ex4+0x4c>
	int num = 0;
	unsigned char postPING = 0x0f;
	for(;;){
		//범위초과처리
		if (num == 10000){
			num = 0;
 142:	e1 2c       	mov	r14, r1
 144:	f1 2c       	mov	r15, r1
 146:	00 e0       	ldi	r16, 0x00	; 0
 148:	11 e0       	ldi	r17, 0x01	; 1
		}else if(num == -1){
			num = 9999;
 14a:	c3 e0       	ldi	r28, 0x03	; 3
 14c:	d0 e0       	ldi	r29, 0x00	; 0
		}
		//printSegment
		for(int i = 0; i < 4; i++){
			printSeg((num/exp10[i])%10,3-i);
 14e:	f8 01       	movw	r30, r16
 150:	61 91       	ld	r22, Z+
 152:	71 91       	ld	r23, Z+
 154:	8f 01       	movw	r16, r30
 156:	c7 01       	movw	r24, r14
 158:	47 d0       	rcall	.+142    	; 0x1e8 <__udivmodhi4>
 15a:	ab 01       	movw	r20, r22
 15c:	9b 01       	movw	r18, r22
 15e:	ad ec       	ldi	r26, 0xCD	; 205
 160:	bc ec       	ldi	r27, 0xCC	; 204
 162:	56 d0       	rcall	.+172    	; 0x210 <__umulhisi3>
 164:	96 95       	lsr	r25
 166:	87 95       	ror	r24
 168:	96 95       	lsr	r25
 16a:	87 95       	ror	r24
 16c:	96 95       	lsr	r25
 16e:	87 95       	ror	r24
 170:	9c 01       	movw	r18, r24
 172:	22 0f       	add	r18, r18
 174:	33 1f       	adc	r19, r19
 176:	88 0f       	add	r24, r24
 178:	99 1f       	adc	r25, r25
 17a:	88 0f       	add	r24, r24
 17c:	99 1f       	adc	r25, r25
 17e:	88 0f       	add	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	82 0f       	add	r24, r18
 184:	93 1f       	adc	r25, r19
 186:	be 01       	movw	r22, r28
 188:	9a 01       	movw	r18, r20
 18a:	28 1b       	sub	r18, r24
 18c:	39 0b       	sbc	r19, r25
 18e:	c9 01       	movw	r24, r18
 190:	9d df       	rcall	.-198    	; 0xcc <printSeg>
 192:	21 97       	sbiw	r28, 0x01	; 1
 194:	e0 f6       	brcc	.-72     	; 0x14e <ex4+0x54>
		}
		//detect sw input
		
		
		
		if(PING != 0x0f && postPING == 0x0f){
 196:	f6 01       	movw	r30, r12
 198:	80 81       	ld	r24, Z
 19a:	8f 30       	cpi	r24, 0x0F	; 15
 19c:	a9 f0       	breq	.+42     	; 0x1c8 <ex4+0xce>
 19e:	ff e0       	ldi	r31, 0x0F	; 15
 1a0:	bf 12       	cpse	r11, r31
 1a2:	12 c0       	rjmp	.+36     	; 0x1c8 <ex4+0xce>
			if(PING == 0x07) num++;		//when sw8 pressed
 1a4:	f6 01       	movw	r30, r12
 1a6:	80 81       	ld	r24, Z
 1a8:	87 30       	cpi	r24, 0x07	; 7
 1aa:	19 f4       	brne	.+6      	; 0x1b2 <ex4+0xb8>
 1ac:	ff ef       	ldi	r31, 0xFF	; 255
 1ae:	ef 1a       	sub	r14, r31
 1b0:	ff 0a       	sbc	r15, r31
			if(PING == 0x0b) num--;		//when sw7 pressed
 1b2:	f6 01       	movw	r30, r12
 1b4:	80 81       	ld	r24, Z
 1b6:	8b 30       	cpi	r24, 0x0B	; 11
 1b8:	19 f4       	brne	.+6      	; 0x1c0 <ex4+0xc6>
 1ba:	f1 e0       	ldi	r31, 0x01	; 1
 1bc:	ef 1a       	sub	r14, r31
 1be:	f1 08       	sbc	r15, r1
			if(PING == 0x0e) return 0;	//when sw5 pressed
 1c0:	f6 01       	movw	r30, r12
 1c2:	80 81       	ld	r24, Z
 1c4:	8e 30       	cpi	r24, 0x0E	; 14
 1c6:	19 f0       	breq	.+6      	; 0x1ce <ex4+0xd4>
		}
		postPING = PING;
 1c8:	f6 01       	movw	r30, r12
 1ca:	b0 80       	ld	r11, Z
		
	}
 1cc:	aa cf       	rjmp	.-172    	; 0x122 <ex4+0x28>
	
}
 1ce:	df 91       	pop	r29
 1d0:	cf 91       	pop	r28
 1d2:	1f 91       	pop	r17
 1d4:	0f 91       	pop	r16
 1d6:	ff 90       	pop	r15
 1d8:	ef 90       	pop	r14
 1da:	df 90       	pop	r13
 1dc:	cf 90       	pop	r12
 1de:	bf 90       	pop	r11
 1e0:	08 95       	ret

000001e2 <main>:


int main(void)
{
	//포트 초기화
	init_port();
 1e2:	6a df       	rcall	.-300    	; 0xb8 <init_port>
	int status = 0;
	while (1){
		//ex1();
		//ex2();
		//ex3();
		ex4();
 1e4:	8a df       	rcall	.-236    	; 0xfa <ex4>
 1e6:	fe cf       	rjmp	.-4      	; 0x1e4 <main+0x2>

000001e8 <__udivmodhi4>:
 1e8:	aa 1b       	sub	r26, r26
 1ea:	bb 1b       	sub	r27, r27
 1ec:	51 e1       	ldi	r21, 0x11	; 17
 1ee:	07 c0       	rjmp	.+14     	; 0x1fe <__udivmodhi4_ep>

000001f0 <__udivmodhi4_loop>:
 1f0:	aa 1f       	adc	r26, r26
 1f2:	bb 1f       	adc	r27, r27
 1f4:	a6 17       	cp	r26, r22
 1f6:	b7 07       	cpc	r27, r23
 1f8:	10 f0       	brcs	.+4      	; 0x1fe <__udivmodhi4_ep>
 1fa:	a6 1b       	sub	r26, r22
 1fc:	b7 0b       	sbc	r27, r23

000001fe <__udivmodhi4_ep>:
 1fe:	88 1f       	adc	r24, r24
 200:	99 1f       	adc	r25, r25
 202:	5a 95       	dec	r21
 204:	a9 f7       	brne	.-22     	; 0x1f0 <__udivmodhi4_loop>
 206:	80 95       	com	r24
 208:	90 95       	com	r25
 20a:	bc 01       	movw	r22, r24
 20c:	cd 01       	movw	r24, r26
 20e:	08 95       	ret

00000210 <__umulhisi3>:
 210:	a2 9f       	mul	r26, r18
 212:	b0 01       	movw	r22, r0
 214:	b3 9f       	mul	r27, r19
 216:	c0 01       	movw	r24, r0
 218:	a3 9f       	mul	r26, r19
 21a:	70 0d       	add	r23, r0
 21c:	81 1d       	adc	r24, r1
 21e:	11 24       	eor	r1, r1
 220:	91 1d       	adc	r25, r1
 222:	b2 9f       	mul	r27, r18
 224:	70 0d       	add	r23, r0
 226:	81 1d       	adc	r24, r1
 228:	11 24       	eor	r1, r1
 22a:	91 1d       	adc	r25, r1
 22c:	08 95       	ret

0000022e <_exit>:
 22e:	f8 94       	cli

00000230 <__stop_program>:
 230:	ff cf       	rjmp	.-2      	; 0x230 <__stop_program>
