
LineTracer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  0000073c  000007d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000073c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  0080011a  0080011a  000007ea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000081c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  0000085c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d27  00000000  00000000  000008dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008cd  00000000  00000000  00001603  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006c9  00000000  00000000  00001ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000174  00000000  00000000  0000259c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000594  00000000  00000000  00002710  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000488  00000000  00000000  00002ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  0000312c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	5d c0       	rjmp	.+186    	; 0xbc <__ctors_end>
   2:	00 00       	nop
   4:	78 c0       	rjmp	.+240    	; 0xf6 <__bad_interrupt>
   6:	00 00       	nop
   8:	76 c0       	rjmp	.+236    	; 0xf6 <__bad_interrupt>
   a:	00 00       	nop
   c:	74 c0       	rjmp	.+232    	; 0xf6 <__bad_interrupt>
   e:	00 00       	nop
  10:	72 c0       	rjmp	.+228    	; 0xf6 <__bad_interrupt>
  12:	00 00       	nop
  14:	5e c1       	rjmp	.+700    	; 0x2d2 <__vector_5>
  16:	00 00       	nop
  18:	48 c1       	rjmp	.+656    	; 0x2aa <__vector_6>
  1a:	00 00       	nop
  1c:	6c c0       	rjmp	.+216    	; 0xf6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6a c0       	rjmp	.+212    	; 0xf6 <__bad_interrupt>
  22:	00 00       	nop
  24:	68 c0       	rjmp	.+208    	; 0xf6 <__bad_interrupt>
  26:	00 00       	nop
  28:	66 c0       	rjmp	.+204    	; 0xf6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	64 c0       	rjmp	.+200    	; 0xf6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	62 c0       	rjmp	.+196    	; 0xf6 <__bad_interrupt>
  32:	00 00       	nop
  34:	60 c0       	rjmp	.+192    	; 0xf6 <__bad_interrupt>
  36:	00 00       	nop
  38:	5e c0       	rjmp	.+188    	; 0xf6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	ab c1       	rjmp	.+854    	; 0x394 <__vector_15>
  3e:	00 00       	nop
  40:	5a c0       	rjmp	.+180    	; 0xf6 <__bad_interrupt>
  42:	00 00       	nop
  44:	58 c0       	rjmp	.+176    	; 0xf6 <__bad_interrupt>
  46:	00 00       	nop
  48:	56 c0       	rjmp	.+172    	; 0xf6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	54 c0       	rjmp	.+168    	; 0xf6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	52 c0       	rjmp	.+164    	; 0xf6 <__bad_interrupt>
  52:	00 00       	nop
  54:	50 c0       	rjmp	.+160    	; 0xf6 <__bad_interrupt>
  56:	00 00       	nop
  58:	4e c0       	rjmp	.+156    	; 0xf6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4c c0       	rjmp	.+152    	; 0xf6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4a c0       	rjmp	.+148    	; 0xf6 <__bad_interrupt>
  62:	00 00       	nop
  64:	48 c0       	rjmp	.+144    	; 0xf6 <__bad_interrupt>
  66:	00 00       	nop
  68:	46 c0       	rjmp	.+140    	; 0xf6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	44 c0       	rjmp	.+136    	; 0xf6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	42 c0       	rjmp	.+132    	; 0xf6 <__bad_interrupt>
  72:	00 00       	nop
  74:	40 c0       	rjmp	.+128    	; 0xf6 <__bad_interrupt>
  76:	00 00       	nop
  78:	3e c0       	rjmp	.+124    	; 0xf6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3c c0       	rjmp	.+120    	; 0xf6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3a c0       	rjmp	.+116    	; 0xf6 <__bad_interrupt>
  82:	00 00       	nop
  84:	38 c0       	rjmp	.+112    	; 0xf6 <__bad_interrupt>
  86:	00 00       	nop
  88:	36 c0       	rjmp	.+108    	; 0xf6 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	ac 00       	.word	0x00ac	; ????
  8e:	b0 00       	.word	0x00b0	; ????
  90:	ae 00       	.word	0x00ae	; ????
  92:	b4 00       	.word	0x00b4	; ????
  94:	ba 00       	.word	0x00ba	; ????
  96:	b2 00       	.word	0x00b2	; ????
  98:	ba 00       	.word	0x00ba	; ????
  9a:	b8 00       	.word	0x00b8	; ????
  9c:	d5 00       	.word	0x00d5	; ????
  9e:	ba 00       	.word	0x00ba	; ????
  a0:	ba 00       	.word	0x00ba	; ????
  a2:	b6 00       	.word	0x00b6	; ????
  a4:	c5 00       	.word	0x00c5	; ????
  a6:	c9 00       	.word	0x00c9	; ????
  a8:	c7 00       	.word	0x00c7	; ????
  aa:	cd 00       	.word	0x00cd	; ????
  ac:	d3 00       	.word	0x00d3	; ????
  ae:	cb 00       	.word	0x00cb	; ????
  b0:	d3 00       	.word	0x00d3	; ????
  b2:	d1 00       	.word	0x00d1	; ????
  b4:	d7 00       	.word	0x00d7	; ????
  b6:	d3 00       	.word	0x00d3	; ????
  b8:	d3 00       	.word	0x00d3	; ????
  ba:	cf 00       	.word	0x00cf	; ????

000000bc <__ctors_end>:
  bc:	11 24       	eor	r1, r1
  be:	1f be       	out	0x3f, r1	; 63
  c0:	cf ef       	ldi	r28, 0xFF	; 255
  c2:	d0 e1       	ldi	r29, 0x10	; 16
  c4:	de bf       	out	0x3e, r29	; 62
  c6:	cd bf       	out	0x3d, r28	; 61

000000c8 <__do_copy_data>:
  c8:	11 e0       	ldi	r17, 0x01	; 1
  ca:	a0 e0       	ldi	r26, 0x00	; 0
  cc:	b1 e0       	ldi	r27, 0x01	; 1
  ce:	ec e3       	ldi	r30, 0x3C	; 60
  d0:	f7 e0       	ldi	r31, 0x07	; 7
  d2:	00 e0       	ldi	r16, 0x00	; 0
  d4:	0b bf       	out	0x3b, r16	; 59
  d6:	02 c0       	rjmp	.+4      	; 0xdc <__do_copy_data+0x14>
  d8:	07 90       	elpm	r0, Z+
  da:	0d 92       	st	X+, r0
  dc:	aa 31       	cpi	r26, 0x1A	; 26
  de:	b1 07       	cpc	r27, r17
  e0:	d9 f7       	brne	.-10     	; 0xd8 <__do_copy_data+0x10>

000000e2 <__do_clear_bss>:
  e2:	21 e0       	ldi	r18, 0x01	; 1
  e4:	aa e1       	ldi	r26, 0x1A	; 26
  e6:	b1 e0       	ldi	r27, 0x01	; 1
  e8:	01 c0       	rjmp	.+2      	; 0xec <.do_clear_bss_start>

000000ea <.do_clear_bss_loop>:
  ea:	1d 92       	st	X+, r1

000000ec <.do_clear_bss_start>:
  ec:	ae 32       	cpi	r26, 0x2E	; 46
  ee:	b2 07       	cpc	r27, r18
  f0:	e1 f7       	brne	.-8      	; 0xea <.do_clear_bss_loop>
  f2:	bf d2       	rcall	.+1406   	; 0x672 <main>
  f4:	21 c3       	rjmp	.+1602   	; 0x738 <_exit>

000000f6 <__bad_interrupt>:
  f6:	84 cf       	rjmp	.-248    	; 0x0 <__vectors>

000000f8 <initPort>:
#define SENSOR_PORT		PINC


void initPort(void)
{
	PORTA = 0x00;
  f8:	1b ba       	out	0x1b, r1	; 27
	DDRA  = 0x00;
  fa:	1a ba       	out	0x1a, r1	; 26
	PORTB = 0x00;
  fc:	18 ba       	out	0x18, r1	; 24
	DDRB  = 0x00;
  fe:	17 ba       	out	0x17, r1	; 23
	PORTC = 0x00;
 100:	15 ba       	out	0x15, r1	; 21
	DDRC  = 0x00;
 102:	14 ba       	out	0x14, r1	; 20
	PORTD = 0x00;
 104:	12 ba       	out	0x12, r1	; 18
	DDRD  = 0xFF;
 106:	8f ef       	ldi	r24, 0xFF	; 255
 108:	81 bb       	out	0x11, r24	; 17
	PORTE = 0x00;
 10a:	13 b8       	out	0x03, r1	; 3
	DDRE  = 0x00;
 10c:	12 b8       	out	0x02, r1	; 2
	PORTF = 0x00;
 10e:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	DDRF  = 0x00;
 112:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	PORTG = 0x00;
 116:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
	DDRG  = 0x03;
 11a:	83 e0       	ldi	r24, 0x03	; 3
 11c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
 120:	08 95       	ret

00000122 <initDevices>:
}

void initDevices(void)
{
	cli(); //disable all interrupts
 122:	f8 94       	cli
	XDIV  = 0x00; //xtal divider
 124:	1c be       	out	0x3c, r1	; 60
	XMCRA = 0x00; //external memory
 126:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
	initPort();
 12a:	e6 df       	rcall	.-52     	; 0xf8 <initPort>
    

	MCUCR = 0x00;
 12c:	15 be       	out	0x35, r1	; 53
	EICRA = 0x00; //extended ext ints
 12e:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	EICRB = 0x00; //extended ext ints
 132:	1a be       	out	0x3a, r1	; 58
	EIMSK = 0x00;
 134:	19 be       	out	0x39, r1	; 57
	TIMSK = 0x00; //timer interrupt sources
 136:	17 be       	out	0x37, r1	; 55
	ETIMSK = 0x00; //extended timer interrupt sources
 138:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <__TEXT_REGION_LENGTH__+0x7e007d>
	sei(); //re-enable interrupts
 13c:	78 94       	sei
 13e:	08 95       	ret

00000140 <LEFTmotorOneClock>:
}

/* Stepping Motor derive---------------------------*/
unsigned char  LEFTmotorOneClock(unsigned char step, char dir)
{	
	step = step & 0x0f;
 140:	8f 70       	andi	r24, 0x0F	; 15
	if(dir){
 142:	66 23       	and	r22, r22
 144:	c9 f0       	breq	.+50     	; 0x178 <LEFTmotorOneClock+0x38>
		switch(step){
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	fc 01       	movw	r30, r24
 14a:	31 97       	sbiw	r30, 0x01	; 1
 14c:	ec 30       	cpi	r30, 0x0C	; 12
 14e:	f1 05       	cpc	r31, r1
 150:	88 f4       	brcc	.+34     	; 0x174 <LEFTmotorOneClock+0x34>
 152:	ea 5b       	subi	r30, 0xBA	; 186
 154:	ff 4f       	sbci	r31, 0xFF	; 255
 156:	d8 c2       	rjmp	.+1456   	; 0x708 <__tablejump2__>
			case 0x09: step=0x01; break;
			case 0x01: step=0x03; break;
 158:	83 e0       	ldi	r24, 0x03	; 3
 15a:	08 95       	ret
			case 0x03: step=0x02; break;
 15c:	82 e0       	ldi	r24, 0x02	; 2
 15e:	08 95       	ret
			case 0x02: step=0x06; break;
 160:	86 e0       	ldi	r24, 0x06	; 6
 162:	08 95       	ret
			case 0x06: step=0x04; break;
 164:	84 e0       	ldi	r24, 0x04	; 4
 166:	08 95       	ret
			case 0x04: step=0x0c; break;
 168:	8c e0       	ldi	r24, 0x0C	; 12
 16a:	08 95       	ret
			case 0x0c: step=0x08; break;
 16c:	88 e0       	ldi	r24, 0x08	; 8
 16e:	08 95       	ret
			case 0x08: step=0x09; break;
 170:	89 e0       	ldi	r24, 0x09	; 9
 172:	08 95       	ret
			default: step=0x0c; break;
 174:	8c e0       	ldi	r24, 0x0C	; 12
 176:	08 95       	ret
		}
	}else{
		switch(step){
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	fc 01       	movw	r30, r24
 17c:	31 97       	sbiw	r30, 0x01	; 1
 17e:	ec 30       	cpi	r30, 0x0C	; 12
 180:	f1 05       	cpc	r31, r1
 182:	88 f4       	brcc	.+34     	; 0x1a6 <LEFTmotorOneClock+0x66>
 184:	ee 5a       	subi	r30, 0xAE	; 174
 186:	ff 4f       	sbci	r31, 0xFF	; 255
 188:	bf c2       	rjmp	.+1406   	; 0x708 <__tablejump2__>
			case 0x09: step=0x08; break;
			case 0x01: step=0x09; break;
 18a:	89 e0       	ldi	r24, 0x09	; 9
 18c:	08 95       	ret
			case 0x03: step=0x01; break;
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	08 95       	ret
			case 0x02: step=0x03; break;
 192:	83 e0       	ldi	r24, 0x03	; 3
 194:	08 95       	ret
			case 0x06: step=0x02; break;
 196:	82 e0       	ldi	r24, 0x02	; 2
 198:	08 95       	ret
			case 0x04: step=0x06; break;
 19a:	86 e0       	ldi	r24, 0x06	; 6
 19c:	08 95       	ret
			case 0x0c: step=0x04; break;
 19e:	84 e0       	ldi	r24, 0x04	; 4
 1a0:	08 95       	ret
			case 0x08: step=0x0c; break;
 1a2:	8c e0       	ldi	r24, 0x0C	; 12
 1a4:	08 95       	ret
			default: step=0x0c; break;
 1a6:	8c e0       	ldi	r24, 0x0C	; 12
 1a8:	08 95       	ret
unsigned char  LEFTmotorOneClock(unsigned char step, char dir)
{	
	step = step & 0x0f;
	if(dir){
		switch(step){
			case 0x09: step=0x01; break;
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	08 95       	ret
			case 0x08: step=0x09; break;
			default: step=0x0c; break;
		}
	}else{
		switch(step){
			case 0x09: step=0x08; break;
 1ae:	88 e0       	ldi	r24, 0x08	; 8
			default: step=0x0c; break;
		}
	}
	return step;

}
 1b0:	08 95       	ret

000001b2 <RIGHTmotorOneClock>:

unsigned char  RIGHTmotorOneClock(unsigned char step, char dir)
{	
	step = step & 0xf0;
 1b2:	80 7f       	andi	r24, 0xF0	; 240
	if(dir){
 1b4:	66 23       	and	r22, r22
 1b6:	29 f1       	breq	.+74     	; 0x202 <RIGHTmotorOneClock+0x50>
		switch(step){//후진
 1b8:	80 34       	cpi	r24, 0x40	; 64
 1ba:	d9 f0       	breq	.+54     	; 0x1f2 <RIGHTmotorOneClock+0x40>
 1bc:	38 f4       	brcc	.+14     	; 0x1cc <RIGHTmotorOneClock+0x1a>
 1be:	80 32       	cpi	r24, 0x20	; 32
 1c0:	a1 f0       	breq	.+40     	; 0x1ea <RIGHTmotorOneClock+0x38>
 1c2:	80 33       	cpi	r24, 0x30	; 48
 1c4:	81 f0       	breq	.+32     	; 0x1e6 <RIGHTmotorOneClock+0x34>
 1c6:	80 31       	cpi	r24, 0x10	; 16
 1c8:	d1 f4       	brne	.+52     	; 0x1fe <RIGHTmotorOneClock+0x4c>
 1ca:	0b c0       	rjmp	.+22     	; 0x1e2 <RIGHTmotorOneClock+0x30>
 1cc:	80 38       	cpi	r24, 0x80	; 128
 1ce:	a9 f0       	breq	.+42     	; 0x1fa <RIGHTmotorOneClock+0x48>
 1d0:	18 f4       	brcc	.+6      	; 0x1d8 <RIGHTmotorOneClock+0x26>
 1d2:	80 36       	cpi	r24, 0x60	; 96
 1d4:	61 f0       	breq	.+24     	; 0x1ee <RIGHTmotorOneClock+0x3c>
 1d6:	13 c0       	rjmp	.+38     	; 0x1fe <RIGHTmotorOneClock+0x4c>
 1d8:	80 39       	cpi	r24, 0x90	; 144
 1da:	c1 f1       	breq	.+112    	; 0x24c <RIGHTmotorOneClock+0x9a>
 1dc:	80 3c       	cpi	r24, 0xC0	; 192
 1de:	59 f0       	breq	.+22     	; 0x1f6 <RIGHTmotorOneClock+0x44>
 1e0:	0e c0       	rjmp	.+28     	; 0x1fe <RIGHTmotorOneClock+0x4c>
			case 0x90: step=0x10; break;
			case 0x10: step=0x30; break;
 1e2:	80 e3       	ldi	r24, 0x30	; 48
 1e4:	08 95       	ret
			case 0x30: step=0x20; break;
 1e6:	80 e2       	ldi	r24, 0x20	; 32
 1e8:	08 95       	ret
			case 0x20: step=0x60; break;
 1ea:	80 e6       	ldi	r24, 0x60	; 96
 1ec:	08 95       	ret
			case 0x60: step=0x40; break;
 1ee:	80 e4       	ldi	r24, 0x40	; 64
 1f0:	08 95       	ret
			case 0x40: step=0xc0; break;
 1f2:	80 ec       	ldi	r24, 0xC0	; 192
 1f4:	08 95       	ret
			case 0xc0: step=0x80; break;
 1f6:	80 e8       	ldi	r24, 0x80	; 128
 1f8:	08 95       	ret
			case 0x80: step=0x90; break;
 1fa:	80 e9       	ldi	r24, 0x90	; 144
 1fc:	08 95       	ret
			default: step=0xc0; break;
 1fe:	80 ec       	ldi	r24, 0xC0	; 192
 200:	08 95       	ret
		}
	}else{
		switch(step){//전진
 202:	80 34       	cpi	r24, 0x40	; 64
 204:	d9 f0       	breq	.+54     	; 0x23c <RIGHTmotorOneClock+0x8a>
 206:	38 f4       	brcc	.+14     	; 0x216 <RIGHTmotorOneClock+0x64>
 208:	80 32       	cpi	r24, 0x20	; 32
 20a:	a1 f0       	breq	.+40     	; 0x234 <RIGHTmotorOneClock+0x82>
 20c:	80 33       	cpi	r24, 0x30	; 48
 20e:	81 f0       	breq	.+32     	; 0x230 <RIGHTmotorOneClock+0x7e>
 210:	80 31       	cpi	r24, 0x10	; 16
 212:	d1 f4       	brne	.+52     	; 0x248 <RIGHTmotorOneClock+0x96>
 214:	0b c0       	rjmp	.+22     	; 0x22c <RIGHTmotorOneClock+0x7a>
 216:	80 38       	cpi	r24, 0x80	; 128
 218:	a9 f0       	breq	.+42     	; 0x244 <RIGHTmotorOneClock+0x92>
 21a:	18 f4       	brcc	.+6      	; 0x222 <RIGHTmotorOneClock+0x70>
 21c:	80 36       	cpi	r24, 0x60	; 96
 21e:	61 f0       	breq	.+24     	; 0x238 <RIGHTmotorOneClock+0x86>
 220:	13 c0       	rjmp	.+38     	; 0x248 <RIGHTmotorOneClock+0x96>
 222:	80 39       	cpi	r24, 0x90	; 144
 224:	a9 f0       	breq	.+42     	; 0x250 <RIGHTmotorOneClock+0x9e>
 226:	80 3c       	cpi	r24, 0xC0	; 192
 228:	59 f0       	breq	.+22     	; 0x240 <RIGHTmotorOneClock+0x8e>
 22a:	0e c0       	rjmp	.+28     	; 0x248 <RIGHTmotorOneClock+0x96>
			case 0x90: step=0x80; break;//1001
			case 0x10: step=0x90; break;//0001
 22c:	80 e9       	ldi	r24, 0x90	; 144
 22e:	08 95       	ret
			case 0x30: step=0x10; break;//0011
 230:	80 e1       	ldi	r24, 0x10	; 16
 232:	08 95       	ret
			case 0x20: step=0x30; break;//0010
 234:	80 e3       	ldi	r24, 0x30	; 48
 236:	08 95       	ret
			case 0x60: step=0x20; break;//0110
 238:	80 e2       	ldi	r24, 0x20	; 32
 23a:	08 95       	ret
			case 0x40: step=0x60; break;//0100
 23c:	80 e6       	ldi	r24, 0x60	; 96
 23e:	08 95       	ret
			case 0xc0: step=0x40; break;//1100
 240:	80 e4       	ldi	r24, 0x40	; 64
 242:	08 95       	ret
			case 0x80: step=0xc0; break;//1000
 244:	80 ec       	ldi	r24, 0xC0	; 192
 246:	08 95       	ret
			default: step=0xc0; break;
 248:	80 ec       	ldi	r24, 0xC0	; 192
 24a:	08 95       	ret
unsigned char  RIGHTmotorOneClock(unsigned char step, char dir)
{	
	step = step & 0xf0;
	if(dir){
		switch(step){//후진
			case 0x90: step=0x10; break;
 24c:	80 e1       	ldi	r24, 0x10	; 16
 24e:	08 95       	ret
			case 0x80: step=0x90; break;
			default: step=0xc0; break;
		}
	}else{
		switch(step){//전진
			case 0x90: step=0x80; break;//1001
 250:	80 e8       	ldi	r24, 0x80	; 128
			case 0x80: step=0xc0; break;//1000
			default: step=0xc0; break;
		}
	}
	return step;
}
 252:	08 95       	ret

00000254 <printSeg>:
void printSeg(int segNum, int segDigit){
    //by schematic, PORTE must being clear before set segment's digit and led.
    //because circuit use same port(A) to set segment's digit and led by latch.

    //set segment digit to print
    PORTA = FND_SEGPOS[segDigit];
 254:	fb 01       	movw	r30, r22
 256:	e4 5f       	subi	r30, 0xF4	; 244
 258:	fe 4f       	sbci	r31, 0xFE	; 254
 25a:	20 81       	ld	r18, Z
 25c:	2b bb       	out	0x1b, r18	; 27
    PORTE |= 0x04; //set 1 segment digit latch
 25e:	1a 9a       	sbi	0x03, 2	; 3
    PORTE &= ~(0x04); //clear LED_CTL(PE2)
 260:	1a 98       	cbi	0x03, 2	; 3

    //print num at segment
    PORTA = FND_SEGNP[segNum]; //print with out decimal point
 262:	80 5f       	subi	r24, 0xF0	; 240
 264:	9e 4f       	sbci	r25, 0xFE	; 254
 266:	fc 01       	movw	r30, r24
 268:	80 81       	ld	r24, Z
 26a:	8b bb       	out	0x1b, r24	; 27
    PORTE |= 0x08; //set 1 segment led latch
 26c:	1b 9a       	sbi	0x03, 3	; 3
    PORTE &= ~(0x08); //clear LED_DATA(PE3)
 26e:	1b 98       	cbi	0x03, 3	; 3
 270:	08 95       	ret

00000272 <initSegment>:
}

void initSegment(){
	//initialize port A and E
	DDRA = 0xFF;    //set portA(7:0) to output
 272:	8f ef       	ldi	r24, 0xFF	; 255
 274:	8a bb       	out	0x1a, r24	; 26
	DDRE |= 0x0C;   //set portE(3:2) to output
 276:	82 b1       	in	r24, 0x02	; 2
 278:	8c 60       	ori	r24, 0x0C	; 12
 27a:	82 b9       	out	0x02, r24	; 2
	PORTE |= 0x04;  //init portE(3)
 27c:	1a 9a       	sbi	0x03, 2	; 3
	PORTA = 0x0F;   //init portA(3:0)
 27e:	8f e0       	ldi	r24, 0x0F	; 15
 280:	8b bb       	out	0x1b, r24	; 27
 282:	08 95       	ret

00000284 <initInterrupt>:

////////////////////////interrupt///////////////////
void initInterrupt(){
        //external interrupt int4 enable
        //int4 pin falling edge활성화
        EICRB &= ~(1 << ISC40);
 284:	8a b7       	in	r24, 0x3a	; 58
 286:	8e 7f       	andi	r24, 0xFE	; 254
 288:	8a bf       	out	0x3a, r24	; 58
        EICRB |= 1 << ISC41; //same to EICRB = 0d00000010
 28a:	8a b7       	in	r24, 0x3a	; 58
 28c:	82 60       	ori	r24, 0x02	; 2
 28e:	8a bf       	out	0x3a, r24	; 58
        //enable external interrupt 4
        EIMSK |= 1 << INT4;
 290:	89 b7       	in	r24, 0x39	; 57
 292:	80 61       	ori	r24, 0x10	; 16
 294:	89 bf       	out	0x39, r24	; 57

        //external interrupt int5 enable
        //int5 pin falling edge활성화
        EICRB &= ~(1 << ISC50); //clear
 296:	8a b7       	in	r24, 0x3a	; 58
 298:	8b 7f       	andi	r24, 0xFB	; 251
 29a:	8a bf       	out	0x3a, r24	; 58
        EICRB |= 1 << ISC51;    //set
 29c:	8a b7       	in	r24, 0x3a	; 58
 29e:	88 60       	ori	r24, 0x08	; 8
 2a0:	8a bf       	out	0x3a, r24	; 58
        //enable external interrupt 5
        EIMSK |= 1 << INT5;
 2a2:	89 b7       	in	r24, 0x39	; 57
 2a4:	80 62       	ori	r24, 0x20	; 32
 2a6:	89 bf       	out	0x39, r24	; 57
 2a8:	08 95       	ret

000002aa <__vector_6>:
}

ISR(INT5_vect){
 2aa:	1f 92       	push	r1
 2ac:	0f 92       	push	r0
 2ae:	0f b6       	in	r0, 0x3f	; 63
 2b0:	0f 92       	push	r0
 2b2:	11 24       	eor	r1, r1
 2b4:	8f 93       	push	r24
 2b6:	9f 93       	push	r25
    state = STATE_RUNNING;
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <state+0x1>
 2c0:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <state>
}
 2c4:	9f 91       	pop	r25
 2c6:	8f 91       	pop	r24
 2c8:	0f 90       	pop	r0
 2ca:	0f be       	out	0x3f, r0	; 63
 2cc:	0f 90       	pop	r0
 2ce:	1f 90       	pop	r1
 2d0:	18 95       	reti

000002d2 <__vector_5>:
ISR(INT4_vect){
 2d2:	1f 92       	push	r1
 2d4:	0f 92       	push	r0
 2d6:	0f b6       	in	r0, 0x3f	; 63
 2d8:	0f 92       	push	r0
 2da:	11 24       	eor	r1, r1
 2dc:	8f 93       	push	r24
 2de:	9f 93       	push	r25
	//when interrupt 4 excu, increase num
	timeNum = OCR0;
 2e0:	81 b7       	in	r24, 0x31	; 49
	timeNum--;
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	01 97       	sbiw	r24, 0x01	; 1
	if (timeNum<10){
 2e6:	8a 30       	cpi	r24, 0x0A	; 10
 2e8:	91 05       	cpc	r25, r1
 2ea:	28 f0       	brcs	.+10     	; 0x2f6 <__vector_5+0x24>
    state = STATE_RUNNING;
}
ISR(INT4_vect){
	//when interrupt 4 excu, increase num
	timeNum = OCR0;
	timeNum--;
 2ec:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <timeNum+0x1>
 2f0:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <timeNum>
 2f4:	06 c0       	rjmp	.+12     	; 0x302 <__vector_5+0x30>
	if (timeNum<10){
		timeNum = 128;
 2f6:	80 e8       	ldi	r24, 0x80	; 128
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <timeNum+0x1>
 2fe:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <timeNum>
	}
	OCR0 = timeNum;
 302:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <timeNum>
 306:	81 bf       	out	0x31, r24	; 49
}
 308:	9f 91       	pop	r25
 30a:	8f 91       	pop	r24
 30c:	0f 90       	pop	r0
 30e:	0f be       	out	0x3f, r0	; 63
 310:	0f 90       	pop	r0
 312:	1f 90       	pop	r1
 314:	18 95       	reti

00000316 <delay>:
void delay(int n)
{
 316:	cf 93       	push	r28
 318:	df 93       	push	r29
 31a:	00 d0       	rcall	.+0      	; 0x31c <delay+0x6>
 31c:	00 d0       	rcall	.+0      	; 0x31e <delay+0x8>
 31e:	cd b7       	in	r28, 0x3d	; 61
 320:	de b7       	in	r29, 0x3e	; 62
	volatile int i,j;
	for(i=1;i<n;i++)
 322:	21 e0       	ldi	r18, 0x01	; 1
 324:	30 e0       	ldi	r19, 0x00	; 0
 326:	3a 83       	std	Y+2, r19	; 0x02
 328:	29 83       	std	Y+1, r18	; 0x01
 32a:	29 81       	ldd	r18, Y+1	; 0x01
 32c:	3a 81       	ldd	r19, Y+2	; 0x02
 32e:	28 17       	cp	r18, r24
 330:	39 07       	cpc	r19, r25
 332:	fc f4       	brge	.+62     	; 0x372 <delay+0x5c>
	{
    	for(j=1;j<400;j++);
 334:	41 e0       	ldi	r20, 0x01	; 1
 336:	50 e0       	ldi	r21, 0x00	; 0
 338:	5c 83       	std	Y+4, r21	; 0x04
 33a:	4b 83       	std	Y+3, r20	; 0x03
 33c:	2b 81       	ldd	r18, Y+3	; 0x03
 33e:	3c 81       	ldd	r19, Y+4	; 0x04
 340:	20 39       	cpi	r18, 0x90	; 144
 342:	31 40       	sbci	r19, 0x01	; 1
 344:	5c f4       	brge	.+22     	; 0x35c <delay+0x46>
 346:	2b 81       	ldd	r18, Y+3	; 0x03
 348:	3c 81       	ldd	r19, Y+4	; 0x04
 34a:	2f 5f       	subi	r18, 0xFF	; 255
 34c:	3f 4f       	sbci	r19, 0xFF	; 255
 34e:	3c 83       	std	Y+4, r19	; 0x04
 350:	2b 83       	std	Y+3, r18	; 0x03
 352:	2b 81       	ldd	r18, Y+3	; 0x03
 354:	3c 81       	ldd	r19, Y+4	; 0x04
 356:	20 39       	cpi	r18, 0x90	; 144
 358:	31 40       	sbci	r19, 0x01	; 1
 35a:	ac f3       	brlt	.-22     	; 0x346 <delay+0x30>
	OCR0 = timeNum;
}
void delay(int n)
{
	volatile int i,j;
	for(i=1;i<n;i++)
 35c:	29 81       	ldd	r18, Y+1	; 0x01
 35e:	3a 81       	ldd	r19, Y+2	; 0x02
 360:	2f 5f       	subi	r18, 0xFF	; 255
 362:	3f 4f       	sbci	r19, 0xFF	; 255
 364:	3a 83       	std	Y+2, r19	; 0x02
 366:	29 83       	std	Y+1, r18	; 0x01
 368:	29 81       	ldd	r18, Y+1	; 0x01
 36a:	3a 81       	ldd	r19, Y+2	; 0x02
 36c:	28 17       	cp	r18, r24
 36e:	39 07       	cpc	r19, r25
 370:	1c f3       	brlt	.-58     	; 0x338 <delay+0x22>
	{
    	for(j=1;j<400;j++);
	}
}
 372:	0f 90       	pop	r0
 374:	0f 90       	pop	r0
 376:	0f 90       	pop	r0
 378:	0f 90       	pop	r0
 37a:	df 91       	pop	r29
 37c:	cf 91       	pop	r28
 37e:	08 95       	ret

00000380 <initTimerInterrupt>:


void initTimerInterrupt()
{
    TCCR0 = 0x0e; //0d00001110//CTC mode and 256 prescaling
 380:	8e e0       	ldi	r24, 0x0E	; 14
 382:	83 bf       	out	0x33, r24	; 51
    TCNT0 = 0x00; //clear count value register. TCNT0 increase count from 0, clear on 63
 384:	12 be       	out	0x32, r1	; 50
    TIMSK = 0x02; //enable Timer/Counter0 compare match interrupt, disable overflow interrupt
 386:	82 e0       	ldi	r24, 0x02	; 2
 388:	87 bf       	out	0x37, r24	; 55
    TIFR = 0xff;  //write logic 1 on flag for clear register
 38a:	8f ef       	ldi	r24, 0xFF	; 255
 38c:	86 bf       	out	0x36, r24	; 54
    OCR0 = 0x3F;  //compare 63
 38e:	8f e3       	ldi	r24, 0x3F	; 63
 390:	81 bf       	out	0x31, r24	; 49
 392:	08 95       	ret

00000394 <__vector_15>:
unsigned short motorForceRight = 0;
unsigned short preSensor = 0;
unsigned short countStopSign = 0;

ISR(TIMER0_COMP_vect)   //5ms마다 실행됨
{
 394:	1f 92       	push	r1
 396:	0f 92       	push	r0
 398:	0f b6       	in	r0, 0x3f	; 63
 39a:	0f 92       	push	r0
 39c:	11 24       	eor	r1, r1
 39e:	0b b6       	in	r0, 0x3b	; 59
 3a0:	0f 92       	push	r0
 3a2:	0f 93       	push	r16
 3a4:	1f 93       	push	r17
 3a6:	2f 93       	push	r18
 3a8:	3f 93       	push	r19
 3aa:	4f 93       	push	r20
 3ac:	5f 93       	push	r21
 3ae:	6f 93       	push	r22
 3b0:	7f 93       	push	r23
 3b2:	8f 93       	push	r24
 3b4:	9f 93       	push	r25
 3b6:	af 93       	push	r26
 3b8:	bf 93       	push	r27
 3ba:	cf 93       	push	r28
 3bc:	ef 93       	push	r30
 3be:	ff 93       	push	r31
    if(state){
 3c0:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <state>
 3c4:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <state+0x1>
 3c8:	89 2b       	or	r24, r25
 3ca:	09 f4       	brne	.+2      	; 0x3ce <__vector_15+0x3a>
 3cc:	3c c1       	rjmp	.+632    	; 0x646 <__LOCK_REGION_LENGTH__+0x246>
        int sensor = SENSOR_PORT & 0x0F;
 3ce:	83 b3       	in	r24, 0x13	; 19
 3d0:	c8 2f       	mov	r28, r24
 3d2:	cf 70       	andi	r28, 0x0F	; 15
        motorCountForRight++;
 3d4:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <motorCountForRight>
 3d8:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <motorCountForRight+0x1>
 3dc:	01 96       	adiw	r24, 0x01	; 1
 3de:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <motorCountForRight+0x1>
 3e2:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <motorCountForRight>
        motorCountForLeft++;
 3e6:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <motorCountForLeft>
 3ea:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <motorCountForLeft+0x1>
 3ee:	01 96       	adiw	r24, 0x01	; 1
 3f0:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <motorCountForLeft+0x1>
 3f4:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <motorCountForLeft>
        
        switch(sensor){
 3f8:	cb 30       	cpi	r28, 0x0B	; 11
 3fa:	71 f0       	breq	.+28     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 3fc:	38 f4       	brcc	.+14     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3fe:	cc 23       	and	r28, r28
 400:	09 f4       	brne	.+2      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 402:	52 c0       	rjmp	.+164    	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
 404:	c7 30       	cpi	r28, 0x07	; 7
 406:	09 f4       	brne	.+2      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 408:	41 c0       	rjmp	.+130    	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 40a:	e1 c0       	rjmp	.+450    	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
 40c:	cd 30       	cpi	r28, 0x0D	; 13
 40e:	09 f1       	breq	.+66     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 410:	ce 30       	cpi	r28, 0x0E	; 14
 412:	09 f4       	brne	.+2      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 414:	42 c0       	rjmp	.+132    	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 416:	db c0       	rjmp	.+438    	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
            case 0x0f:  //1111 - 걸리는거없음
                
                break;
            case 0x0b:  //1011 --하나걸림 좌회전
                motorRightClockCompare++;//right 모터 느리게
 418:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <motorRightClockCompare>
 41c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <motorRightClockCompare+0x1>
 420:	01 96       	adiw	r24, 0x01	; 1
                if(motorRightClockCompare > 14) motorRightClockCompare = 14;
 422:	8f 30       	cpi	r24, 0x0F	; 15
 424:	91 05       	cpc	r25, r1
 426:	28 f4       	brcc	.+10     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
        switch(sensor){
            case 0x0f:  //1111 - 걸리는거없음
                
                break;
            case 0x0b:  //1011 --하나걸림 좌회전
                motorRightClockCompare++;//right 모터 느리게
 428:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <motorRightClockCompare+0x1>
 42c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <motorRightClockCompare>
 430:	06 c0       	rjmp	.+12     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
                if(motorRightClockCompare > 14) motorRightClockCompare = 14;
 432:	8e e0       	ldi	r24, 0x0E	; 14
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <motorRightClockCompare+0x1>
 43a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <motorRightClockCompare>
                motorLeftClockCompare--;//left모터 빠르게
 43e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 442:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 446:	01 97       	sbiw	r24, 0x01	; 1
 448:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 44c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
                break;
 450:	be c0       	rjmp	.+380    	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
            case 0x0d:  //1101 --하나걸림 - 오른쪽 턴
                motorRightClockCompare--;//right 모터 빠르게
 452:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <motorRightClockCompare>
 456:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <motorRightClockCompare+0x1>
 45a:	01 97       	sbiw	r24, 0x01	; 1
 45c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <motorRightClockCompare+0x1>
 460:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <motorRightClockCompare>
                motorLeftClockCompare++;//left모터 느리게
 464:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 468:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 46c:	01 96       	adiw	r24, 0x01	; 1
                if(motorLeftClockCompare > 14) motorLeftClockCompare = 14;
 46e:	8f 30       	cpi	r24, 0x0F	; 15
 470:	91 05       	cpc	r25, r1
 472:	28 f4       	brcc	.+10     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
                if(motorRightClockCompare > 14) motorRightClockCompare = 14;
                motorLeftClockCompare--;//left모터 빠르게
                break;
            case 0x0d:  //1101 --하나걸림 - 오른쪽 턴
                motorRightClockCompare--;//right 모터 빠르게
                motorLeftClockCompare++;//left모터 느리게
 474:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 478:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 47c:	a8 c0       	rjmp	.+336    	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
                if(motorLeftClockCompare > 14) motorLeftClockCompare = 14;
 47e:	8e e0       	ldi	r24, 0x0E	; 14
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 486:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 48a:	a1 c0       	rjmp	.+322    	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
                break;	
            case 0x07:  //0111
                motorForceLeft=1;
 48c:	81 e0       	ldi	r24, 0x01	; 1
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <motorForceLeft+0x1>
 494:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <motorForceLeft>
                break;
 498:	9a c0       	rjmp	.+308    	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
            case 0x0e:  //1110
                motorForceRight=1;
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <motorForceRight+0x1>
 4a2:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <motorForceRight>
                break;
 4a6:	93 c0       	rjmp	.+294    	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
            case 0x00:  //0000 -- 네개 다 찍힘
                if(motorForceRight){
 4a8:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <motorForceRight>
 4ac:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <motorForceRight+0x1>
 4b0:	89 2b       	or	r24, r25
 4b2:	09 f4       	brne	.+2      	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
 4b4:	37 c0       	rjmp	.+110    	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
                    motorForceRight=0;
 4b6:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <motorForceRight+0x1>
 4ba:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <motorForceRight>
                    stepRight = RIGHTmotorOneClock(stepRight, 1);
 4be:	08 e2       	ldi	r16, 0x28	; 40
 4c0:	11 e0       	ldi	r17, 0x01	; 1
 4c2:	61 e0       	ldi	r22, 0x01	; 1
 4c4:	f8 01       	movw	r30, r16
 4c6:	80 81       	ld	r24, Z
 4c8:	74 de       	rcall	.-792    	; 0x1b2 <RIGHTmotorOneClock>
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <stepRight+0x1>
 4d0:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <stepRight>
                    delay(5);
 4d4:	85 e0       	ldi	r24, 0x05	; 5
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	1e df       	rcall	.-452    	; 0x316 <delay>
                    stepRight = RIGHTmotorOneClock(stepRight, 1);
 4da:	61 e0       	ldi	r22, 0x01	; 1
 4dc:	f8 01       	movw	r30, r16
 4de:	80 81       	ld	r24, Z
 4e0:	68 de       	rcall	.-816    	; 0x1b2 <RIGHTmotorOneClock>
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <stepRight+0x1>
 4e8:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <stepRight>
                    delay(5);
 4ec:	85 e0       	ldi	r24, 0x05	; 5
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	12 df       	rcall	.-476    	; 0x316 <delay>
                    stepRight = RIGHTmotorOneClock(stepRight, 1);
 4f2:	61 e0       	ldi	r22, 0x01	; 1
 4f4:	f8 01       	movw	r30, r16
 4f6:	80 81       	ld	r24, Z
 4f8:	5c de       	rcall	.-840    	; 0x1b2 <RIGHTmotorOneClock>
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <stepRight+0x1>
 500:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <stepRight>
                    delay(5);
 504:	85 e0       	ldi	r24, 0x05	; 5
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	06 df       	rcall	.-500    	; 0x316 <delay>
                    stepRight = RIGHTmotorOneClock(stepRight, 1);
 50a:	61 e0       	ldi	r22, 0x01	; 1
 50c:	f8 01       	movw	r30, r16
 50e:	80 81       	ld	r24, Z
 510:	50 de       	rcall	.-864    	; 0x1b2 <RIGHTmotorOneClock>
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <stepRight+0x1>
 518:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <stepRight>
                    delay(5);
 51c:	85 e0       	ldi	r24, 0x05	; 5
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	fa de       	rcall	.-524    	; 0x316 <delay>
 522:	55 c0       	rjmp	.+170    	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
 524:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <motorForceLeft>
                }else if(motorForceLeft){
 528:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <motorForceLeft+0x1>
 52c:	89 2b       	or	r24, r25
 52e:	09 f4       	brne	.+2      	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
 530:	37 c0       	rjmp	.+110    	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
 532:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <motorForceLeft+0x1>
                    motorForceLeft=0;
 536:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <motorForceLeft>
                    stepLeft = RIGHTmotorOneClock(stepLeft, 1);
 53a:	06 e2       	ldi	r16, 0x26	; 38
 53c:	11 e0       	ldi	r17, 0x01	; 1
 53e:	61 e0       	ldi	r22, 0x01	; 1
 540:	f8 01       	movw	r30, r16
 542:	80 81       	ld	r24, Z
 544:	36 de       	rcall	.-916    	; 0x1b2 <RIGHTmotorOneClock>
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <stepLeft+0x1>
 54c:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <stepLeft>
                    delay(5);
 550:	85 e0       	ldi	r24, 0x05	; 5
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	e0 de       	rcall	.-576    	; 0x316 <delay>
                    stepLeft = RIGHTmotorOneClock(stepLeft, 1);
 556:	61 e0       	ldi	r22, 0x01	; 1
 558:	f8 01       	movw	r30, r16
 55a:	80 81       	ld	r24, Z
 55c:	2a de       	rcall	.-940    	; 0x1b2 <RIGHTmotorOneClock>
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <stepLeft+0x1>
 564:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <stepLeft>
                    delay(5);
 568:	85 e0       	ldi	r24, 0x05	; 5
 56a:	90 e0       	ldi	r25, 0x00	; 0
                    stepLeft = RIGHTmotorOneClock(stepLeft, 1);
 56c:	d4 de       	rcall	.-600    	; 0x316 <delay>
 56e:	61 e0       	ldi	r22, 0x01	; 1
 570:	f8 01       	movw	r30, r16
 572:	80 81       	ld	r24, Z
 574:	1e de       	rcall	.-964    	; 0x1b2 <RIGHTmotorOneClock>
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <stepLeft+0x1>
 57c:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <stepLeft>
                    delay(5);
 580:	85 e0       	ldi	r24, 0x05	; 5
 582:	90 e0       	ldi	r25, 0x00	; 0
                    stepLeft = RIGHTmotorOneClock(stepLeft, 1);
 584:	c8 de       	rcall	.-624    	; 0x316 <delay>
 586:	61 e0       	ldi	r22, 0x01	; 1
 588:	f8 01       	movw	r30, r16
 58a:	80 81       	ld	r24, Z
 58c:	12 de       	rcall	.-988    	; 0x1b2 <RIGHTmotorOneClock>
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <stepLeft+0x1>
 594:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <stepLeft>
                    delay(5);
 598:	85 e0       	ldi	r24, 0x05	; 5
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	bc de       	rcall	.-648    	; 0x316 <delay>
 59e:	17 c0       	rjmp	.+46     	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
 5a0:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
                }else if(countStopSign==3){
 5a4:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <__data_end+0x1>
 5a8:	83 30       	cpi	r24, 0x03	; 3
 5aa:	91 05       	cpc	r25, r1
 5ac:	29 f4       	brne	.+10     	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
 5ae:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <state+0x1>
                    state = STATE_INIT;
 5b2:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <state>
 5b6:	0b c0       	rjmp	.+22     	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
 5b8:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <preSensor>
                }else{
                    if(sensor != preSensor)
 5bc:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <preSensor+0x1>
 5c0:	23 2b       	or	r18, r19
 5c2:	29 f0       	breq	.+10     	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
 5c4:	01 96       	adiw	r24, 0x01	; 1
                        countStopSign++;
 5c6:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <__data_end+0x1>
 5ca:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end>
                
                break;
        }

        //모터 클럭 실행하기
        if ((motorCountForRight > motorRightClockCompare)){
 5ce:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <motorCountForRight>
 5d2:	30 91 25 01 	lds	r19, 0x0125	; 0x800125 <motorCountForRight+0x1>
 5d6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <motorRightClockCompare>
 5da:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <motorRightClockCompare+0x1>
 5de:	82 17       	cp	r24, r18
 5e0:	93 07       	cpc	r25, r19
 5e2:	68 f4       	brcc	.+26     	; 0x5fe <__LOCK_REGION_LENGTH__+0x1fe>
            stepRight = RIGHTmotorOneClock(stepRight, 1);
 5e4:	61 e0       	ldi	r22, 0x01	; 1
 5e6:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <stepRight>
 5ea:	e3 dd       	rcall	.-1082   	; 0x1b2 <RIGHTmotorOneClock>
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <stepRight+0x1>
 5f2:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <stepRight>
 5f6:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <motorCountForRight+0x1>
            motorCountForRight = 0;
 5fa:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <motorCountForRight>
        }
        if ((motorCountForLeft > motorLeftClockCompare)){
 5fe:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <motorCountForLeft>
 602:	30 91 23 01 	lds	r19, 0x0123	; 0x800123 <motorCountForLeft+0x1>
 606:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 60a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 60e:	82 17       	cp	r24, r18
 610:	93 07       	cpc	r25, r19
 612:	68 f4       	brcc	.+26     	; 0x62e <__LOCK_REGION_LENGTH__+0x22e>
            stepLeft = LEFTmotorOneClock(stepLeft, 0);
 614:	60 e0       	ldi	r22, 0x00	; 0
 616:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <stepLeft>
 61a:	92 dd       	rcall	.-1244   	; 0x140 <LEFTmotorOneClock>
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <stepLeft+0x1>
 622:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <stepLeft>
 626:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <motorCountForLeft+0x1>
            motorCountForLeft = 0;
 62a:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <motorCountForLeft>
 62e:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <stepLeft>
        }
        MOTOR_PORT = stepLeft|stepRight;
 632:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <stepRight>
 636:	89 2b       	or	r24, r25
 638:	82 bb       	out	0x12, r24	; 18
 63a:	8c 2f       	mov	r24, r28
        preSensor = sensor;
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <preSensor+0x1>
 642:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <preSensor>
 646:	ff 91       	pop	r31
    }
    
}
 648:	ef 91       	pop	r30
 64a:	cf 91       	pop	r28
 64c:	bf 91       	pop	r27
 64e:	af 91       	pop	r26
 650:	9f 91       	pop	r25
 652:	8f 91       	pop	r24
 654:	7f 91       	pop	r23
 656:	6f 91       	pop	r22
 658:	5f 91       	pop	r21
 65a:	4f 91       	pop	r20
 65c:	3f 91       	pop	r19
 65e:	2f 91       	pop	r18
 660:	1f 91       	pop	r17
 662:	0f 91       	pop	r16
 664:	0f 90       	pop	r0
 666:	0b be       	out	0x3b, r0	; 59
 668:	0f 90       	pop	r0
 66a:	0f be       	out	0x3f, r0	; 63
 66c:	0f 90       	pop	r0
 66e:	1f 90       	pop	r1
 670:	18 95       	reti

00000672 <main>:
 672:	57 dd       	rcall	.-1362   	; 0x122 <initDevices>



    //initialize port and interrupt
    initDevices();
	initSegment();
 674:	fe dd       	rcall	.-1028   	; 0x272 <initSegment>
    initInterrupt();
 676:	06 de       	rcall	.-1012   	; 0x284 <initInterrupt>
 678:	83 de       	rcall	.-762    	; 0x380 <initTimerInterrupt>
    initTimerInterrupt();
 67a:	78 94       	sei
 67c:	81 b7       	in	r24, 0x31	; 49
	
    //Global Interrupt Enable
    sei();
 67e:	90 e0       	ldi	r25, 0x00	; 0

    //main function
    //print 7segment by global variable timeNum
    //timeNum variable is increase by time interrupt
    while (1){
        timeNum = (int)OCR0;
 680:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <timeNum+0x1>
 684:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <timeNum>
 688:	04 e0       	ldi	r16, 0x04	; 4
 68a:	11 e0       	ldi	r17, 0x01	; 1
 68c:	c3 e0       	ldi	r28, 0x03	; 3
 68e:	d0 e0       	ldi	r29, 0x00	; 0
 690:	f8 01       	movw	r30, r16
 692:	61 91       	ld	r22, Z+
        //segment print
        for(int i = 0; i < 4; i++){
            printSeg((timeNum/exp10[i])%10,3-i);
 694:	71 91       	ld	r23, Z+
 696:	8f 01       	movw	r16, r30
 698:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <timeNum>
 69c:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <timeNum+0x1>
 6a0:	1f d0       	rcall	.+62     	; 0x6e0 <__udivmodhi4>
 6a2:	ab 01       	movw	r20, r22
 6a4:	9b 01       	movw	r18, r22
 6a6:	ad ec       	ldi	r26, 0xCD	; 205
 6a8:	bc ec       	ldi	r27, 0xCC	; 204
 6aa:	37 d0       	rcall	.+110    	; 0x71a <__umulhisi3>
 6ac:	96 95       	lsr	r25
 6ae:	87 95       	ror	r24
 6b0:	96 95       	lsr	r25
 6b2:	87 95       	ror	r24
 6b4:	96 95       	lsr	r25
 6b6:	87 95       	ror	r24
 6b8:	9c 01       	movw	r18, r24
 6ba:	22 0f       	add	r18, r18
 6bc:	33 1f       	adc	r19, r19
 6be:	88 0f       	add	r24, r24
 6c0:	99 1f       	adc	r25, r25
 6c2:	88 0f       	add	r24, r24
 6c4:	99 1f       	adc	r25, r25
 6c6:	88 0f       	add	r24, r24
 6c8:	99 1f       	adc	r25, r25
 6ca:	82 0f       	add	r24, r18
 6cc:	93 1f       	adc	r25, r19
 6ce:	be 01       	movw	r22, r28
 6d0:	9a 01       	movw	r18, r20
 6d2:	28 1b       	sub	r18, r24
 6d4:	39 0b       	sbc	r19, r25
 6d6:	c9 01       	movw	r24, r18
 6d8:	bd dd       	rcall	.-1158   	; 0x254 <printSeg>
 6da:	21 97       	sbiw	r28, 0x01	; 1
 6dc:	c8 f6       	brcc	.-78     	; 0x690 <main+0x1e>
 6de:	ce cf       	rjmp	.-100    	; 0x67c <main+0xa>

000006e0 <__udivmodhi4>:
 6e0:	aa 1b       	sub	r26, r26
 6e2:	bb 1b       	sub	r27, r27
 6e4:	51 e1       	ldi	r21, 0x11	; 17
 6e6:	07 c0       	rjmp	.+14     	; 0x6f6 <__udivmodhi4_ep>

000006e8 <__udivmodhi4_loop>:
 6e8:	aa 1f       	adc	r26, r26
 6ea:	bb 1f       	adc	r27, r27
 6ec:	a6 17       	cp	r26, r22
 6ee:	b7 07       	cpc	r27, r23
 6f0:	10 f0       	brcs	.+4      	; 0x6f6 <__udivmodhi4_ep>
 6f2:	a6 1b       	sub	r26, r22
 6f4:	b7 0b       	sbc	r27, r23

000006f6 <__udivmodhi4_ep>:
 6f6:	88 1f       	adc	r24, r24
 6f8:	99 1f       	adc	r25, r25
 6fa:	5a 95       	dec	r21
 6fc:	a9 f7       	brne	.-22     	; 0x6e8 <__udivmodhi4_loop>
 6fe:	80 95       	com	r24
 700:	90 95       	com	r25
 702:	bc 01       	movw	r22, r24
 704:	cd 01       	movw	r24, r26
 706:	08 95       	ret

00000708 <__tablejump2__>:
 708:	ee 0f       	add	r30, r30
 70a:	ff 1f       	adc	r31, r31
 70c:	00 24       	eor	r0, r0
 70e:	00 1c       	adc	r0, r0
 710:	0b be       	out	0x3b, r0	; 59
 712:	07 90       	elpm	r0, Z+
 714:	f6 91       	elpm	r31, Z
 716:	e0 2d       	mov	r30, r0
 718:	09 94       	ijmp

0000071a <__umulhisi3>:
 71a:	a2 9f       	mul	r26, r18
 71c:	b0 01       	movw	r22, r0
 71e:	b3 9f       	mul	r27, r19
 720:	c0 01       	movw	r24, r0
 722:	a3 9f       	mul	r26, r19
 724:	70 0d       	add	r23, r0
 726:	81 1d       	adc	r24, r1
 728:	11 24       	eor	r1, r1
 72a:	91 1d       	adc	r25, r1
 72c:	b2 9f       	mul	r27, r18
 72e:	70 0d       	add	r23, r0
 730:	81 1d       	adc	r24, r1
 732:	11 24       	eor	r1, r1
 734:	91 1d       	adc	r25, r1
 736:	08 95       	ret

00000738 <_exit>:
 738:	f8 94       	cli

0000073a <__stop_program>:
 73a:	ff cf       	rjmp	.-2      	; 0x73a <__stop_program>
