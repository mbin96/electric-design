
LineTracer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000696  0000072a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000696  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800118  00800118  00000742  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000742  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000774  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000007b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d68  00000000  00000000  0000083c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008b5  00000000  00000000  000015a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000794  00000000  00000000  00001e59  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000016c  00000000  00000000  000025f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000058c  00000000  00000000  0000275c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005a1  00000000  00000000  00002ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00003289  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	6d c0       	rjmp	.+218    	; 0xdc <__ctors_end>
   2:	00 00       	nop
   4:	88 c0       	rjmp	.+272    	; 0x116 <__bad_interrupt>
   6:	00 00       	nop
   8:	86 c0       	rjmp	.+268    	; 0x116 <__bad_interrupt>
   a:	00 00       	nop
   c:	84 c0       	rjmp	.+264    	; 0x116 <__bad_interrupt>
   e:	00 00       	nop
  10:	82 c0       	rjmp	.+260    	; 0x116 <__bad_interrupt>
  12:	00 00       	nop
  14:	98 c1       	rjmp	.+816    	; 0x346 <__vector_5>
  16:	00 00       	nop
  18:	82 c1       	rjmp	.+772    	; 0x31e <__vector_6>
  1a:	00 00       	nop
  1c:	7c c0       	rjmp	.+248    	; 0x116 <__bad_interrupt>
  1e:	00 00       	nop
  20:	7a c0       	rjmp	.+244    	; 0x116 <__bad_interrupt>
  22:	00 00       	nop
  24:	78 c0       	rjmp	.+240    	; 0x116 <__bad_interrupt>
  26:	00 00       	nop
  28:	76 c0       	rjmp	.+236    	; 0x116 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	74 c0       	rjmp	.+232    	; 0x116 <__bad_interrupt>
  2e:	00 00       	nop
  30:	72 c0       	rjmp	.+228    	; 0x116 <__bad_interrupt>
  32:	00 00       	nop
  34:	70 c0       	rjmp	.+224    	; 0x116 <__bad_interrupt>
  36:	00 00       	nop
  38:	6e c0       	rjmp	.+220    	; 0x116 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	26 c2       	rjmp	.+1100   	; 0x48a <__vector_15>
  3e:	00 00       	nop
  40:	6a c0       	rjmp	.+212    	; 0x116 <__bad_interrupt>
  42:	00 00       	nop
  44:	68 c0       	rjmp	.+208    	; 0x116 <__bad_interrupt>
  46:	00 00       	nop
  48:	66 c0       	rjmp	.+204    	; 0x116 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	64 c0       	rjmp	.+200    	; 0x116 <__bad_interrupt>
  4e:	00 00       	nop
  50:	62 c0       	rjmp	.+196    	; 0x116 <__bad_interrupt>
  52:	00 00       	nop
  54:	60 c0       	rjmp	.+192    	; 0x116 <__bad_interrupt>
  56:	00 00       	nop
  58:	5e c0       	rjmp	.+188    	; 0x116 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5c c0       	rjmp	.+184    	; 0x116 <__bad_interrupt>
  5e:	00 00       	nop
  60:	5a c0       	rjmp	.+180    	; 0x116 <__bad_interrupt>
  62:	00 00       	nop
  64:	58 c0       	rjmp	.+176    	; 0x116 <__bad_interrupt>
  66:	00 00       	nop
  68:	56 c0       	rjmp	.+172    	; 0x116 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	54 c0       	rjmp	.+168    	; 0x116 <__bad_interrupt>
  6e:	00 00       	nop
  70:	52 c0       	rjmp	.+164    	; 0x116 <__bad_interrupt>
  72:	00 00       	nop
  74:	50 c0       	rjmp	.+160    	; 0x116 <__bad_interrupt>
  76:	00 00       	nop
  78:	4e c0       	rjmp	.+156    	; 0x116 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4c c0       	rjmp	.+152    	; 0x116 <__bad_interrupt>
  7e:	00 00       	nop
  80:	4a c0       	rjmp	.+148    	; 0x116 <__bad_interrupt>
  82:	00 00       	nop
  84:	48 c0       	rjmp	.+144    	; 0x116 <__bad_interrupt>
  86:	00 00       	nop
  88:	46 c0       	rjmp	.+140    	; 0x116 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	bc 00       	.word	0x00bc	; ????
  8e:	c0 00       	.word	0x00c0	; ????
  90:	be 00       	.word	0x00be	; ????
  92:	c4 00       	.word	0x00c4	; ????
  94:	ca 00       	.word	0x00ca	; ????
  96:	c2 00       	.word	0x00c2	; ????
  98:	ca 00       	.word	0x00ca	; ????
  9a:	c8 00       	.word	0x00c8	; ????
  9c:	e5 00       	.word	0x00e5	; ????
  9e:	ca 00       	.word	0x00ca	; ????
  a0:	ca 00       	.word	0x00ca	; ????
  a2:	c6 00       	.word	0x00c6	; ????
  a4:	d5 00       	.word	0x00d5	; ????
  a6:	d9 00       	.word	0x00d9	; ????
  a8:	d7 00       	.word	0x00d7	; ????
  aa:	dd 00       	.word	0x00dd	; ????
  ac:	e3 00       	.word	0x00e3	; ????
  ae:	db 00       	.word	0x00db	; ????
  b0:	e3 00       	.word	0x00e3	; ????
  b2:	e1 00       	.word	0x00e1	; ????
  b4:	e7 00       	.word	0x00e7	; ????
  b6:	e3 00       	.word	0x00e3	; ????
  b8:	e3 00       	.word	0x00e3	; ????
  ba:	df 00       	.word	0x00df	; ????
  bc:	39 02       	muls	r19, r25
  be:	13 02       	muls	r17, r19
  c0:	42 02       	muls	r20, r18
  c2:	42 02       	muls	r20, r18
  c4:	42 02       	muls	r20, r18
  c6:	42 02       	muls	r20, r18
  c8:	0d 02       	muls	r16, r29
  ca:	01 02       	muls	r16, r17
  cc:	26 02       	muls	r18, r22
  ce:	42 02       	muls	r20, r18
  d0:	42 02       	muls	r20, r18
  d2:	fb 01       	movw	r30, r22
  d4:	42 02       	muls	r20, r18
  d6:	fe 01       	movw	r30, r28
  d8:	07 02       	muls	r16, r23
  da:	cd 01       	movw	r24, r26

000000dc <__ctors_end>:
  dc:	11 24       	eor	r1, r1
  de:	1f be       	out	0x3f, r1	; 63
  e0:	cf ef       	ldi	r28, 0xFF	; 255
  e2:	d0 e1       	ldi	r29, 0x10	; 16
  e4:	de bf       	out	0x3e, r29	; 62
  e6:	cd bf       	out	0x3d, r28	; 61

000000e8 <__do_copy_data>:
  e8:	11 e0       	ldi	r17, 0x01	; 1
  ea:	a0 e0       	ldi	r26, 0x00	; 0
  ec:	b1 e0       	ldi	r27, 0x01	; 1
  ee:	e6 e9       	ldi	r30, 0x96	; 150
  f0:	f6 e0       	ldi	r31, 0x06	; 6
  f2:	00 e0       	ldi	r16, 0x00	; 0
  f4:	0b bf       	out	0x3b, r16	; 59
  f6:	02 c0       	rjmp	.+4      	; 0xfc <__do_copy_data+0x14>
  f8:	07 90       	elpm	r0, Z+
  fa:	0d 92       	st	X+, r0
  fc:	a8 31       	cpi	r26, 0x18	; 24
  fe:	b1 07       	cpc	r27, r17
 100:	d9 f7       	brne	.-10     	; 0xf8 <__do_copy_data+0x10>

00000102 <__do_clear_bss>:
 102:	21 e0       	ldi	r18, 0x01	; 1
 104:	a8 e1       	ldi	r26, 0x18	; 24
 106:	b1 e0       	ldi	r27, 0x01	; 1
 108:	01 c0       	rjmp	.+2      	; 0x10c <.do_clear_bss_start>

0000010a <.do_clear_bss_loop>:
 10a:	1d 92       	st	X+, r1

0000010c <.do_clear_bss_start>:
 10c:	a2 32       	cpi	r26, 0x22	; 34
 10e:	b2 07       	cpc	r27, r18
 110:	e1 f7       	brne	.-8      	; 0x10a <.do_clear_bss_loop>
 112:	5a d2       	rcall	.+1204   	; 0x5c8 <main>
 114:	be c2       	rjmp	.+1404   	; 0x692 <_exit>

00000116 <__bad_interrupt>:
 116:	74 cf       	rjmp	.-280    	; 0x0 <__vectors>

00000118 <initPort>:

short forceExcuNum=0;

void initPort(void)
{
	PORTA = 0x00;
 118:	1b ba       	out	0x1b, r1	; 27
	DDRA  = 0x00;
 11a:	1a ba       	out	0x1a, r1	; 26
	PORTB = 0x00;
 11c:	18 ba       	out	0x18, r1	; 24
	DDRB  = 0x00;
 11e:	17 ba       	out	0x17, r1	; 23
	PORTC = 0x00;
 120:	15 ba       	out	0x15, r1	; 21
	DDRC  = 0x00;
 122:	14 ba       	out	0x14, r1	; 20
	PORTD = 0x00;
 124:	12 ba       	out	0x12, r1	; 18
	DDRD  = 0xFF;
 126:	8f ef       	ldi	r24, 0xFF	; 255
 128:	81 bb       	out	0x11, r24	; 17
	PORTE = 0x00;
 12a:	13 b8       	out	0x03, r1	; 3
	DDRE  = 0x00;
 12c:	12 b8       	out	0x02, r1	; 2
	PORTF = 0x00;
 12e:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	DDRF  = 0x00;
 132:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	PORTG = 0x00;
 136:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
	DDRG  = 0x03;
 13a:	83 e0       	ldi	r24, 0x03	; 3
 13c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
 140:	08 95       	ret

00000142 <initDevices>:
}

void initDevices(void)
{
	cli(); //disable all interrupts
 142:	f8 94       	cli
	XDIV  = 0x00; //xtal divider
 144:	1c be       	out	0x3c, r1	; 60
	XMCRA = 0x00; //external memory
 146:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
	initPort();
 14a:	e6 df       	rcall	.-52     	; 0x118 <initPort>
    

	MCUCR = 0x00;
 14c:	15 be       	out	0x35, r1	; 53
	EICRA = 0x00; //extended ext ints
 14e:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	EICRB = 0x00; //extended ext ints
 152:	1a be       	out	0x3a, r1	; 58
	EIMSK = 0x00;
 154:	19 be       	out	0x39, r1	; 57
	TIMSK = 0x00; //timer interrupt sources
 156:	17 be       	out	0x37, r1	; 55
	ETIMSK = 0x00; //extended timer interrupt sources
 158:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <__TEXT_REGION_LENGTH__+0x7e007d>
	sei(); //re-enable interrupts
 15c:	78 94       	sei
 15e:	08 95       	ret

00000160 <LEFTmotorOneClock>:

// Stepping Motor drive---------------------------
//1-2상 구동
unsigned char  LEFTmotorOneClock(unsigned char step, char dir)
{	
	step = step & 0x0f;
 160:	8f 70       	andi	r24, 0x0F	; 15
	if(dir){
 162:	66 23       	and	r22, r22
 164:	c9 f0       	breq	.+50     	; 0x198 <LEFTmotorOneClock+0x38>
		switch(step){
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	fc 01       	movw	r30, r24
 16a:	31 97       	sbiw	r30, 0x01	; 1
 16c:	ec 30       	cpi	r30, 0x0C	; 12
 16e:	f1 05       	cpc	r31, r1
 170:	88 f4       	brcc	.+34     	; 0x194 <LEFTmotorOneClock+0x34>
 172:	ea 5b       	subi	r30, 0xBA	; 186
 174:	ff 4f       	sbci	r31, 0xFF	; 255
 176:	75 c2       	rjmp	.+1258   	; 0x662 <__tablejump2__>
			case 0x09: step=0x01; break;
			case 0x01: step=0x03; break;
 178:	83 e0       	ldi	r24, 0x03	; 3
 17a:	08 95       	ret
			case 0x03: step=0x02; break;
 17c:	82 e0       	ldi	r24, 0x02	; 2
 17e:	08 95       	ret
			case 0x02: step=0x06; break;
 180:	86 e0       	ldi	r24, 0x06	; 6
 182:	08 95       	ret
			case 0x06: step=0x04; break;
 184:	84 e0       	ldi	r24, 0x04	; 4
 186:	08 95       	ret
			case 0x04: step=0x0c; break;
 188:	8c e0       	ldi	r24, 0x0C	; 12
 18a:	08 95       	ret
			case 0x0c: step=0x08; break;
 18c:	88 e0       	ldi	r24, 0x08	; 8
 18e:	08 95       	ret
			case 0x08: step=0x09; break;
 190:	89 e0       	ldi	r24, 0x09	; 9
 192:	08 95       	ret
			default: step=0x0c; break;
 194:	8c e0       	ldi	r24, 0x0C	; 12
 196:	08 95       	ret
		}
	}else{
		switch(step){
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	fc 01       	movw	r30, r24
 19c:	31 97       	sbiw	r30, 0x01	; 1
 19e:	ec 30       	cpi	r30, 0x0C	; 12
 1a0:	f1 05       	cpc	r31, r1
 1a2:	88 f4       	brcc	.+34     	; 0x1c6 <LEFTmotorOneClock+0x66>
 1a4:	ee 5a       	subi	r30, 0xAE	; 174
 1a6:	ff 4f       	sbci	r31, 0xFF	; 255
 1a8:	5c c2       	rjmp	.+1208   	; 0x662 <__tablejump2__>
			case 0x09: step=0x08; break;
			case 0x01: step=0x09; break;
 1aa:	89 e0       	ldi	r24, 0x09	; 9
 1ac:	08 95       	ret
			case 0x03: step=0x01; break;
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	08 95       	ret
			case 0x02: step=0x03; break;
 1b2:	83 e0       	ldi	r24, 0x03	; 3
 1b4:	08 95       	ret
			case 0x06: step=0x02; break;
 1b6:	82 e0       	ldi	r24, 0x02	; 2
 1b8:	08 95       	ret
			case 0x04: step=0x06; break;
 1ba:	86 e0       	ldi	r24, 0x06	; 6
 1bc:	08 95       	ret
			case 0x0c: step=0x04; break;
 1be:	84 e0       	ldi	r24, 0x04	; 4
 1c0:	08 95       	ret
			case 0x08: step=0x0c; break;
 1c2:	8c e0       	ldi	r24, 0x0C	; 12
 1c4:	08 95       	ret
			default: step=0x0c; break;
 1c6:	8c e0       	ldi	r24, 0x0C	; 12
 1c8:	08 95       	ret
unsigned char  LEFTmotorOneClock(unsigned char step, char dir)
{	
	step = step & 0x0f;
	if(dir){
		switch(step){
			case 0x09: step=0x01; break;
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	08 95       	ret
			case 0x08: step=0x09; break;
			default: step=0x0c; break;
		}
	}else{
		switch(step){
			case 0x09: step=0x08; break;
 1ce:	88 e0       	ldi	r24, 0x08	; 8
			default: step=0x0c; break;
		}
	}
	return step;

}
 1d0:	08 95       	ret

000001d2 <RIGHTmotorOneClock>:

unsigned char  RIGHTmotorOneClock(unsigned char step, char dir)
{	
	step = step & 0xf0;
 1d2:	80 7f       	andi	r24, 0xF0	; 240
	if(dir){
 1d4:	66 23       	and	r22, r22
 1d6:	29 f1       	breq	.+74     	; 0x222 <RIGHTmotorOneClock+0x50>
		switch(step){//후진
 1d8:	80 34       	cpi	r24, 0x40	; 64
 1da:	d9 f0       	breq	.+54     	; 0x212 <RIGHTmotorOneClock+0x40>
 1dc:	38 f4       	brcc	.+14     	; 0x1ec <RIGHTmotorOneClock+0x1a>
 1de:	80 32       	cpi	r24, 0x20	; 32
 1e0:	a1 f0       	breq	.+40     	; 0x20a <RIGHTmotorOneClock+0x38>
 1e2:	80 33       	cpi	r24, 0x30	; 48
 1e4:	81 f0       	breq	.+32     	; 0x206 <RIGHTmotorOneClock+0x34>
 1e6:	80 31       	cpi	r24, 0x10	; 16
 1e8:	d1 f4       	brne	.+52     	; 0x21e <RIGHTmotorOneClock+0x4c>
 1ea:	0b c0       	rjmp	.+22     	; 0x202 <RIGHTmotorOneClock+0x30>
 1ec:	80 38       	cpi	r24, 0x80	; 128
 1ee:	a9 f0       	breq	.+42     	; 0x21a <RIGHTmotorOneClock+0x48>
 1f0:	18 f4       	brcc	.+6      	; 0x1f8 <RIGHTmotorOneClock+0x26>
 1f2:	80 36       	cpi	r24, 0x60	; 96
 1f4:	61 f0       	breq	.+24     	; 0x20e <RIGHTmotorOneClock+0x3c>
 1f6:	13 c0       	rjmp	.+38     	; 0x21e <RIGHTmotorOneClock+0x4c>
 1f8:	80 39       	cpi	r24, 0x90	; 144
 1fa:	c1 f1       	breq	.+112    	; 0x26c <RIGHTmotorOneClock+0x9a>
 1fc:	80 3c       	cpi	r24, 0xC0	; 192
 1fe:	59 f0       	breq	.+22     	; 0x216 <RIGHTmotorOneClock+0x44>
 200:	0e c0       	rjmp	.+28     	; 0x21e <RIGHTmotorOneClock+0x4c>
			case 0x90: step=0x10; break;
			case 0x10: step=0x30; break;
 202:	80 e3       	ldi	r24, 0x30	; 48
 204:	08 95       	ret
			case 0x30: step=0x20; break;
 206:	80 e2       	ldi	r24, 0x20	; 32
 208:	08 95       	ret
			case 0x20: step=0x60; break;
 20a:	80 e6       	ldi	r24, 0x60	; 96
 20c:	08 95       	ret
			case 0x60: step=0x40; break;
 20e:	80 e4       	ldi	r24, 0x40	; 64
 210:	08 95       	ret
			case 0x40: step=0xc0; break;
 212:	80 ec       	ldi	r24, 0xC0	; 192
 214:	08 95       	ret
			case 0xc0: step=0x80; break;
 216:	80 e8       	ldi	r24, 0x80	; 128
 218:	08 95       	ret
			case 0x80: step=0x90; break;
 21a:	80 e9       	ldi	r24, 0x90	; 144
 21c:	08 95       	ret
			default: step=0xc0; break;
 21e:	80 ec       	ldi	r24, 0xC0	; 192
 220:	08 95       	ret
		}
	}else{
		switch(step){//전진
 222:	80 34       	cpi	r24, 0x40	; 64
 224:	d9 f0       	breq	.+54     	; 0x25c <RIGHTmotorOneClock+0x8a>
 226:	38 f4       	brcc	.+14     	; 0x236 <RIGHTmotorOneClock+0x64>
 228:	80 32       	cpi	r24, 0x20	; 32
 22a:	a1 f0       	breq	.+40     	; 0x254 <RIGHTmotorOneClock+0x82>
 22c:	80 33       	cpi	r24, 0x30	; 48
 22e:	81 f0       	breq	.+32     	; 0x250 <RIGHTmotorOneClock+0x7e>
 230:	80 31       	cpi	r24, 0x10	; 16
 232:	d1 f4       	brne	.+52     	; 0x268 <RIGHTmotorOneClock+0x96>
 234:	0b c0       	rjmp	.+22     	; 0x24c <RIGHTmotorOneClock+0x7a>
 236:	80 38       	cpi	r24, 0x80	; 128
 238:	a9 f0       	breq	.+42     	; 0x264 <RIGHTmotorOneClock+0x92>
 23a:	18 f4       	brcc	.+6      	; 0x242 <RIGHTmotorOneClock+0x70>
 23c:	80 36       	cpi	r24, 0x60	; 96
 23e:	61 f0       	breq	.+24     	; 0x258 <RIGHTmotorOneClock+0x86>
 240:	13 c0       	rjmp	.+38     	; 0x268 <RIGHTmotorOneClock+0x96>
 242:	80 39       	cpi	r24, 0x90	; 144
 244:	a9 f0       	breq	.+42     	; 0x270 <RIGHTmotorOneClock+0x9e>
 246:	80 3c       	cpi	r24, 0xC0	; 192
 248:	59 f0       	breq	.+22     	; 0x260 <RIGHTmotorOneClock+0x8e>
 24a:	0e c0       	rjmp	.+28     	; 0x268 <RIGHTmotorOneClock+0x96>
			case 0x90: step=0x80; break;//1001
			case 0x10: step=0x90; break;//0001
 24c:	80 e9       	ldi	r24, 0x90	; 144
 24e:	08 95       	ret
			case 0x30: step=0x10; break;//0011
 250:	80 e1       	ldi	r24, 0x10	; 16
 252:	08 95       	ret
			case 0x20: step=0x30; break;//0010
 254:	80 e3       	ldi	r24, 0x30	; 48
 256:	08 95       	ret
			case 0x60: step=0x20; break;//0110
 258:	80 e2       	ldi	r24, 0x20	; 32
 25a:	08 95       	ret
			case 0x40: step=0x60; break;//0100
 25c:	80 e6       	ldi	r24, 0x60	; 96
 25e:	08 95       	ret
			case 0xc0: step=0x40; break;//1100
 260:	80 e4       	ldi	r24, 0x40	; 64
 262:	08 95       	ret
			case 0x80: step=0xc0; break;//1000
 264:	80 ec       	ldi	r24, 0xC0	; 192
 266:	08 95       	ret
			default: step=0xc0; break;
 268:	80 ec       	ldi	r24, 0xC0	; 192
 26a:	08 95       	ret
unsigned char  RIGHTmotorOneClock(unsigned char step, char dir)
{	
	step = step & 0xf0;
	if(dir){
		switch(step){//후진
			case 0x90: step=0x10; break;
 26c:	80 e1       	ldi	r24, 0x10	; 16
 26e:	08 95       	ret
			case 0x80: step=0x90; break;
			default: step=0xc0; break;
		}
	}else{
		switch(step){//전진
			case 0x90: step=0x80; break;//1001
 270:	80 e8       	ldi	r24, 0x80	; 128
			case 0x80: step=0xc0; break;//1000
			default: step=0xc0; break;
		}
	}
	return step;
}
 272:	08 95       	ret

00000274 <printSeg>:
void printSeg(int segNum, int segDigit){
    //by schematic, PORTE must being clear before set segment's digit and led.
    //because circuit use same port(A) to set segment's digit and led by latch.

    //set segment digit to print
    PORTA = FND_SEGPOS[segDigit];
 274:	fb 01       	movw	r30, r22
 276:	e6 5f       	subi	r30, 0xF6	; 246
 278:	fe 4f       	sbci	r31, 0xFE	; 254
 27a:	20 81       	ld	r18, Z
 27c:	2b bb       	out	0x1b, r18	; 27
    PORTE |= 0x04; //set 1 segment digit latch
 27e:	1a 9a       	sbi	0x03, 2	; 3
    PORTE &= ~(0x04); //clear LED_CTL(PE2)
 280:	1a 98       	cbi	0x03, 2	; 3

    //print num at segment
    PORTA = FND_SEGNP[segNum]; //print with out decimal point
 282:	82 5f       	subi	r24, 0xF2	; 242
 284:	9e 4f       	sbci	r25, 0xFE	; 254
 286:	fc 01       	movw	r30, r24
 288:	80 81       	ld	r24, Z
 28a:	8b bb       	out	0x1b, r24	; 27
    PORTE |= 0x08; //set 1 segment led latch
 28c:	1b 9a       	sbi	0x03, 3	; 3
    PORTE &= ~(0x08); //clear LED_DATA(PE3)
 28e:	1b 98       	cbi	0x03, 3	; 3
 290:	08 95       	ret

00000292 <initSegment>:
}

void initSegment(){
	//initialize port A and E
	DDRA = 0xFF;    //set portA(7:0) to output
 292:	8f ef       	ldi	r24, 0xFF	; 255
 294:	8a bb       	out	0x1a, r24	; 26
	DDRE |= 0x0C;   //set portE(3:2) to output
 296:	82 b1       	in	r24, 0x02	; 2
 298:	8c 60       	ori	r24, 0x0C	; 12
 29a:	82 b9       	out	0x02, r24	; 2
	PORTE |= 0x04;  //init portE(3)
 29c:	1a 9a       	sbi	0x03, 2	; 3
	PORTA = 0x0F;   //init portA(3:0)
 29e:	8f e0       	ldi	r24, 0x0F	; 15
 2a0:	8b bb       	out	0x1b, r24	; 27
 2a2:	08 95       	ret

000002a4 <initInterrupt>:
}

void initInterrupt(){
        //external interrupt int4 enable
        //int4 pin falling edge활성화
        EICRB &= ~(1 << ISC40);
 2a4:	8a b7       	in	r24, 0x3a	; 58
 2a6:	8e 7f       	andi	r24, 0xFE	; 254
 2a8:	8a bf       	out	0x3a, r24	; 58
        EICRB |= 1 << ISC41; //same to EICRB = 0d00000010
 2aa:	8a b7       	in	r24, 0x3a	; 58
 2ac:	82 60       	ori	r24, 0x02	; 2
 2ae:	8a bf       	out	0x3a, r24	; 58
        //enable external interrupt 4
        EIMSK |= 1 << INT4;
 2b0:	89 b7       	in	r24, 0x39	; 57
 2b2:	80 61       	ori	r24, 0x10	; 16
 2b4:	89 bf       	out	0x39, r24	; 57

        //external interrupt int5 enable
        //int5 pin falling edge활성화
        EICRB &= ~(1 << ISC50); //clear
 2b6:	8a b7       	in	r24, 0x3a	; 58
 2b8:	8b 7f       	andi	r24, 0xFB	; 251
 2ba:	8a bf       	out	0x3a, r24	; 58
        EICRB |= 1 << ISC51;    //set
 2bc:	8a b7       	in	r24, 0x3a	; 58
 2be:	88 60       	ori	r24, 0x08	; 8
 2c0:	8a bf       	out	0x3a, r24	; 58
        //enable external interrupt 5
        EIMSK |= 1 << INT5;
 2c2:	89 b7       	in	r24, 0x39	; 57
 2c4:	80 62       	ori	r24, 0x20	; 32
 2c6:	89 bf       	out	0x39, r24	; 57
 2c8:	08 95       	ret

000002ca <initTimerInterrupt>:
}

void initTimerInterrupt()
{
    TCCR0 = 0x0e; //0d00001110//CTC mode and 256 prescaling
 2ca:	8e e0       	ldi	r24, 0x0E	; 14
 2cc:	83 bf       	out	0x33, r24	; 51
    TCNT0 = 0x00; //clear count value register. TCNT0 increase count from 0, clear on 63
 2ce:	12 be       	out	0x32, r1	; 50
    TIMSK = 0x02; //enable Timer/Counter0 compare match interrupt, disable overflow interrupt
 2d0:	82 e0       	ldi	r24, 0x02	; 2
 2d2:	87 bf       	out	0x37, r24	; 55
    TIFR = 0xff;  //write logic 1 on flag for clear register
 2d4:	8f ef       	ldi	r24, 0xFF	; 255
 2d6:	86 bf       	out	0x36, r24	; 54
    OCR0 = 0x64;  //compare 100
 2d8:	84 e6       	ldi	r24, 0x64	; 100
 2da:	81 bf       	out	0x31, r24	; 49
 2dc:	08 95       	ret

000002de <motor>:
}

void motor(char direction){

	switch(direction){
 2de:	81 30       	cpi	r24, 0x01	; 1
 2e0:	51 f0       	breq	.+20     	; 0x2f6 <motor+0x18>
 2e2:	18 f0       	brcs	.+6      	; 0x2ea <motor+0xc>
 2e4:	82 30       	cpi	r24, 0x02	; 2
 2e6:	71 f0       	breq	.+28     	; 0x304 <motor+0x26>
 2e8:	13 c0       	rjmp	.+38     	; 0x310 <motor+0x32>
		case STRAIGHT : 
			stepRight = RIGHTmotorOneClock(stepRight, 1);
 2ea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2ee:	61 e0       	ldi	r22, 0x01	; 1
 2f0:	70 df       	rcall	.-288    	; 0x1d2 <RIGHTmotorOneClock>
 2f2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		case RIGHT : 
			stepLeft = LEFTmotorOneClock(stepLeft, 0);
 2f6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <stepLeft>
 2fa:	60 e0       	ldi	r22, 0x00	; 0
 2fc:	31 df       	rcall	.-414    	; 0x160 <LEFTmotorOneClock>
 2fe:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <stepLeft>
			break;
 302:	06 c0       	rjmp	.+12     	; 0x310 <motor+0x32>
		case LEFT  : 
			stepRight = RIGHTmotorOneClock(stepRight, 1);
 304:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 308:	61 e0       	ldi	r22, 0x01	; 1
 30a:	63 df       	rcall	.-314    	; 0x1d2 <RIGHTmotorOneClock>
 30c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			break;
	}
	MOTOR_PORT = stepLeft|stepRight;
 310:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <stepLeft>
 314:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 318:	89 2b       	or	r24, r25
 31a:	82 bb       	out	0x12, r24	; 18
 31c:	08 95       	ret

0000031e <__vector_6>:
}

//출발
ISR(INT5_vect){
 31e:	1f 92       	push	r1
 320:	0f 92       	push	r0
 322:	0f b6       	in	r0, 0x3f	; 63
 324:	0f 92       	push	r0
 326:	11 24       	eor	r1, r1
 328:	8f 93       	push	r24
 32a:	9f 93       	push	r25
	state = STATE_RUNNING;
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <state+0x1>
 334:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <state>
}
 338:	9f 91       	pop	r25
 33a:	8f 91       	pop	r24
 33c:	0f 90       	pop	r0
 33e:	0f be       	out	0x3f, r0	; 63
 340:	0f 90       	pop	r0
 342:	1f 90       	pop	r1
 344:	18 95       	reti

00000346 <__vector_5>:

//속도조절
ISR(INT4_vect){
 346:	1f 92       	push	r1
 348:	0f 92       	push	r0
 34a:	0f b6       	in	r0, 0x3f	; 63
 34c:	0f 92       	push	r0
 34e:	11 24       	eor	r1, r1
 350:	8f 93       	push	r24
 352:	9f 93       	push	r25
	//when interrupt 4 excu, increase num
	timeNum = OCR0;
 354:	81 b7       	in	r24, 0x31	; 49
	timeNum -= 5;
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	05 97       	sbiw	r24, 0x05	; 5
	if (timeNum<30){
 35a:	8e 31       	cpi	r24, 0x1E	; 30
 35c:	91 05       	cpc	r25, r1
 35e:	28 f0       	brcs	.+10     	; 0x36a <__vector_5+0x24>

//속도조절
ISR(INT4_vect){
	//when interrupt 4 excu, increase num
	timeNum = OCR0;
	timeNum -= 5;
 360:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timeNum+0x1>
 364:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timeNum>
 368:	06 c0       	rjmp	.+12     	; 0x376 <__vector_5+0x30>
	if (timeNum<30){
		timeNum = 100;
 36a:	84 e6       	ldi	r24, 0x64	; 100
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timeNum+0x1>
 372:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timeNum>
	}
	OCR0 = timeNum;
 376:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <timeNum>
 37a:	81 bf       	out	0x31, r24	; 49
}
 37c:	9f 91       	pop	r25
 37e:	8f 91       	pop	r24
 380:	0f 90       	pop	r0
 382:	0f be       	out	0x3f, r0	; 63
 384:	0f 90       	pop	r0
 386:	1f 90       	pop	r1
 388:	18 95       	reti

0000038a <sensorScan>:
unsigned char forceLeftSign = 0 ;
unsigned char calibLeft = 0;
unsigned char calibRight = 0;

void sensorScan(int sensor){
    switch(sensor){
 38a:	80 31       	cpi	r24, 0x10	; 16
 38c:	91 05       	cpc	r25, r1
 38e:	08 f0       	brcs	.+2      	; 0x392 <sensorScan+0x8>
 390:	79 c0       	rjmp	.+242    	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 392:	fc 01       	movw	r30, r24
 394:	e2 5a       	subi	r30, 0xA2	; 162
 396:	ff 4f       	sbci	r31, 0xFF	; 255
 398:	64 c1       	rjmp	.+712    	; 0x662 <__tablejump2__>
        case 0x0f:{  					//1111 - 걸리는거없음 직진
			//정지신호 있을때
			if(stopSign==1){			// stop sign(0110)이 있은뒤 사라지면 카운트
 39a:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <stopSign>
 39e:	81 30       	cpi	r24, 0x01	; 1
 3a0:	91 f4       	brne	.+36     	; 0x3c6 <sensorScan+0x3c>
                forceRightSign = forceLeftSign = 0; //정지신호가 양쪽 조금씩 다르게 들어간경우 예외처리
 3a2:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <forceLeftSign>
 3a6:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <forceRightSign>
				stopSign=0;
 3aa:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <stopSign>
                countStopSign++;
 3ae:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <countStopSign>
 3b2:	8f 5f       	subi	r24, 0xFF	; 255
 3b4:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <countStopSign>

                if(countStopSign >2){	//stopsign 3번 나오면 종료
 3b8:	83 30       	cpi	r24, 0x03	; 3
 3ba:	d0 f0       	brcs	.+52     	; 0x3f0 <sensorScan+0x66>
                    state = STATE_INIT;
 3bc:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <state+0x1>
 3c0:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <state>
                    return;
 3c4:	08 95       	ret
                }
            }else if(forceRightSign){
 3c6:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <forceRightSign>
 3ca:	88 23       	and	r24, r24
 3cc:	39 f0       	breq	.+14     	; 0x3dc <sensorScan+0x52>
				state=STATE_FORCE_RIGHT;
 3ce:	82 e0       	ldi	r24, 0x02	; 2
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <state+0x1>
 3d6:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <state>
 3da:	0a c0       	rjmp	.+20     	; 0x3f0 <sensorScan+0x66>
			}else if(forceLeftSign){
 3dc:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <forceLeftSign>
 3e0:	88 23       	and	r24, r24
 3e2:	31 f0       	breq	.+12     	; 0x3f0 <sensorScan+0x66>
				state=STATE_FORCE_LEFT;
 3e4:	83 e0       	ldi	r24, 0x03	; 3
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <state+0x1>
 3ec:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <state>
			}
            motor(STRAIGHT);   //직진!
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	75 cf       	rjmp	.-278    	; 0x2de <motor>
			break;
		}
        case 0x0b:{  					//1011 -- 하나걸림 좌회전
            motor(LEFT);
 3f4:	08 95       	ret
 3f6:	82 e0       	ldi	r24, 0x02	; 2
			break;
 3f8:	72 cf       	rjmp	.-284    	; 0x2de <motor>
		}
        case 0x0d:{  					//1101 -- 하나걸림 -우회전
            motor(RIGHT);
 3fa:	08 95       	ret
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	6f cf       	rjmp	.-290    	; 0x2de <motor>
            break;
 400:	08 95       	ret
		}
        case 0x07:{  					//0111 -- 교차로 좌회전 신호
            forceLeftSign = 1;
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <forceLeftSign>
			motor(STRAIGHT);
 408:	80 e0       	ldi	r24, 0x00	; 0
 40a:	69 cf       	rjmp	.-302    	; 0x2de <motor>
            break;
		}
        case 0x0e:{  					//1110 -- 교차로 우회전 신호
            
			forceRightSign = 1;
 40c:	08 95       	ret
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <forceRightSign>
			motor(STRAIGHT);
 414:	80 e0       	ldi	r24, 0x00	; 0
            break;
 416:	63 cf       	rjmp	.-314    	; 0x2de <motor>
		}
		case 0x06:{  					//0110 -- 정지 신호
			
            stopSign=1;					//flag 설정
 418:	08 95       	ret
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <stopSign>
			motor(STRAIGHT);
 420:	80 e0       	ldi	r24, 0x00	; 0
 422:	5d cf       	rjmp	.-326    	; 0x2de <motor>
            break;
 424:	08 95       	ret
		}
		case 0x01:{						//0001 - 교차로로 치우쳐 들어감
			if(calibRight == 1){				//교차로 1000으로 들어와서 0001로 나온경우엔 오른쪽으로칼리브레이션을 해줘야 합니다.
 426:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 42a:	81 30       	cpi	r24, 0x01	; 1
 42c:	49 f4       	brne	.+18     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
				state = STATE_CALIB_RIGHT;
 42e:	84 e0       	ldi	r24, 0x04	; 4
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <state+0x1>
 436:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <state>
				calibRight = 0;//스테이트 바꿨으면 초기화하기
 43a:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <__data_end>
				return;
			}else{
				calibLeft = 1;
 43e:	08 95       	ret
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <calibLeft>
			}
			motor(STRAIGHT);
 446:	80 e0       	ldi	r24, 0x00	; 0
 448:	4a cf       	rjmp	.-364    	; 0x2de <motor>
			break;
 44a:	08 95       	ret
		}
		case 0x08:{						//1000	- 교차로로 치우쳐 들어감
			if(calibLeft == 1){				//교차로 0001으로 들어와서 1000로 나온경우 왼쪽으로칼리브레이션을 해줘야 합니다.
 44c:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <calibLeft>
 450:	81 30       	cpi	r24, 0x01	; 1
 452:	49 f4       	brne	.+18     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
				state = STATE_CALIB_LEFT;
 454:	85 e0       	ldi	r24, 0x05	; 5
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <state+0x1>
 45c:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <state>
				calibLeft = 0;//스테이트 바꿨으면 초기화하기
 460:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <calibLeft>
				return;
			}else{
				calibRight = 1;
 464:	08 95       	ret
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
			}
			motor(STRAIGHT);
 46c:	80 e0       	ldi	r24, 0x00	; 0
			break;
 46e:	37 cf       	rjmp	.-402    	; 0x2de <motor>
		}
		case 0x00:{  					//0000 - 교차로
            forceLeftSign = forceRightSign = stopSign = 0;				//교차로에 많이 치우쳐 들어온경우(0111이 인식된뒤 들어온)교차로 를 나간뒤 STATE_FORCE로 들어가지 않게 초기화 해줘야 합니다.
 470:	08 95       	ret
 472:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <stopSign>
 476:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <forceRightSign>
            motor(STRAIGHT);
 47a:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <forceLeftSign>
 47e:	80 e0       	ldi	r24, 0x00	; 0
            break;
 480:	2e cf       	rjmp	.-420    	; 0x2de <motor>
		}
        default: {   
            motor(STRAIGHT);
 482:	08 95       	ret
 484:	80 e0       	ldi	r24, 0x00	; 0
 486:	2b cf       	rjmp	.-426    	; 0x2de <motor>
 488:	08 95       	ret

0000048a <__vector_15>:
		}
    }
}

ISR(TIMER0_COMP_vect)  //OCR0와 카운터 비교해서 실행됨. 즉 모터의 펄스 간격(속도)가 ocr0에 따라 가변
{
 48a:	1f 92       	push	r1
 48c:	0f 92       	push	r0
 48e:	0f b6       	in	r0, 0x3f	; 63
 490:	0f 92       	push	r0
 492:	11 24       	eor	r1, r1
 494:	0b b6       	in	r0, 0x3b	; 59
 496:	0f 92       	push	r0
 498:	2f 93       	push	r18
 49a:	3f 93       	push	r19
 49c:	4f 93       	push	r20
 49e:	5f 93       	push	r21
 4a0:	6f 93       	push	r22
 4a2:	7f 93       	push	r23
 4a4:	8f 93       	push	r24
 4a6:	9f 93       	push	r25
 4a8:	af 93       	push	r26
 4aa:	bf 93       	push	r27
 4ac:	cf 93       	push	r28
 4ae:	df 93       	push	r29
 4b0:	ef 93       	push	r30
 4b2:	ff 93       	push	r31
	int sensor = SENSOR_PORT & 0x0F; //센서값 읽기
 4b4:	83 b3       	in	r24, 0x13	; 19
 4b6:	8f 70       	andi	r24, 0x0F	; 15
 4b8:	c8 2f       	mov	r28, r24
 4ba:	d0 e0       	ldi	r29, 0x00	; 0

    if(state == STATE_FORCE_RIGHT){									//-강제회전
 4bc:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <state>
 4c0:	30 91 21 01 	lds	r19, 0x0121	; 0x800121 <state+0x1>
 4c4:	22 30       	cpi	r18, 0x02	; 2
 4c6:	31 05       	cpc	r19, r1
 4c8:	c9 f4       	brne	.+50     	; 0x4fc <__vector_15+0x72>
		if(!forceRightSign){
 4ca:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <forceRightSign>
 4ce:	91 11       	cpse	r25, r1
 4d0:	0c c0       	rjmp	.+24     	; 0x4ea <__vector_15+0x60>
			motor(RIGHT);											//교차로에 들어간 뒤엔 회전만 합니다
 4d2:	81 e0       	ldi	r24, 0x01	; 1
 4d4:	04 df       	rcall	.-504    	; 0x2de <motor>
			if(sensor == 0x0d){
 4d6:	2d 97       	sbiw	r28, 0x0d	; 13
 4d8:	09 f0       	breq	.+2      	; 0x4dc <__vector_15+0x52>
 4da:	61 c0       	rjmp	.+194    	; 0x59e <__vector_15+0x114>
				state = STATE_RUNNING;								//강제 회전하다 라인이 잡히면 트랙 타기
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <state+0x1>
 4e4:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <state>
 4e8:	5a c0       	rjmp	.+180    	; 0x59e <__vector_15+0x114>
			}
		}else{
			if(sensor == 0x00 || sensor == 0x01 || sensor == 0x08){	
 4ea:	82 30       	cpi	r24, 0x02	; 2
 4ec:	10 f0       	brcs	.+4      	; 0x4f2 <__vector_15+0x68>
 4ee:	28 97       	sbiw	r28, 0x08	; 8
 4f0:	11 f4       	brne	.+4      	; 0x4f6 <__vector_15+0x6c>
				forceRightSign = 0;									//교차로 나타나면 플래그 초기화 하고 강제로 돌림
 4f2:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <forceRightSign>
			}
			motor(STRAIGHT);										//교차로 들어가기 전까지는 무조껀 직진
 4f6:	80 e0       	ldi	r24, 0x00	; 0
 4f8:	f2 de       	rcall	.-540    	; 0x2de <motor>
 4fa:	51 c0       	rjmp	.+162    	; 0x59e <__vector_15+0x114>
		}
	}else if(state == STATE_FORCE_LEFT){							//-강제회전
 4fc:	23 30       	cpi	r18, 0x03	; 3
 4fe:	31 05       	cpc	r19, r1
 500:	c9 f4       	brne	.+50     	; 0x534 <__vector_15+0xaa>
		if(!forceLeftSign){
 502:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <forceLeftSign>
 506:	91 11       	cpse	r25, r1
			motor(LEFT);											//교차로에 들어간 뒤엔 회전만 합니다
 508:	0c c0       	rjmp	.+24     	; 0x522 <__vector_15+0x98>
 50a:	82 e0       	ldi	r24, 0x02	; 2
 50c:	e8 de       	rcall	.-560    	; 0x2de <motor>
			if(sensor == 0x0b){										//강제 회전하다 라인 잡히면 트랙 타기
 50e:	2b 97       	sbiw	r28, 0x0b	; 11
 510:	09 f0       	breq	.+2      	; 0x514 <__vector_15+0x8a>
 512:	45 c0       	rjmp	.+138    	; 0x59e <__vector_15+0x114>
				state = STATE_RUNNING;
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <state+0x1>
 51c:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <state>
 520:	3e c0       	rjmp	.+124    	; 0x59e <__vector_15+0x114>
			}
		}else{														
			if(sensor == 0x00 || sensor == 0x01 || sensor == 0x08){
 522:	82 30       	cpi	r24, 0x02	; 2
 524:	10 f0       	brcs	.+4      	; 0x52a <__vector_15+0xa0>
 526:	28 97       	sbiw	r28, 0x08	; 8
 528:	11 f4       	brne	.+4      	; 0x52e <__vector_15+0xa4>
				forceLeftSign = 0;									//교차로 나타나면 플래그 초기화 하고 강제로 돌림
 52a:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <forceLeftSign>
			}
			motor(STRAIGHT);										//교차로 들어가기 전까지는 무조껀 직진
 52e:	80 e0       	ldi	r24, 0x00	; 0
 530:	d6 de       	rcall	.-596    	; 0x2de <motor>
 532:	35 c0       	rjmp	.+106    	; 0x59e <__vector_15+0x114>
			
		}
	}else if(state == STATE_CALIB_RIGHT){							//-교차로를 틀어져서 왼쪽으로 들어갈때 칼리브레이션
 534:	24 30       	cpi	r18, 0x04	; 4
 536:	31 05       	cpc	r19, r1
 538:	a9 f4       	brne	.+42     	; 0x564 <__vector_15+0xda>
		if(sensor == 0x0b||sensor == 0x0d){							//레일 위로 돌아가면 종료
 53a:	cb 30       	cpi	r28, 0x0B	; 11
 53c:	d1 05       	cpc	r29, r1
 53e:	19 f0       	breq	.+6      	; 0x546 <__vector_15+0xbc>
 540:	cd 30       	cpi	r28, 0x0D	; 13
 542:	d1 05       	cpc	r29, r1
 544:	39 f4       	brne	.+14     	; 0x554 <__vector_15+0xca>
			state = STATE_RUNNING;
 546:	81 e0       	ldi	r24, 0x01	; 1
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <state+0x1>
 54e:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <state>
		}else if(sensor == 0x0f){									//하나도 안걸릴때 일딴 오른쪽으로 돌림
 552:	25 c0       	rjmp	.+74     	; 0x59e <__vector_15+0x114>
 554:	2f 97       	sbiw	r28, 0x0f	; 15
			motor(RIGHT);
 556:	19 f4       	brne	.+6      	; 0x55e <__vector_15+0xd4>
 558:	81 e0       	ldi	r24, 0x01	; 1
 55a:	c1 de       	rcall	.-638    	; 0x2de <motor>
		}else{														//교차로를 나오기 전까지는 무조껀 직진
			motor(STRAIGHT);
 55c:	20 c0       	rjmp	.+64     	; 0x59e <__vector_15+0x114>
 55e:	80 e0       	ldi	r24, 0x00	; 0
 560:	be de       	rcall	.-644    	; 0x2de <motor>
 562:	1d c0       	rjmp	.+58     	; 0x59e <__vector_15+0x114>
		}
	}else if(state == STATE_CALIB_LEFT){							//-교차로를 틀어져서 오른쪽으로 들어갈때 칼리브레이션
 564:	25 30       	cpi	r18, 0x05	; 5
 566:	31 05       	cpc	r19, r1
 568:	a9 f4       	brne	.+42     	; 0x594 <__vector_15+0x10a>
		if(sensor == 0x0b||sensor == 0x0d){							//레일 위로 돌아가면 종료
 56a:	cb 30       	cpi	r28, 0x0B	; 11
 56c:	d1 05       	cpc	r29, r1
 56e:	19 f0       	breq	.+6      	; 0x576 <__vector_15+0xec>
 570:	cd 30       	cpi	r28, 0x0D	; 13
 572:	d1 05       	cpc	r29, r1
 574:	39 f4       	brne	.+14     	; 0x584 <__vector_15+0xfa>
			state = STATE_RUNNING;
 576:	81 e0       	ldi	r24, 0x01	; 1
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <state+0x1>
 57e:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <state>
		}else if(sensor == 0x0f){									//하나도 안걸릴때 일딴 오른쪽으로 돌림
 582:	0d c0       	rjmp	.+26     	; 0x59e <__vector_15+0x114>
			motor(LEFT);
 584:	2f 97       	sbiw	r28, 0x0f	; 15
 586:	19 f4       	brne	.+6      	; 0x58e <__vector_15+0x104>
 588:	82 e0       	ldi	r24, 0x02	; 2
 58a:	a9 de       	rcall	.-686    	; 0x2de <motor>
		}else{														//교차로를 나오기 전까지는 무조껀 직진
			motor(STRAIGHT);
 58c:	08 c0       	rjmp	.+16     	; 0x59e <__vector_15+0x114>
 58e:	80 e0       	ldi	r24, 0x00	; 0
 590:	a6 de       	rcall	.-692    	; 0x2de <motor>
		}
	}else if(state == STATE_RUNNING){
 592:	05 c0       	rjmp	.+10     	; 0x59e <__vector_15+0x114>
 594:	21 30       	cpi	r18, 0x01	; 1
 596:	31 05       	cpc	r19, r1
		sensorScan(sensor);					//일반적인 라인 팔로잉 상태
 598:	11 f4       	brne	.+4      	; 0x59e <__vector_15+0x114>
 59a:	ce 01       	movw	r24, r28
 59c:	f6 de       	rcall	.-532    	; 0x38a <sensorScan>
	}
}
 59e:	ff 91       	pop	r31
 5a0:	ef 91       	pop	r30
 5a2:	df 91       	pop	r29
 5a4:	cf 91       	pop	r28
 5a6:	bf 91       	pop	r27
 5a8:	af 91       	pop	r26
 5aa:	9f 91       	pop	r25
 5ac:	8f 91       	pop	r24
 5ae:	7f 91       	pop	r23
 5b0:	6f 91       	pop	r22
 5b2:	5f 91       	pop	r21
 5b4:	4f 91       	pop	r20
 5b6:	3f 91       	pop	r19
 5b8:	2f 91       	pop	r18
 5ba:	0f 90       	pop	r0
 5bc:	0b be       	out	0x3b, r0	; 59
 5be:	0f 90       	pop	r0
 5c0:	0f be       	out	0x3f, r0	; 63
 5c2:	0f 90       	pop	r0
 5c4:	1f 90       	pop	r1
 5c6:	18 95       	reti

000005c8 <main>:
///////////////////interrupt service routine end////////////////////////

int main(void){

    //initialize port and interrupt
    initDevices();
 5c8:	bc dd       	rcall	.-1160   	; 0x142 <initDevices>
	initSegment();
 5ca:	63 de       	rcall	.-826    	; 0x292 <initSegment>
    initInterrupt();
 5cc:	6b de       	rcall	.-810    	; 0x2a4 <initInterrupt>
 5ce:	7d de       	rcall	.-774    	; 0x2ca <initTimerInterrupt>
    initTimerInterrupt();
 5d0:	8f ef       	ldi	r24, 0xFF	; 255
 5d2:	81 bb       	out	0x11, r24	; 17
	
	MOTOR_PORT_DDR = 0xff;
 5d4:	78 94       	sei
 5d6:	81 b7       	in	r24, 0x31	; 49
    //Global Interrupt Enable
    sei();
 5d8:	90 e0       	ldi	r25, 0x00	; 0
    //main function
    //print 7segment by global variable timeNum
    //timeNum variable is increase by time interrupt
    while (1){
        timeNum = (int)OCR0;
 5da:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timeNum+0x1>
 5de:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timeNum>
 5e2:	02 e0       	ldi	r16, 0x02	; 2
 5e4:	11 e0       	ldi	r17, 0x01	; 1
 5e6:	c3 e0       	ldi	r28, 0x03	; 3
 5e8:	d0 e0       	ldi	r29, 0x00	; 0
 5ea:	f8 01       	movw	r30, r16
 5ec:	61 91       	ld	r22, Z+
        //segment print
        for(int i = 0; i < 4; i++){
            printSeg((timeNum/exp10[i])%10,3-i); //OCR0를 세그먼트에 출력합니다.
 5ee:	71 91       	ld	r23, Z+
 5f0:	8f 01       	movw	r16, r30
 5f2:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <timeNum>
 5f6:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <timeNum+0x1>
 5fa:	1f d0       	rcall	.+62     	; 0x63a <__udivmodhi4>
 5fc:	ab 01       	movw	r20, r22
 5fe:	9b 01       	movw	r18, r22
 600:	ad ec       	ldi	r26, 0xCD	; 205
 602:	bc ec       	ldi	r27, 0xCC	; 204
 604:	37 d0       	rcall	.+110    	; 0x674 <__umulhisi3>
 606:	96 95       	lsr	r25
 608:	87 95       	ror	r24
 60a:	96 95       	lsr	r25
 60c:	87 95       	ror	r24
 60e:	96 95       	lsr	r25
 610:	87 95       	ror	r24
 612:	9c 01       	movw	r18, r24
 614:	22 0f       	add	r18, r18
 616:	33 1f       	adc	r19, r19
 618:	88 0f       	add	r24, r24
 61a:	99 1f       	adc	r25, r25
 61c:	88 0f       	add	r24, r24
 61e:	99 1f       	adc	r25, r25
 620:	88 0f       	add	r24, r24
 622:	99 1f       	adc	r25, r25
 624:	82 0f       	add	r24, r18
 626:	93 1f       	adc	r25, r19
 628:	be 01       	movw	r22, r28
 62a:	9a 01       	movw	r18, r20
 62c:	28 1b       	sub	r18, r24
 62e:	39 0b       	sbc	r19, r25
 630:	c9 01       	movw	r24, r18
 632:	20 de       	rcall	.-960    	; 0x274 <printSeg>
 634:	21 97       	sbiw	r28, 0x01	; 1
 636:	c8 f6       	brcc	.-78     	; 0x5ea <main+0x22>
 638:	ce cf       	rjmp	.-100    	; 0x5d6 <main+0xe>

0000063a <__udivmodhi4>:
 63a:	aa 1b       	sub	r26, r26
 63c:	bb 1b       	sub	r27, r27
 63e:	51 e1       	ldi	r21, 0x11	; 17
 640:	07 c0       	rjmp	.+14     	; 0x650 <__udivmodhi4_ep>

00000642 <__udivmodhi4_loop>:
 642:	aa 1f       	adc	r26, r26
 644:	bb 1f       	adc	r27, r27
 646:	a6 17       	cp	r26, r22
 648:	b7 07       	cpc	r27, r23
 64a:	10 f0       	brcs	.+4      	; 0x650 <__udivmodhi4_ep>
 64c:	a6 1b       	sub	r26, r22
 64e:	b7 0b       	sbc	r27, r23

00000650 <__udivmodhi4_ep>:
 650:	88 1f       	adc	r24, r24
 652:	99 1f       	adc	r25, r25
 654:	5a 95       	dec	r21
 656:	a9 f7       	brne	.-22     	; 0x642 <__udivmodhi4_loop>
 658:	80 95       	com	r24
 65a:	90 95       	com	r25
 65c:	bc 01       	movw	r22, r24
 65e:	cd 01       	movw	r24, r26
 660:	08 95       	ret

00000662 <__tablejump2__>:
 662:	ee 0f       	add	r30, r30
 664:	ff 1f       	adc	r31, r31
 666:	00 24       	eor	r0, r0
 668:	00 1c       	adc	r0, r0
 66a:	0b be       	out	0x3b, r0	; 59
 66c:	07 90       	elpm	r0, Z+
 66e:	f6 91       	elpm	r31, Z
 670:	e0 2d       	mov	r30, r0
 672:	09 94       	ijmp

00000674 <__umulhisi3>:
 674:	a2 9f       	mul	r26, r18
 676:	b0 01       	movw	r22, r0
 678:	b3 9f       	mul	r27, r19
 67a:	c0 01       	movw	r24, r0
 67c:	a3 9f       	mul	r26, r19
 67e:	70 0d       	add	r23, r0
 680:	81 1d       	adc	r24, r1
 682:	11 24       	eor	r1, r1
 684:	91 1d       	adc	r25, r1
 686:	b2 9f       	mul	r27, r18
 688:	70 0d       	add	r23, r0
 68a:	81 1d       	adc	r24, r1
 68c:	11 24       	eor	r1, r1
 68e:	91 1d       	adc	r25, r1
 690:	08 95       	ret

00000692 <_exit>:
 692:	f8 94       	cli

00000694 <__stop_program>:
 694:	ff cf       	rjmp	.-2      	; 0x694 <__stop_program>
