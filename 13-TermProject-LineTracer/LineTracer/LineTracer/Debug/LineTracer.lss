
LineTracer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  0000098c  00000a20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000098c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  0080011c  0080011c  00000a3c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a3c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a6c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000aac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011a2  00000000  00000000  00000b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000907  00000000  00000000  00001d0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a8d  00000000  00000000  00002615  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000218  00000000  00000000  000030a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000653  00000000  00000000  000032bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b60  00000000  00000000  0000390f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  0000446f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	6d c0       	rjmp	.+218    	; 0xdc <__ctors_end>
   2:	00 00       	nop
   4:	88 c0       	rjmp	.+272    	; 0x116 <__bad_interrupt>
   6:	00 00       	nop
   8:	86 c0       	rjmp	.+268    	; 0x116 <__bad_interrupt>
   a:	00 00       	nop
   c:	84 c0       	rjmp	.+264    	; 0x116 <__bad_interrupt>
   e:	00 00       	nop
  10:	82 c0       	rjmp	.+260    	; 0x116 <__bad_interrupt>
  12:	00 00       	nop
  14:	d5 c1       	rjmp	.+938    	; 0x3c0 <__vector_5>
  16:	00 00       	nop
  18:	bf c1       	rjmp	.+894    	; 0x398 <__vector_6>
  1a:	00 00       	nop
  1c:	7c c0       	rjmp	.+248    	; 0x116 <__bad_interrupt>
  1e:	00 00       	nop
  20:	7a c0       	rjmp	.+244    	; 0x116 <__bad_interrupt>
  22:	00 00       	nop
  24:	78 c0       	rjmp	.+240    	; 0x116 <__bad_interrupt>
  26:	00 00       	nop
  28:	76 c0       	rjmp	.+236    	; 0x116 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	74 c0       	rjmp	.+232    	; 0x116 <__bad_interrupt>
  2e:	00 00       	nop
  30:	72 c0       	rjmp	.+228    	; 0x116 <__bad_interrupt>
  32:	00 00       	nop
  34:	70 c0       	rjmp	.+224    	; 0x116 <__bad_interrupt>
  36:	00 00       	nop
  38:	6e c0       	rjmp	.+220    	; 0x116 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	a4 c3       	rjmp	.+1864   	; 0x786 <__vector_15>
  3e:	00 00       	nop
  40:	6a c0       	rjmp	.+212    	; 0x116 <__bad_interrupt>
  42:	00 00       	nop
  44:	68 c0       	rjmp	.+208    	; 0x116 <__bad_interrupt>
  46:	00 00       	nop
  48:	66 c0       	rjmp	.+204    	; 0x116 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	64 c0       	rjmp	.+200    	; 0x116 <__bad_interrupt>
  4e:	00 00       	nop
  50:	62 c0       	rjmp	.+196    	; 0x116 <__bad_interrupt>
  52:	00 00       	nop
  54:	60 c0       	rjmp	.+192    	; 0x116 <__bad_interrupt>
  56:	00 00       	nop
  58:	5e c0       	rjmp	.+188    	; 0x116 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5c c0       	rjmp	.+184    	; 0x116 <__bad_interrupt>
  5e:	00 00       	nop
  60:	5a c0       	rjmp	.+180    	; 0x116 <__bad_interrupt>
  62:	00 00       	nop
  64:	58 c0       	rjmp	.+176    	; 0x116 <__bad_interrupt>
  66:	00 00       	nop
  68:	56 c0       	rjmp	.+172    	; 0x116 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	54 c0       	rjmp	.+168    	; 0x116 <__bad_interrupt>
  6e:	00 00       	nop
  70:	52 c0       	rjmp	.+164    	; 0x116 <__bad_interrupt>
  72:	00 00       	nop
  74:	50 c0       	rjmp	.+160    	; 0x116 <__bad_interrupt>
  76:	00 00       	nop
  78:	4e c0       	rjmp	.+156    	; 0x116 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4c c0       	rjmp	.+152    	; 0x116 <__bad_interrupt>
  7e:	00 00       	nop
  80:	4a c0       	rjmp	.+148    	; 0x116 <__bad_interrupt>
  82:	00 00       	nop
  84:	48 c0       	rjmp	.+144    	; 0x116 <__bad_interrupt>
  86:	00 00       	nop
  88:	46 c0       	rjmp	.+140    	; 0x116 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	cf 00       	.word	0x00cf	; ????
  8e:	d3 00       	.word	0x00d3	; ????
  90:	d1 00       	.word	0x00d1	; ????
  92:	d7 00       	.word	0x00d7	; ????
  94:	dd 00       	.word	0x00dd	; ????
  96:	d5 00       	.word	0x00d5	; ????
  98:	dd 00       	.word	0x00dd	; ????
  9a:	db 00       	.word	0x00db	; ????
  9c:	f8 00       	.word	0x00f8	; ????
  9e:	dd 00       	.word	0x00dd	; ????
  a0:	dd 00       	.word	0x00dd	; ????
  a2:	d9 00       	.word	0x00d9	; ????
  a4:	e8 00       	.word	0x00e8	; ????
  a6:	ec 00       	.word	0x00ec	; ????
  a8:	ea 00       	.word	0x00ea	; ????
  aa:	f0 00       	.word	0x00f0	; ????
  ac:	f6 00       	.word	0x00f6	; ????
  ae:	ee 00       	.word	0x00ee	; ????
  b0:	f6 00       	.word	0x00f6	; ????
  b2:	f4 00       	.word	0x00f4	; ????
  b4:	fa 00       	.word	0x00fa	; ????
  b6:	f6 00       	.word	0x00f6	; ????
  b8:	f6 00       	.word	0x00f6	; ????
  ba:	f2 00       	.word	0x00f2	; ????
  bc:	a0 02       	muls	r26, r16
  be:	78 02       	muls	r23, r24
  c0:	71 02       	muls	r23, r17
  c2:	ac 02       	muls	r26, r28
  c4:	71 02       	muls	r23, r17
  c6:	63 02       	muls	r22, r19
  c8:	71 02       	muls	r23, r17
  ca:	63 02       	muls	r22, r19
  cc:	8c 02       	muls	r24, r28
  ce:	ac 02       	muls	r26, r28
  d0:	6a 02       	muls	r22, r26
  d2:	5b 02       	muls	r21, r27
  d4:	ac 02       	muls	r26, r28
  d6:	5f 02       	muls	r21, r31
  d8:	6a 02       	muls	r22, r26
  da:	27 02       	muls	r18, r23

000000dc <__ctors_end>:
  dc:	11 24       	eor	r1, r1
  de:	1f be       	out	0x3f, r1	; 63
  e0:	cf ef       	ldi	r28, 0xFF	; 255
  e2:	d0 e1       	ldi	r29, 0x10	; 16
  e4:	de bf       	out	0x3e, r29	; 62
  e6:	cd bf       	out	0x3d, r28	; 61

000000e8 <__do_copy_data>:
  e8:	11 e0       	ldi	r17, 0x01	; 1
  ea:	a0 e0       	ldi	r26, 0x00	; 0
  ec:	b1 e0       	ldi	r27, 0x01	; 1
  ee:	ec e8       	ldi	r30, 0x8C	; 140
  f0:	f9 e0       	ldi	r31, 0x09	; 9
  f2:	00 e0       	ldi	r16, 0x00	; 0
  f4:	0b bf       	out	0x3b, r16	; 59
  f6:	02 c0       	rjmp	.+4      	; 0xfc <__do_copy_data+0x14>
  f8:	07 90       	elpm	r0, Z+
  fa:	0d 92       	st	X+, r0
  fc:	ac 31       	cpi	r26, 0x1C	; 28
  fe:	b1 07       	cpc	r27, r17
 100:	d9 f7       	brne	.-10     	; 0xf8 <__do_copy_data+0x10>

00000102 <__do_clear_bss>:
 102:	21 e0       	ldi	r18, 0x01	; 1
 104:	ac e1       	ldi	r26, 0x1C	; 28
 106:	b1 e0       	ldi	r27, 0x01	; 1
 108:	01 c0       	rjmp	.+2      	; 0x10c <.do_clear_bss_start>

0000010a <.do_clear_bss_loop>:
 10a:	1d 92       	st	X+, r1

0000010c <.do_clear_bss_start>:
 10c:	aa 32       	cpi	r26, 0x2A	; 42
 10e:	b2 07       	cpc	r27, r18
 110:	e1 f7       	brne	.-8      	; 0x10a <.do_clear_bss_loop>
 112:	c7 d3       	rcall	.+1934   	; 0x8a2 <main>
 114:	39 c4       	rjmp	.+2162   	; 0x988 <_exit>

00000116 <__bad_interrupt>:
 116:	74 cf       	rjmp	.-280    	; 0x0 <__vectors>

00000118 <initFlag>:
			case 0xc0: step=0x90; break;
			default: step=0xc0; break;
		}
	}
	return step;
}
 118:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <motorForceLeftFlag>
 11c:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <motorForceRightFlag>
 120:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <countStopSign>
 124:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <stopSign>
 128:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <forceRightSign>
 12c:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <forceLeftSign>
 130:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <calibLeft>
 134:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <calibRight>
 138:	84 e6       	ldi	r24, 0x64	; 100
 13a:	81 bf       	out	0x31, r24	; 49
 13c:	08 95       	ret

0000013e <initPort>:
 13e:	1b ba       	out	0x1b, r1	; 27
 140:	1a ba       	out	0x1a, r1	; 26
 142:	18 ba       	out	0x18, r1	; 24
 144:	17 ba       	out	0x17, r1	; 23
 146:	15 ba       	out	0x15, r1	; 21
 148:	14 ba       	out	0x14, r1	; 20
 14a:	12 ba       	out	0x12, r1	; 18
 14c:	8f ef       	ldi	r24, 0xFF	; 255
 14e:	81 bb       	out	0x11, r24	; 17
 150:	13 b8       	out	0x03, r1	; 3
 152:	12 b8       	out	0x02, r1	; 2
 154:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 158:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 15c:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
 160:	83 e0       	ldi	r24, 0x03	; 3
 162:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
 166:	08 95       	ret

00000168 <initDevices>:
 168:	f8 94       	cli
 16a:	1c be       	out	0x3c, r1	; 60
 16c:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
 170:	e6 df       	rcall	.-52     	; 0x13e <initPort>
 172:	15 be       	out	0x35, r1	; 53
 174:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
 178:	1a be       	out	0x3a, r1	; 58
 17a:	19 be       	out	0x39, r1	; 57
 17c:	17 be       	out	0x37, r1	; 55
 17e:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <__TEXT_REGION_LENGTH__+0x7e007d>
 182:	78 94       	sei
 184:	08 95       	ret

00000186 <LEFTmotorOneClock>:
 186:	8f 70       	andi	r24, 0x0F	; 15
 188:	66 23       	and	r22, r22
 18a:	c9 f0       	breq	.+50     	; 0x1be <LEFTmotorOneClock+0x38>
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	fc 01       	movw	r30, r24
 190:	31 97       	sbiw	r30, 0x01	; 1
 192:	ec 30       	cpi	r30, 0x0C	; 12
 194:	f1 05       	cpc	r31, r1
 196:	88 f4       	brcc	.+34     	; 0x1ba <LEFTmotorOneClock+0x34>
 198:	ea 5b       	subi	r30, 0xBA	; 186
 19a:	ff 4f       	sbci	r31, 0xFF	; 255
 19c:	dd c3       	rjmp	.+1978   	; 0x958 <__tablejump2__>
 19e:	83 e0       	ldi	r24, 0x03	; 3
 1a0:	08 95       	ret
 1a2:	82 e0       	ldi	r24, 0x02	; 2
 1a4:	08 95       	ret
 1a6:	86 e0       	ldi	r24, 0x06	; 6
 1a8:	08 95       	ret
 1aa:	84 e0       	ldi	r24, 0x04	; 4
 1ac:	08 95       	ret
 1ae:	8c e0       	ldi	r24, 0x0C	; 12
 1b0:	08 95       	ret
 1b2:	88 e0       	ldi	r24, 0x08	; 8
 1b4:	08 95       	ret
 1b6:	89 e0       	ldi	r24, 0x09	; 9
 1b8:	08 95       	ret
 1ba:	8c e0       	ldi	r24, 0x0C	; 12
 1bc:	08 95       	ret
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	fc 01       	movw	r30, r24
 1c2:	31 97       	sbiw	r30, 0x01	; 1
 1c4:	ec 30       	cpi	r30, 0x0C	; 12
 1c6:	f1 05       	cpc	r31, r1
 1c8:	88 f4       	brcc	.+34     	; 0x1ec <LEFTmotorOneClock+0x66>
 1ca:	ee 5a       	subi	r30, 0xAE	; 174
 1cc:	ff 4f       	sbci	r31, 0xFF	; 255
 1ce:	c4 c3       	rjmp	.+1928   	; 0x958 <__tablejump2__>
 1d0:	89 e0       	ldi	r24, 0x09	; 9
 1d2:	08 95       	ret
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	08 95       	ret
 1d8:	83 e0       	ldi	r24, 0x03	; 3
 1da:	08 95       	ret
 1dc:	82 e0       	ldi	r24, 0x02	; 2
 1de:	08 95       	ret
 1e0:	86 e0       	ldi	r24, 0x06	; 6
 1e2:	08 95       	ret
 1e4:	84 e0       	ldi	r24, 0x04	; 4
 1e6:	08 95       	ret
 1e8:	8c e0       	ldi	r24, 0x0C	; 12
 1ea:	08 95       	ret
 1ec:	8c e0       	ldi	r24, 0x0C	; 12
 1ee:	08 95       	ret
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	08 95       	ret
 1f4:	88 e0       	ldi	r24, 0x08	; 8
 1f6:	08 95       	ret

000001f8 <RIGHTmotorOneClock>:
	

unsigned char  RIGHTmotorOneClock(unsigned char step, char dir)
{    
    step = step & 0xf0;
 1f8:	80 7f       	andi	r24, 0xF0	; 240
    if(dir){
 1fa:	66 23       	and	r22, r22
 1fc:	29 f1       	breq	.+74     	; 0x248 <RIGHTmotorOneClock+0x50>
        switch(step){//후진
 1fe:	80 34       	cpi	r24, 0x40	; 64
 200:	d9 f0       	breq	.+54     	; 0x238 <RIGHTmotorOneClock+0x40>
 202:	38 f4       	brcc	.+14     	; 0x212 <RIGHTmotorOneClock+0x1a>
 204:	80 32       	cpi	r24, 0x20	; 32
 206:	a1 f0       	breq	.+40     	; 0x230 <RIGHTmotorOneClock+0x38>
 208:	80 33       	cpi	r24, 0x30	; 48
 20a:	81 f0       	breq	.+32     	; 0x22c <RIGHTmotorOneClock+0x34>
 20c:	80 31       	cpi	r24, 0x10	; 16
 20e:	d1 f4       	brne	.+52     	; 0x244 <RIGHTmotorOneClock+0x4c>
 210:	0b c0       	rjmp	.+22     	; 0x228 <RIGHTmotorOneClock+0x30>
 212:	80 38       	cpi	r24, 0x80	; 128
 214:	a9 f0       	breq	.+42     	; 0x240 <RIGHTmotorOneClock+0x48>
 216:	18 f4       	brcc	.+6      	; 0x21e <RIGHTmotorOneClock+0x26>
 218:	80 36       	cpi	r24, 0x60	; 96
 21a:	61 f0       	breq	.+24     	; 0x234 <RIGHTmotorOneClock+0x3c>
 21c:	13 c0       	rjmp	.+38     	; 0x244 <RIGHTmotorOneClock+0x4c>
 21e:	80 39       	cpi	r24, 0x90	; 144
 220:	c1 f1       	breq	.+112    	; 0x292 <RIGHTmotorOneClock+0x9a>
 222:	80 3c       	cpi	r24, 0xC0	; 192
 224:	59 f0       	breq	.+22     	; 0x23c <RIGHTmotorOneClock+0x44>
 226:	0e c0       	rjmp	.+28     	; 0x244 <RIGHTmotorOneClock+0x4c>
            case 0x90: step=0x10; break;
            case 0x10: step=0x30; break;
 228:	80 e3       	ldi	r24, 0x30	; 48
 22a:	08 95       	ret
            case 0x30: step=0x20; break;
 22c:	80 e2       	ldi	r24, 0x20	; 32
 22e:	08 95       	ret
            case 0x20: step=0x60; break;
 230:	80 e6       	ldi	r24, 0x60	; 96
 232:	08 95       	ret
            case 0x60: step=0x40; break;
 234:	80 e4       	ldi	r24, 0x40	; 64
 236:	08 95       	ret
            case 0x40: step=0xc0; break;
 238:	80 ec       	ldi	r24, 0xC0	; 192
 23a:	08 95       	ret
            case 0xc0: step=0x80; break;
 23c:	80 e8       	ldi	r24, 0x80	; 128
 23e:	08 95       	ret
            case 0x80: step=0x90; break;
 240:	80 e9       	ldi	r24, 0x90	; 144
 242:	08 95       	ret
            default: step=0xc0; break;
 244:	80 ec       	ldi	r24, 0xC0	; 192
 246:	08 95       	ret
        }
    }else{  
        switch(step){//전진
 248:	80 34       	cpi	r24, 0x40	; 64
 24a:	d9 f0       	breq	.+54     	; 0x282 <RIGHTmotorOneClock+0x8a>
 24c:	38 f4       	brcc	.+14     	; 0x25c <RIGHTmotorOneClock+0x64>
 24e:	80 32       	cpi	r24, 0x20	; 32
 250:	a1 f0       	breq	.+40     	; 0x27a <RIGHTmotorOneClock+0x82>
 252:	80 33       	cpi	r24, 0x30	; 48
 254:	81 f0       	breq	.+32     	; 0x276 <RIGHTmotorOneClock+0x7e>
 256:	80 31       	cpi	r24, 0x10	; 16
 258:	d1 f4       	brne	.+52     	; 0x28e <RIGHTmotorOneClock+0x96>
 25a:	0b c0       	rjmp	.+22     	; 0x272 <RIGHTmotorOneClock+0x7a>
 25c:	80 38       	cpi	r24, 0x80	; 128
 25e:	a9 f0       	breq	.+42     	; 0x28a <RIGHTmotorOneClock+0x92>
 260:	18 f4       	brcc	.+6      	; 0x268 <RIGHTmotorOneClock+0x70>
 262:	80 36       	cpi	r24, 0x60	; 96
 264:	61 f0       	breq	.+24     	; 0x27e <RIGHTmotorOneClock+0x86>
 266:	13 c0       	rjmp	.+38     	; 0x28e <RIGHTmotorOneClock+0x96>
 268:	80 39       	cpi	r24, 0x90	; 144
 26a:	a9 f0       	breq	.+42     	; 0x296 <RIGHTmotorOneClock+0x9e>
 26c:	80 3c       	cpi	r24, 0xC0	; 192
 26e:	59 f0       	breq	.+22     	; 0x286 <RIGHTmotorOneClock+0x8e>
 270:	0e c0       	rjmp	.+28     	; 0x28e <RIGHTmotorOneClock+0x96>
            case 0x90: step=0x80; break;//1001
            case 0x10: step=0x90; break;//0001
 272:	80 e9       	ldi	r24, 0x90	; 144
 274:	08 95       	ret
            case 0x30: step=0x10; break;//0011
 276:	80 e1       	ldi	r24, 0x10	; 16
 278:	08 95       	ret
            case 0x20: step=0x30; break;//0010
 27a:	80 e3       	ldi	r24, 0x30	; 48
 27c:	08 95       	ret
            case 0x60: step=0x20; break;//0110
 27e:	80 e2       	ldi	r24, 0x20	; 32
 280:	08 95       	ret
            case 0x40: step=0x60; break;//0100
 282:	80 e6       	ldi	r24, 0x60	; 96
 284:	08 95       	ret
            case 0xc0: step=0x40; break;//1100
 286:	80 e4       	ldi	r24, 0x40	; 64
 288:	08 95       	ret
            case 0x80: step=0xc0; break;//1000
 28a:	80 ec       	ldi	r24, 0xC0	; 192
 28c:	08 95       	ret
            default: step=0xc0; break;
 28e:	80 ec       	ldi	r24, 0xC0	; 192
 290:	08 95       	ret
unsigned char  RIGHTmotorOneClock(unsigned char step, char dir)
{    
    step = step & 0xf0;
    if(dir){
        switch(step){//후진
            case 0x90: step=0x10; break;
 292:	80 e1       	ldi	r24, 0x10	; 16
 294:	08 95       	ret
            case 0x80: step=0x90; break;
            default: step=0xc0; break;
        }
    }else{  
        switch(step){//전진
            case 0x90: step=0x80; break;//1001
 296:	80 e8       	ldi	r24, 0x80	; 128
            case 0x80: step=0xc0; break;//1000
            default: step=0xc0; break;
        }
    }
    return step;
}
 298:	08 95       	ret

0000029a <printSeg>:
void printSeg(int segNum, int segDigit){
    //by schematic, PORTE must being clear before set segment's digit and led.
    //because circuit use same port(A) to set segment's digit and led by latch.

    //set segment digit to print
    PORTA = FND_SEGPOS[segDigit];
 29a:	fb 01       	movw	r30, r22
 29c:	e4 5f       	subi	r30, 0xF4	; 244
 29e:	fe 4f       	sbci	r31, 0xFE	; 254
 2a0:	20 81       	ld	r18, Z
 2a2:	2b bb       	out	0x1b, r18	; 27
    PORTE |= 0x04; //set 1 segment digit latch
 2a4:	1a 9a       	sbi	0x03, 2	; 3
    PORTE &= ~(0x04); //clear LED_CTL(PE2)
 2a6:	1a 98       	cbi	0x03, 2	; 3

    //print num at segment
    PORTA = FND_SEGNP[segNum]; //print with out decimal point
 2a8:	80 5f       	subi	r24, 0xF0	; 240
 2aa:	9e 4f       	sbci	r25, 0xFE	; 254
 2ac:	fc 01       	movw	r30, r24
 2ae:	80 81       	ld	r24, Z
 2b0:	8b bb       	out	0x1b, r24	; 27
    PORTE |= 0x08; //set 1 segment led latch
 2b2:	1b 9a       	sbi	0x03, 3	; 3
    PORTE &= ~(0x08); //clear LED_DATA(PE3)
 2b4:	1b 98       	cbi	0x03, 3	; 3
 2b6:	08 95       	ret

000002b8 <initSegment>:
}

void initSegment(){
    //initialize port A and E
    DDRA = 0xFF;    //set portA(7:0) to output
 2b8:	8f ef       	ldi	r24, 0xFF	; 255
 2ba:	8a bb       	out	0x1a, r24	; 26
    DDRE |= 0x0C;   //set portE(3:2) to output
 2bc:	82 b1       	in	r24, 0x02	; 2
 2be:	8c 60       	ori	r24, 0x0C	; 12
 2c0:	82 b9       	out	0x02, r24	; 2
    PORTE |= 0x04;  //init portE(3)
 2c2:	1a 9a       	sbi	0x03, 2	; 3
    PORTA = 0x0F;   //init portA(3:0)
 2c4:	8f e0       	ldi	r24, 0x0F	; 15
 2c6:	8b bb       	out	0x1b, r24	; 27
 2c8:	08 95       	ret

000002ca <initInterrupt>:
}

void initInterrupt(){
        //external interrupt int4 enable
        //int4 pin falling edge활성화
        EICRB &= ~(1 << ISC40);
 2ca:	8a b7       	in	r24, 0x3a	; 58
 2cc:	8e 7f       	andi	r24, 0xFE	; 254
 2ce:	8a bf       	out	0x3a, r24	; 58
        EICRB |= 1 << ISC41; //same to EICRB = 0d00000010
 2d0:	8a b7       	in	r24, 0x3a	; 58
 2d2:	82 60       	ori	r24, 0x02	; 2
 2d4:	8a bf       	out	0x3a, r24	; 58
        //enable external interrupt 4
        EIMSK |= 1 << INT4;
 2d6:	89 b7       	in	r24, 0x39	; 57
 2d8:	80 61       	ori	r24, 0x10	; 16
 2da:	89 bf       	out	0x39, r24	; 57

        //external interrupt int5 enable
        //int5 pin falling edge활성화
        EICRB &= ~(1 << ISC50); //clear
 2dc:	8a b7       	in	r24, 0x3a	; 58
 2de:	8b 7f       	andi	r24, 0xFB	; 251
 2e0:	8a bf       	out	0x3a, r24	; 58
        EICRB |= 1 << ISC51;    //set
 2e2:	8a b7       	in	r24, 0x3a	; 58
 2e4:	88 60       	ori	r24, 0x08	; 8
 2e6:	8a bf       	out	0x3a, r24	; 58
        //enable external interrupt 5
        EIMSK |= 1 << INT5;
 2e8:	89 b7       	in	r24, 0x39	; 57
 2ea:	80 62       	ori	r24, 0x20	; 32
 2ec:	89 bf       	out	0x39, r24	; 57
 2ee:	08 95       	ret

000002f0 <initTimerInterrupt>:
}

void initTimerInterrupt()
{
    TCCR0 = 0x0d; //0d00001110//CTC mode and 64 prescaling
 2f0:	8d e0       	ldi	r24, 0x0D	; 13
 2f2:	83 bf       	out	0x33, r24	; 51
    TCNT0 = 0x00; //clear count value register. TCNT0 increase count from 0, clear on 63
 2f4:	12 be       	out	0x32, r1	; 50
    TIMSK = 0x02; //enable Timer/Counter0 compare match interrupt, disable overflow interrupt
 2f6:	82 e0       	ldi	r24, 0x02	; 2
 2f8:	87 bf       	out	0x37, r24	; 55
    TIFR = 0xff;  //write logic 1 on flag for clear register
 2fa:	8f ef       	ldi	r24, 0xFF	; 255
 2fc:	86 bf       	out	0x36, r24	; 54
    OCR0 = 0x6d;  //compare 110
 2fe:	8d e6       	ldi	r24, 0x6D	; 109
 300:	81 bf       	out	0x31, r24	; 49
 302:	08 95       	ret

00000304 <motor>:
}

char smothMoterCounter = 0;
//모터 구동
void motor(char direction, char smoth){
 304:	cf 93       	push	r28
 306:	c6 2f       	mov	r28, r22
	switch(direction){
 308:	81 30       	cpi	r24, 0x01	; 1
 30a:	89 f0       	breq	.+34     	; 0x32e <motor+0x2a>
 30c:	18 f0       	brcs	.+6      	; 0x314 <motor+0x10>
 30e:	82 30       	cpi	r24, 0x02	; 2
 310:	29 f1       	breq	.+74     	; 0x35c <motor+0x58>
 312:	3a c0       	rjmp	.+116    	; 0x388 <motor+0x84>
        case STRAIGHT : 
            stepRight = RIGHTmotorOneClock(stepRight, 1);  //break 없으니까 밑에꺼도 실행됨
 314:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <stepRight>
 318:	61 e0       	ldi	r22, 0x01	; 1
 31a:	6e df       	rcall	.-292    	; 0x1f8 <RIGHTmotorOneClock>
 31c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <stepRight>
            stepLeft = LEFTmotorOneClock(stepLeft, 0);
 320:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <stepLeft>
 324:	60 e0       	ldi	r22, 0x00	; 0
 326:	2f df       	rcall	.-418    	; 0x186 <LEFTmotorOneClock>
 328:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <stepLeft>
            break;
 32c:	2d c0       	rjmp	.+90     	; 0x388 <motor+0x84>
        case RIGHT : 
            stepLeft = LEFTmotorOneClock(stepLeft, 0);
 32e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <stepLeft>
 332:	60 e0       	ldi	r22, 0x00	; 0
 334:	28 df       	rcall	.-432    	; 0x186 <LEFTmotorOneClock>
 336:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <stepLeft>
            smothMoterCounter++;
 33a:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <smothMoterCounter>
 33e:	8f 5f       	subi	r24, 0xFF	; 255
            if(smothMoterCounter > smoth){
 340:	c8 17       	cp	r28, r24
 342:	18 f0       	brcs	.+6      	; 0x34a <motor+0x46>
            stepRight = RIGHTmotorOneClock(stepRight, 1);  //break 없으니까 밑에꺼도 실행됨
            stepLeft = LEFTmotorOneClock(stepLeft, 0);
            break;
        case RIGHT : 
            stepLeft = LEFTmotorOneClock(stepLeft, 0);
            smothMoterCounter++;
 344:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <smothMoterCounter>
 348:	1f c0       	rjmp	.+62     	; 0x388 <motor+0x84>
            if(smothMoterCounter > smoth){
                smothMoterCounter = 0;
 34a:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <smothMoterCounter>
                stepRight = RIGHTmotorOneClock(stepRight, 1);
 34e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <stepRight>
 352:	61 e0       	ldi	r22, 0x01	; 1
 354:	51 df       	rcall	.-350    	; 0x1f8 <RIGHTmotorOneClock>
 356:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <stepRight>
 35a:	16 c0       	rjmp	.+44     	; 0x388 <motor+0x84>
            }
            break;
        case LEFT  : 
            stepRight = RIGHTmotorOneClock(stepRight, 1);
 35c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <stepRight>
 360:	61 e0       	ldi	r22, 0x01	; 1
 362:	4a df       	rcall	.-364    	; 0x1f8 <RIGHTmotorOneClock>
 364:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <stepRight>
 368:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <smothMoterCounter>
            smothMoterCounter++;
 36c:	8f 5f       	subi	r24, 0xFF	; 255
 36e:	c8 17       	cp	r28, r24
            if(smothMoterCounter > smoth){
 370:	18 f0       	brcs	.+6      	; 0x378 <motor+0x74>
 372:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <smothMoterCounter>
                stepRight = RIGHTmotorOneClock(stepRight, 1);
            }
            break;
        case LEFT  : 
            stepRight = RIGHTmotorOneClock(stepRight, 1);
            smothMoterCounter++;
 376:	08 c0       	rjmp	.+16     	; 0x388 <motor+0x84>
 378:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <smothMoterCounter>
            if(smothMoterCounter > smoth){
                smothMoterCounter = 0;
                stepLeft = LEFTmotorOneClock(stepLeft, 0);
 37c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <stepLeft>
 380:	60 e0       	ldi	r22, 0x00	; 0
 382:	01 df       	rcall	.-510    	; 0x186 <LEFTmotorOneClock>
 384:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <stepLeft>
 388:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <stepLeft>
            }
            break;
    }
    MOTOR_PORT = stepLeft|stepRight;
 38c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <stepRight>
 390:	89 2b       	or	r24, r25
 392:	82 bb       	out	0x12, r24	; 18
 394:	cf 91       	pop	r28
}
 396:	08 95       	ret

00000398 <__vector_6>:
 398:	1f 92       	push	r1

//출발
ISR(INT5_vect){
 39a:	0f 92       	push	r0
 39c:	0f b6       	in	r0, 0x3f	; 63
 39e:	0f 92       	push	r0
 3a0:	11 24       	eor	r1, r1
 3a2:	8f 93       	push	r24
 3a4:	9f 93       	push	r25
    state = STATE_RUNNING;
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <state+0x1>
 3ae:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <state>
}
 3b2:	9f 91       	pop	r25
 3b4:	8f 91       	pop	r24
 3b6:	0f 90       	pop	r0
 3b8:	0f be       	out	0x3f, r0	; 63
 3ba:	0f 90       	pop	r0
 3bc:	1f 90       	pop	r1
 3be:	18 95       	reti

000003c0 <__vector_5>:

//속도조절

ISR(INT4_vect){
 3c0:	1f 92       	push	r1
 3c2:	0f 92       	push	r0
 3c4:	0f b6       	in	r0, 0x3f	; 63
 3c6:	0f 92       	push	r0
 3c8:	11 24       	eor	r1, r1
 3ca:	8f 93       	push	r24
 3cc:	9f 93       	push	r25
    //when interrupt 4 excu, increase num
    
    if(timeNum > 70){
 3ce:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <timeNum>
 3d2:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <timeNum+0x1>
 3d6:	87 34       	cpi	r24, 0x47	; 71
 3d8:	91 05       	cpc	r25, r1
 3da:	30 f0       	brcs	.+12     	; 0x3e8 <__vector_5+0x28>
        timeNum -= 5;
 3dc:	05 97       	sbiw	r24, 0x05	; 5
 3de:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <timeNum+0x1>
 3e2:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <timeNum>
 3e6:	05 c0       	rjmp	.+10     	; 0x3f2 <__vector_5+0x32>
    }else{
        timeNum -= 2;
 3e8:	02 97       	sbiw	r24, 0x02	; 2
 3ea:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <timeNum+0x1>
 3ee:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <timeNum>
    }
    if (timeNum < 40){
 3f2:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <timeNum>
 3f6:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <timeNum+0x1>
 3fa:	88 32       	cpi	r24, 0x28	; 40
 3fc:	91 05       	cpc	r25, r1
 3fe:	98 f4       	brcc	.+38     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
        OCR0 = timeNum = 110;
 400:	8e e6       	ldi	r24, 0x6E	; 110
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <timeNum+0x1>
 408:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <timeNum>
 40c:	81 bf       	out	0x31, r24	; 49
    }
	if(timeNum < 100){
 40e:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <timeNum>
 412:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <timeNum+0x1>
 416:	84 36       	cpi	r24, 0x64	; 100
 418:	91 05       	cpc	r25, r1
 41a:	18 f4       	brcc	.+6      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
		OCR0 = 100;
 41c:	84 e6       	ldi	r24, 0x64	; 100
 41e:	81 bf       	out	0x31, r24	; 49
 420:	06 c0       	rjmp	.+12     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
	}else if(timeNum >=100){
		OCR0 = timeNum;
 422:	81 bf       	out	0x31, r24	; 49
	}
		
}
 424:	04 c0       	rjmp	.+8      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
        timeNum -= 2;
    }
    if (timeNum < 40){
        OCR0 = timeNum = 110;
    }
	if(timeNum < 100){
 426:	84 36       	cpi	r24, 0x64	; 100
 428:	91 05       	cpc	r25, r1
 42a:	d8 f7       	brcc	.-10     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 42c:	f7 cf       	rjmp	.-18     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
		OCR0 = 100;
	}else if(timeNum >=100){
		OCR0 = timeNum;
	}
		
}
 42e:	9f 91       	pop	r25
 430:	8f 91       	pop	r24
 432:	0f 90       	pop	r0
 434:	0f be       	out	0x3f, r0	; 63
 436:	0f 90       	pop	r0
 438:	1f 90       	pop	r1
 43a:	18 95       	reti

0000043c <sensorScan>:
char rightSmoth = 0;
char leftSmoth = 0;
short countTimeStop = 1000;

void sensorScan(char sensor){
    switch(sensor){
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	80 31       	cpi	r24, 0x10	; 16
 440:	91 05       	cpc	r25, r1
 442:	08 f0       	brcs	.+2      	; 0x446 <sensorScan+0xa>
 444:	89 c0       	rjmp	.+274    	; 0x558 <sensorScan+0x11c>
 446:	fc 01       	movw	r30, r24
 448:	e2 5a       	subi	r30, 0xA2	; 162
 44a:	ff 4f       	sbci	r31, 0xFF	; 255
 44c:	85 c2       	rjmp	.+1290   	; 0x958 <__tablejump2__>
        case 0x0f:{                      //1111 - 걸리는거없음 직진
            //정지신호 있을때
            if(stopSign==1){            // stop sign(0110)이 있은뒤 사라지면 카운트
 44e:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <stopSign>
 452:	81 30       	cpi	r24, 0x01	; 1
 454:	b9 f4       	brne	.+46     	; 0x484 <sensorScan+0x48>
                forceRightSign = forceLeftSign = 0; //정지신호가 양쪽 조금씩 다르게 들어간경우 예외처리
 456:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <forceLeftSign>
 45a:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <forceRightSign>
                stopSign=0;
 45e:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <stopSign>
                countStopSign++;
 462:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <countStopSign>
 466:	8f 5f       	subi	r24, 0xFF	; 255
 468:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <countStopSign>
				countTimeStop = 0;
 46c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
 470:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>

                if((countTimeStop < 1000)&&(countStopSign > 2)){    //stopsign 3번 나오면 종료
 474:	83 30       	cpi	r24, 0x03	; 3
 476:	d8 f0       	brcs	.+54     	; 0x4ae <sensorScan+0x72>
                    state = STATE_INIT;
 478:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <state+0x1>
 47c:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <state>
                    initFlag();
 480:	4b ce       	rjmp	.-874    	; 0x118 <initFlag>
                    return;
 482:	08 95       	ret
                }
            }else if(forceRightSign){
 484:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <forceRightSign>
 488:	88 23       	and	r24, r24
 48a:	39 f0       	breq	.+14     	; 0x49a <sensorScan+0x5e>
                state=STATE_FORCE_RIGHT;
 48c:	82 e0       	ldi	r24, 0x02	; 2
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <state+0x1>
 494:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <state>
 498:	0a c0       	rjmp	.+20     	; 0x4ae <sensorScan+0x72>
            }else if(forceLeftSign){
 49a:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <forceLeftSign>
 49e:	88 23       	and	r24, r24
 4a0:	31 f0       	breq	.+12     	; 0x4ae <sensorScan+0x72>
                state=STATE_FORCE_LEFT;
 4a2:	83 e0       	ldi	r24, 0x03	; 3
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <state+0x1>
 4aa:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <state>
            }
            motor(STRAIGHT,0);   //직진!
 4ae:	60 e0       	ldi	r22, 0x00	; 0
 4b0:	80 e0       	ldi	r24, 0x00	; 0
 4b2:	28 cf       	rjmp	.-432    	; 0x304 <motor>
            break;
        }
        case 0x0b:{                      //1011 -- 하나걸림 좌회전
			motor(LEFT,1);
 4b4:	08 95       	ret
 4b6:	61 e0       	ldi	r22, 0x01	; 1
 4b8:	82 e0       	ldi	r24, 0x02	; 2
            
			
            break;
 4ba:	24 cf       	rjmp	.-440    	; 0x304 <motor>
        }
        case 0x0d:{                      //1101 -- 하나걸림 -우회전
            motor(RIGHT,1);
 4bc:	08 95       	ret
 4be:	61 e0       	ldi	r22, 0x01	; 1
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	20 cf       	rjmp	.-448    	; 0x304 <motor>
			
            break;
 4c4:	08 95       	ret
        }
		case 0x05://0101
        case 0x07:{                      //0111 -- 교차로 좌회전 신호
            forceLeftSign = 1;
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <forceLeftSign>
            motor(STRAIGHT,0);
 4cc:	60 e0       	ldi	r22, 0x00	; 0
 4ce:	80 e0       	ldi	r24, 0x00	; 0
 4d0:	19 cf       	rjmp	.-462    	; 0x304 <motor>
            break;
        }
		case 0x0a://1010
        case 0x0e:{                      //1110 -- 교차로 우회전 신호
            forceRightSign = 1;
 4d2:	08 95       	ret
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <forceRightSign>
            motor(STRAIGHT,0);
 4da:	60 e0       	ldi	r22, 0x00	; 0
 4dc:	80 e0       	ldi	r24, 0x00	; 0
            break;		
 4de:	12 cf       	rjmp	.-476    	; 0x304 <motor>
        }
		case 0x02://0010
		case 0x04://0100
        case 0x06:{                      //0110 -- 정지 신호
            stopSign=1;                    //flag 설정
 4e0:	08 95       	ret
 4e2:	81 e0       	ldi	r24, 0x01	; 1
 4e4:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <stopSign>
            motor(STRAIGHT,0);
 4e8:	60 e0       	ldi	r22, 0x00	; 0
 4ea:	80 e0       	ldi	r24, 0x00	; 0
 4ec:	0b cf       	rjmp	.-490    	; 0x304 <motor>
            break;
 4ee:	08 95       	ret
        }
        case 0x01:{                        //0001 - 교차로로 치우쳐 들어감
            if(calibRight == 1){                //교차로 1000으로 들어와서 0001로 나온경우엔 오른쪽으로칼리브레이션을 해줘야 합니다.
 4f0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <calibRight>
 4f4:	81 30       	cpi	r24, 0x01	; 1
 4f6:	49 f4       	brne	.+18     	; 0x50a <sensorScan+0xce>
                state = STATE_CALIB_RIGHT;
 4f8:	84 e0       	ldi	r24, 0x04	; 4
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <state+0x1>
 500:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <state>
                calibRight = 0;//스테이트 바꿨으면 초기화하기
 504:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <calibRight>
                return;
            }else{
                calibLeft = 1;
 508:	08 95       	ret
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <calibLeft>
            }
            motor(STRAIGHT,0);
 510:	60 e0       	ldi	r22, 0x00	; 0
 512:	80 e0       	ldi	r24, 0x00	; 0
 514:	f7 ce       	rjmp	.-530    	; 0x304 <motor>
            break;
 516:	08 95       	ret
        }
        case 0x08:{                        //1000    - 교차로로 치우쳐 들어감
            if(calibLeft == 1){                //교차로 0001으로 들어와서 1000로 나온경우 왼쪽으로칼리브레이션을 해줘야 합니다.
 518:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <calibLeft>
 51c:	81 30       	cpi	r24, 0x01	; 1
 51e:	49 f4       	brne	.+18     	; 0x532 <sensorScan+0xf6>
                state = STATE_CALIB_LEFT;
 520:	85 e0       	ldi	r24, 0x05	; 5
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <state+0x1>
 528:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <state>
                calibLeft = 0;//스테이트 바꿨으면 초기화하기
 52c:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <calibLeft>
                return;
            }else{
                calibRight = 1;
 530:	08 95       	ret
 532:	81 e0       	ldi	r24, 0x01	; 1
 534:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <calibRight>
            }
            motor(STRAIGHT,0);
 538:	60 e0       	ldi	r22, 0x00	; 0
 53a:	80 e0       	ldi	r24, 0x00	; 0
 53c:	e3 ce       	rjmp	.-570    	; 0x304 <motor>
            break;
 53e:	08 95       	ret
        }
        case 0x00:{                      //0000 - 교차로
            forceLeftSign = forceRightSign = stopSign= countStopSign = 0;                //교차로에 많이 치우쳐 들어온경우(0111이 인식된뒤 들어온)교차로 를 나간뒤 STATE_FORCE로 들어가지 않게 초기화 해줘야 합니다.
 540:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <countStopSign>
 544:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <stopSign>
 548:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <forceRightSign>
            motor(STRAIGHT,0);
 54c:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <forceLeftSign>
 550:	60 e0       	ldi	r22, 0x00	; 0
 552:	80 e0       	ldi	r24, 0x00	; 0
            break;
 554:	d7 ce       	rjmp	.-594    	; 0x304 <motor>
        }
        default: {   
            motor(STRAIGHT,0);
 556:	08 95       	ret
 558:	60 e0       	ldi	r22, 0x00	; 0
 55a:	80 e0       	ldi	r24, 0x00	; 0
 55c:	d3 ce       	rjmp	.-602    	; 0x304 <motor>
 55e:	08 95       	ret

00000560 <speedUp>:
}

char smothStart=0;

void speedUp(int accel){//모터를 구동할때 일정 속도 이상으로 구동할경우, 낮은속도에서부터 천천히 올려주어야 함
    if((timeNum < OCR0)&&(smothStart==accel)){//설정해둔 timeNum과 같은속도가 될때까지 서서히 가속
 560:	21 b7       	in	r18, 0x31	; 49
 562:	30 e0       	ldi	r19, 0x00	; 0
 564:	40 91 1a 01 	lds	r20, 0x011A	; 0x80011a <timeNum>
 568:	50 91 1b 01 	lds	r21, 0x011B	; 0x80011b <timeNum+0x1>
 56c:	42 17       	cp	r20, r18
 56e:	53 07       	cpc	r21, r19
 570:	60 f4       	brcc	.+24     	; 0x58a <speedUp+0x2a>
 572:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <smothStart>
 576:	30 e0       	ldi	r19, 0x00	; 0
 578:	28 17       	cp	r18, r24
 57a:	39 07       	cpc	r19, r25
 57c:	31 f4       	brne	.+12     	; 0x58a <speedUp+0x2a>
		OCR0--;
 57e:	81 b7       	in	r24, 0x31	; 49
 580:	81 50       	subi	r24, 0x01	; 1
 582:	81 bf       	out	0x31, r24	; 49
		smothStart=0;
 584:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <smothStart>
 588:	08 95       	ret
	}else{
		smothStart++;
 58a:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <smothStart>
 58e:	8f 5f       	subi	r24, 0xFF	; 255
 590:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <smothStart>
 594:	08 95       	ret

00000596 <speedDown>:
	}
}

void speedDown(int accel){//코너를 돌때 더 안정적인 코너를 돌기위해 속도를 줄여줌
 596:	ac 01       	movw	r20, r24
    if((90 > OCR0)&&(smothStart==accel)){//속도를 90으로 줄여서 코너링
 598:	91 b7       	in	r25, 0x31	; 49
 59a:	9a 35       	cpi	r25, 0x5A	; 90
 59c:	60 f4       	brcc	.+24     	; 0x5b6 <speedDown+0x20>
 59e:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <smothStart>
 5a2:	30 e0       	ldi	r19, 0x00	; 0
 5a4:	24 17       	cp	r18, r20
 5a6:	35 07       	cpc	r19, r21
 5a8:	31 f4       	brne	.+12     	; 0x5b6 <speedDown+0x20>
		OCR0++;
 5aa:	81 b7       	in	r24, 0x31	; 49
 5ac:	8f 5f       	subi	r24, 0xFF	; 255
 5ae:	81 bf       	out	0x31, r24	; 49
		smothStart=0;
 5b0:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <smothStart>
 5b4:	08 95       	ret
		
	}else{
		smothStart++;
 5b6:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <smothStart>
 5ba:	8f 5f       	subi	r24, 0xFF	; 255
 5bc:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <smothStart>
 5c0:	08 95       	ret

000005c2 <forceR>:


char smothStateForce = 0;
short forceCount = 0;

void forceR(short straightLength,short turnLength, char turnAngle, char sensor){
 5c2:	ef 92       	push	r14
 5c4:	ff 92       	push	r15
 5c6:	0f 93       	push	r16
 5c8:	1f 93       	push	r17
 5ca:	cf 93       	push	r28
 5cc:	7c 01       	movw	r14, r24
 5ce:	8b 01       	movw	r16, r22
 5d0:	c2 2f       	mov	r28, r18
    
    
	
	

    if(!forceRightSign){   
 5d2:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <forceRightSign>
 5d6:	81 11       	cpse	r24, r1
 5d8:	1e c0       	rjmp	.+60     	; 0x616 <forceR+0x54>
        motor(RIGHT,turnAngle);                                      //교차로에 들어간 뒤엔 회전만 합니다
 5da:	64 2f       	mov	r22, r20
 5dc:	81 e0       	ldi	r24, 0x01	; 1
 5de:	92 de       	rcall	.-732    	; 0x304 <motor>
        forceCount++;
 5e0:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
 5e4:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
 5e8:	01 96       	adiw	r24, 0x01	; 1
 5ea:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <__data_end+0x1>
 5ee:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
        if((forceCount > turnLength)&&(sensor == 0x0d)){//1101-Right턴 일때, 1011 - left 턴
 5f2:	08 17       	cp	r16, r24
 5f4:	19 07       	cpc	r17, r25
 5f6:	0c f0       	brlt	.+2      	; 0x5fa <forceR+0x38>
 5f8:	4f c0       	rjmp	.+158    	; 0x698 <forceR+0xd6>
 5fa:	cd 30       	cpi	r28, 0x0D	; 13
 5fc:	09 f0       	breq	.+2      	; 0x600 <forceR+0x3e>
 5fe:	4c c0       	rjmp	.+152    	; 0x698 <forceR+0xd6>
            state = STATE_RUNNING;   
 600:	81 e0       	ldi	r24, 0x01	; 1
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <state+0x1>
 608:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <state>
            forceCount=0;                           //강제 회전하다 라인이 잡히면 트랙 타기
 60c:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <__data_end+0x1>
 610:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <__data_end>
 614:	41 c0       	rjmp	.+130    	; 0x698 <forceR+0xd6>
        }
    }else{
        if(timeNum<80){
 616:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <timeNum>
 61a:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <timeNum+0x1>
 61e:	80 35       	cpi	r24, 0x50	; 80
 620:	91 05       	cpc	r25, r1
 622:	c0 f4       	brcc	.+48     	; 0x654 <forceR+0x92>
            motor(STRAIGHT,0);
 624:	60 e0       	ldi	r22, 0x00	; 0
 626:	80 e0       	ldi	r24, 0x00	; 0
 628:	6d de       	rcall	.-806    	; 0x304 <motor>
            forceCount++;
 62a:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
 62e:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
 632:	01 96       	adiw	r24, 0x01	; 1
 634:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <__data_end+0x1>
 638:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
            if(forceCount > straightLength){
 63c:	e8 16       	cp	r14, r24
 63e:	f9 06       	cpc	r15, r25
 640:	5c f5       	brge	.+86     	; 0x698 <forceR+0xd6>
                forceRightSign = 0;
 642:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <forceRightSign>
                forceLeftSign = 0;
 646:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <forceLeftSign>
                forceCount = 0;
 64a:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <__data_end+0x1>
 64e:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <__data_end>
 652:	22 c0       	rjmp	.+68     	; 0x698 <forceR+0xd6>
            }
        }else if(sensor == 0x00 || sensor == 0x01 || sensor == 0x08){    
 654:	22 30       	cpi	r18, 0x02	; 2
 656:	10 f0       	brcs	.+4      	; 0x65c <forceR+0x9a>
 658:	28 30       	cpi	r18, 0x08	; 8
 65a:	41 f4       	brne	.+16     	; 0x66c <forceR+0xaa>
            forceRightSign = 0;  
 65c:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <forceRightSign>
            forceLeftSign = 0;
 660:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <forceLeftSign>
            motor(RIGHT,255);                               //교차로 나타나면 플래그 초기화 하고 강제로 돌림
 664:	6f ef       	ldi	r22, 0xFF	; 255
 666:	81 e0       	ldi	r24, 0x01	; 1
 668:	4d de       	rcall	.-870    	; 0x304 <motor>
 66a:	16 c0       	rjmp	.+44     	; 0x698 <forceR+0xd6>
        }else{
            switch(sensor){
 66c:	2d 30       	cpi	r18, 0x0D	; 13
 66e:	69 f0       	breq	.+26     	; 0x68a <forceR+0xc8>
 670:	2f 30       	cpi	r18, 0x0F	; 15
 672:	19 f0       	breq	.+6      	; 0x67a <forceR+0xb8>
 674:	2b 30       	cpi	r18, 0x0B	; 11
 676:	69 f4       	brne	.+26     	; 0x692 <forceR+0xd0>
                case 0x0f: 
                    motor(STRAIGHT,0);
 678:	04 c0       	rjmp	.+8      	; 0x682 <forceR+0xc0>
 67a:	60 e0       	ldi	r22, 0x00	; 0
 67c:	80 e0       	ldi	r24, 0x00	; 0
                    break;
 67e:	42 de       	rcall	.-892    	; 0x304 <motor>
                case 0x0b:{                      //1011 -- 하나걸림 좌회전
                    motor(LEFT,1);
 680:	0b c0       	rjmp	.+22     	; 0x698 <forceR+0xd6>
 682:	61 e0       	ldi	r22, 0x01	; 1
 684:	82 e0       	ldi	r24, 0x02	; 2
                    break;
 686:	3e de       	rcall	.-900    	; 0x304 <motor>
                }
                case 0x0d:{                      //1101 -- 하나걸림 -우회전
                    motor(RIGHT,1);
 688:	07 c0       	rjmp	.+14     	; 0x698 <forceR+0xd6>
 68a:	61 e0       	ldi	r22, 0x01	; 1
 68c:	81 e0       	ldi	r24, 0x01	; 1
                    break;
 68e:	3a de       	rcall	.-908    	; 0x304 <motor>
                }
                default:
                    motor(STRAIGHT,0);
 690:	03 c0       	rjmp	.+6      	; 0x698 <forceR+0xd6>
 692:	60 e0       	ldi	r22, 0x00	; 0
 694:	80 e0       	ldi	r24, 0x00	; 0
 696:	36 de       	rcall	.-916    	; 0x304 <motor>
            }
        }                                      //교차로 들어가기 전까지는 무조껀 직진
    }
}
 698:	cf 91       	pop	r28
 69a:	1f 91       	pop	r17
 69c:	0f 91       	pop	r16
 69e:	ff 90       	pop	r15
 6a0:	ef 90       	pop	r14
 6a2:	08 95       	ret

000006a4 <forceL>:

void forceL(short straightLength,short turnLength, char turnAngle, char sensor){
 6a4:	ef 92       	push	r14
 6a6:	ff 92       	push	r15
 6a8:	0f 93       	push	r16
 6aa:	1f 93       	push	r17
 6ac:	cf 93       	push	r28
 6ae:	7c 01       	movw	r14, r24
 6b0:	8b 01       	movw	r16, r22
 6b2:	c2 2f       	mov	r28, r18

	
	
	

	if(!forceLeftSign){
 6b4:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <forceLeftSign>
 6b8:	81 11       	cpse	r24, r1
 6ba:	1e c0       	rjmp	.+60     	; 0x6f8 <forceL+0x54>
		motor(LEFT,turnAngle);                                      //교차로에 들어간 뒤엔 회전만 합니다
 6bc:	64 2f       	mov	r22, r20
 6be:	82 e0       	ldi	r24, 0x02	; 2
 6c0:	21 de       	rcall	.-958    	; 0x304 <motor>
		forceCount++;
 6c2:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
 6c6:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
 6ca:	01 96       	adiw	r24, 0x01	; 1
 6cc:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <__data_end+0x1>
 6d0:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
		if((forceCount > turnLength)&&(sensor == 0x0b)){//1101-Right턴 일때, 1011 - left 턴
 6d4:	08 17       	cp	r16, r24
 6d6:	19 07       	cpc	r17, r25
 6d8:	0c f0       	brlt	.+2      	; 0x6dc <forceL+0x38>
 6da:	4f c0       	rjmp	.+158    	; 0x77a <forceL+0xd6>
 6dc:	cb 30       	cpi	r28, 0x0B	; 11
 6de:	09 f0       	breq	.+2      	; 0x6e2 <forceL+0x3e>
 6e0:	4c c0       	rjmp	.+152    	; 0x77a <forceL+0xd6>
			state = STATE_RUNNING;
 6e2:	81 e0       	ldi	r24, 0x01	; 1
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <state+0x1>
 6ea:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <state>
			forceCount=0;                           //강제 회전하다 라인이 잡히면 트랙 타기
 6ee:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <__data_end+0x1>
 6f2:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <__data_end>
 6f6:	41 c0       	rjmp	.+130    	; 0x77a <forceL+0xd6>
		}
		}else{
		if(timeNum<80){
 6f8:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <timeNum>
 6fc:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <timeNum+0x1>
 700:	80 35       	cpi	r24, 0x50	; 80
 702:	91 05       	cpc	r25, r1
 704:	c0 f4       	brcc	.+48     	; 0x736 <forceL+0x92>
			motor(STRAIGHT,0);
 706:	60 e0       	ldi	r22, 0x00	; 0
 708:	80 e0       	ldi	r24, 0x00	; 0
 70a:	fc dd       	rcall	.-1032   	; 0x304 <motor>
			forceCount++;
 70c:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
 710:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
 714:	01 96       	adiw	r24, 0x01	; 1
 716:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <__data_end+0x1>
 71a:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
			if(forceCount > straightLength){
 71e:	e8 16       	cp	r14, r24
 720:	f9 06       	cpc	r15, r25
 722:	5c f5       	brge	.+86     	; 0x77a <forceL+0xd6>
				forceRightSign = 0;
 724:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <forceRightSign>
				forceLeftSign = 0;
 728:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <forceLeftSign>
				forceCount = 0;
 72c:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <__data_end+0x1>
 730:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <__data_end>
 734:	22 c0       	rjmp	.+68     	; 0x77a <forceL+0xd6>
			}
			}else if(sensor == 0x00 || sensor == 0x01 || sensor == 0x08){
 736:	22 30       	cpi	r18, 0x02	; 2
 738:	10 f0       	brcs	.+4      	; 0x73e <forceL+0x9a>
 73a:	28 30       	cpi	r18, 0x08	; 8
 73c:	41 f4       	brne	.+16     	; 0x74e <forceL+0xaa>
			forceRightSign = 0;
 73e:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <forceRightSign>
			forceLeftSign = 0;
 742:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <forceLeftSign>
			motor(LEFT,255);                               //교차로 나타나면 플래그 초기화 하고 강제로 돌림
 746:	6f ef       	ldi	r22, 0xFF	; 255
 748:	82 e0       	ldi	r24, 0x02	; 2
 74a:	dc dd       	rcall	.-1096   	; 0x304 <motor>
 74c:	16 c0       	rjmp	.+44     	; 0x77a <forceL+0xd6>
			}else{
			switch(sensor){
 74e:	2d 30       	cpi	r18, 0x0D	; 13
 750:	69 f0       	breq	.+26     	; 0x76c <forceL+0xc8>
 752:	2f 30       	cpi	r18, 0x0F	; 15
 754:	19 f0       	breq	.+6      	; 0x75c <forceL+0xb8>
 756:	2b 30       	cpi	r18, 0x0B	; 11
 758:	69 f4       	brne	.+26     	; 0x774 <forceL+0xd0>
				case 0x0f:
				motor(STRAIGHT,0);
 75a:	04 c0       	rjmp	.+8      	; 0x764 <forceL+0xc0>
 75c:	60 e0       	ldi	r22, 0x00	; 0
 75e:	80 e0       	ldi	r24, 0x00	; 0
				break;
 760:	d1 dd       	rcall	.-1118   	; 0x304 <motor>
				case 0x0b:{                      //1011 -- 하나걸림 좌회전
					motor(LEFT,1);
 762:	0b c0       	rjmp	.+22     	; 0x77a <forceL+0xd6>
 764:	61 e0       	ldi	r22, 0x01	; 1
 766:	82 e0       	ldi	r24, 0x02	; 2
					break;
 768:	cd dd       	rcall	.-1126   	; 0x304 <motor>
				}
				case 0x0d:{                      //1101 -- 하나걸림 -우회전
					motor(RIGHT,1);
 76a:	07 c0       	rjmp	.+14     	; 0x77a <forceL+0xd6>
 76c:	61 e0       	ldi	r22, 0x01	; 1
 76e:	81 e0       	ldi	r24, 0x01	; 1
					break;
 770:	c9 dd       	rcall	.-1134   	; 0x304 <motor>
				}
				default:
				motor(STRAIGHT,0);
 772:	03 c0       	rjmp	.+6      	; 0x77a <forceL+0xd6>
 774:	60 e0       	ldi	r22, 0x00	; 0
 776:	80 e0       	ldi	r24, 0x00	; 0
 778:	c5 dd       	rcall	.-1142   	; 0x304 <motor>
			}
		}                                      //교차로 들어가기 전까지는 무조껀 직진
	}
}
 77a:	cf 91       	pop	r28
 77c:	1f 91       	pop	r17
 77e:	0f 91       	pop	r16
 780:	ff 90       	pop	r15
 782:	ef 90       	pop	r14
 784:	08 95       	ret

00000786 <__vector_15>:


ISR(TIMER0_COMP_vect)  //OCR0와 카운터 비교해서 실행됨. 즉 모터의 펄스 간격(속도)가 ocr0에 따라 가변
{
 786:	1f 92       	push	r1
 788:	0f 92       	push	r0
 78a:	0f b6       	in	r0, 0x3f	; 63
 78c:	0f 92       	push	r0
 78e:	11 24       	eor	r1, r1
 790:	0b b6       	in	r0, 0x3b	; 59
 792:	0f 92       	push	r0
 794:	2f 93       	push	r18
 796:	3f 93       	push	r19
 798:	4f 93       	push	r20
 79a:	5f 93       	push	r21
 79c:	6f 93       	push	r22
 79e:	7f 93       	push	r23
 7a0:	8f 93       	push	r24
 7a2:	9f 93       	push	r25
 7a4:	af 93       	push	r26
 7a6:	bf 93       	push	r27
 7a8:	cf 93       	push	r28
 7aa:	ef 93       	push	r30
 7ac:	ff 93       	push	r31
	if(countTimeStop < 1000){
 7ae:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 7b2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 7b6:	88 3e       	cpi	r24, 0xE8	; 232
 7b8:	23 e0       	ldi	r18, 0x03	; 3
 7ba:	92 07       	cpc	r25, r18
 7bc:	2c f4       	brge	.+10     	; 0x7c8 <__vector_15+0x42>
		countTimeStop++;
 7be:	01 96       	adiw	r24, 0x01	; 1
 7c0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 7c4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	}
    char sensor = SENSOR_PORT & 0x0F; //센서값 읽기
 7c8:	c3 b3       	in	r28, 0x13	; 19
 7ca:	cf 70       	andi	r28, 0x0F	; 15
	
    if(state == STATE_FORCE_RIGHT){                                 //-강제회전
 7cc:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <state>
 7d0:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <state+0x1>
 7d4:	82 30       	cpi	r24, 0x02	; 2
 7d6:	91 05       	cpc	r25, r1
 7d8:	59 f4       	brne	.+22     	; 0x7f0 <__vector_15+0x6a>
		speedDown(3);
 7da:	83 e0       	ldi	r24, 0x03	; 3
 7dc:	90 e0       	ldi	r25, 0x00	; 0
 7de:	db de       	rcall	.-586    	; 0x596 <speedDown>
        
        forceR(240,80,3,sensor);  //default
 7e0:	2c 2f       	mov	r18, r28
 7e2:	43 e0       	ldi	r20, 0x03	; 3
 7e4:	60 e5       	ldi	r22, 0x50	; 80
 7e6:	70 e0       	ldi	r23, 0x00	; 0
 7e8:	80 ef       	ldi	r24, 0xF0	; 240
 7ea:	90 e0       	ldi	r25, 0x00	; 0
 7ec:	ea de       	rcall	.-556    	; 0x5c2 <forceR>
 7ee:	45 c0       	rjmp	.+138    	; 0x87a <__vector_15+0xf4>
						motor(STRAIGHT,0);
				}
			}                                      //교차로 들어가기 전까지는 무조껀 직진
        }
        */
    }else if(state == STATE_FORCE_LEFT){                            //-강제회전
 7f0:	83 30       	cpi	r24, 0x03	; 3
 7f2:	91 05       	cpc	r25, r1
 7f4:	59 f4       	brne	.+22     	; 0x80c <__vector_15+0x86>
		speedDown(3);
 7f6:	83 e0       	ldi	r24, 0x03	; 3
 7f8:	90 e0       	ldi	r25, 0x00	; 0
 7fa:	cd de       	rcall	.-614    	; 0x596 <speedDown>
        //forceLeftSign이 초기화되면
        
        forceL(240,80,3,sensor);  //default
 7fc:	2c 2f       	mov	r18, r28
 7fe:	43 e0       	ldi	r20, 0x03	; 3
 800:	60 e5       	ldi	r22, 0x50	; 80
 802:	70 e0       	ldi	r23, 0x00	; 0
 804:	80 ef       	ldi	r24, 0xF0	; 240
 806:	90 e0       	ldi	r25, 0x00	; 0
 808:	4d df       	rcall	.-358    	; 0x6a4 <forceL>
 80a:	37 c0       	rjmp	.+110    	; 0x87a <__vector_15+0xf4>
						motor(STRAIGHT,0);
				}                                        //교차로 들어가기 전까지는 무조껀 직진
			}
        }
        */
    }else if(state == STATE_CALIB_RIGHT){                           //-교차로를 틀어져서 왼쪽으로 들어갈때 칼리브레이션
 80c:	84 30       	cpi	r24, 0x04	; 4
 80e:	91 05       	cpc	r25, r1
 810:	a9 f4       	brne	.+42     	; 0x83c <__vector_15+0xb6>
        if(sensor == 0x0b||sensor == 0x0d){                         //레일 위로 돌아가면 종료
 812:	cb 30       	cpi	r28, 0x0B	; 11
 814:	11 f0       	breq	.+4      	; 0x81a <__vector_15+0x94>
 816:	cd 30       	cpi	r28, 0x0D	; 13
 818:	39 f4       	brne	.+14     	; 0x828 <__vector_15+0xa2>
            state = STATE_RUNNING;
 81a:	81 e0       	ldi	r24, 0x01	; 1
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <state+0x1>
 822:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <state>
 826:	29 c0       	rjmp	.+82     	; 0x87a <__vector_15+0xf4>
        }else if(sensor == 0x0f){                                   //하나도 안걸릴때 일딴 오른쪽으로 돌림
 828:	cf 30       	cpi	r28, 0x0F	; 15
            motor(RIGHT,3);
 82a:	21 f4       	brne	.+8      	; 0x834 <__vector_15+0xae>
 82c:	63 e0       	ldi	r22, 0x03	; 3
 82e:	81 e0       	ldi	r24, 0x01	; 1
 830:	69 dd       	rcall	.-1326   	; 0x304 <motor>
        }else{                                                      //교차로를 나오기 전까지는 무조껀 직진
            motor(STRAIGHT,0);
 832:	23 c0       	rjmp	.+70     	; 0x87a <__vector_15+0xf4>
 834:	60 e0       	ldi	r22, 0x00	; 0
 836:	80 e0       	ldi	r24, 0x00	; 0
 838:	65 dd       	rcall	.-1334   	; 0x304 <motor>
 83a:	1f c0       	rjmp	.+62     	; 0x87a <__vector_15+0xf4>
        }
    }else if(state == STATE_CALIB_LEFT){                            //-교차로를 틀어져서 오른쪽으로 들어갈때 칼리브레이션
 83c:	85 30       	cpi	r24, 0x05	; 5
 83e:	91 05       	cpc	r25, r1
 840:	a9 f4       	brne	.+42     	; 0x86c <__vector_15+0xe6>
        if(sensor == 0x0b||sensor == 0x0d){                         //레일 위로 돌아가면 종료
 842:	cb 30       	cpi	r28, 0x0B	; 11
 844:	11 f0       	breq	.+4      	; 0x84a <__vector_15+0xc4>
 846:	cd 30       	cpi	r28, 0x0D	; 13
 848:	39 f4       	brne	.+14     	; 0x858 <__vector_15+0xd2>
            state = STATE_RUNNING;
 84a:	81 e0       	ldi	r24, 0x01	; 1
 84c:	90 e0       	ldi	r25, 0x00	; 0
 84e:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <state+0x1>
 852:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <state>
        }else if(sensor == 0x0f){                                   //하나도 안걸릴때 일딴 오른쪽으로 돌림
 856:	11 c0       	rjmp	.+34     	; 0x87a <__vector_15+0xf4>
 858:	cf 30       	cpi	r28, 0x0F	; 15
            motor(LEFT,3);
 85a:	21 f4       	brne	.+8      	; 0x864 <__vector_15+0xde>
 85c:	63 e0       	ldi	r22, 0x03	; 3
 85e:	82 e0       	ldi	r24, 0x02	; 2
 860:	51 dd       	rcall	.-1374   	; 0x304 <motor>
        }else{                                                      //교차로를 나오기 전까지는 무조껀 직진
            motor(STRAIGHT,0);
 862:	0b c0       	rjmp	.+22     	; 0x87a <__vector_15+0xf4>
 864:	60 e0       	ldi	r22, 0x00	; 0
 866:	80 e0       	ldi	r24, 0x00	; 0
        }
    }else if(state == STATE_RUNNING){
 868:	4d dd       	rcall	.-1382   	; 0x304 <motor>
 86a:	07 c0       	rjmp	.+14     	; 0x87a <__vector_15+0xf4>
        speedUp(7);//숫자가 낮으면 더 빠르게 가속
 86c:	01 97       	sbiw	r24, 0x01	; 1
 86e:	29 f4       	brne	.+10     	; 0x87a <__vector_15+0xf4>
 870:	87 e0       	ldi	r24, 0x07	; 7
 872:	90 e0       	ldi	r25, 0x00	; 0
        sensorScan(sensor);                    //일반적인 라인 팔로잉 상태
 874:	75 de       	rcall	.-790    	; 0x560 <speedUp>
 876:	8c 2f       	mov	r24, r28
 878:	e1 dd       	rcall	.-1086   	; 0x43c <sensorScan>
    }
}
 87a:	ff 91       	pop	r31
 87c:	ef 91       	pop	r30
 87e:	cf 91       	pop	r28
 880:	bf 91       	pop	r27
 882:	af 91       	pop	r26
 884:	9f 91       	pop	r25
 886:	8f 91       	pop	r24
 888:	7f 91       	pop	r23
 88a:	6f 91       	pop	r22
 88c:	5f 91       	pop	r21
 88e:	4f 91       	pop	r20
 890:	3f 91       	pop	r19
 892:	2f 91       	pop	r18
 894:	0f 90       	pop	r0
 896:	0b be       	out	0x3b, r0	; 59
 898:	0f 90       	pop	r0
 89a:	0f be       	out	0x3f, r0	; 63
 89c:	0f 90       	pop	r0
 89e:	1f 90       	pop	r1
 8a0:	18 95       	reti

000008a2 <main>:
///////////////////interrupt service routine end////////////////////////

int main(void){

    //initialize port and interrupt
    initDevices();
 8a2:	62 dc       	rcall	.-1852   	; 0x168 <initDevices>
    initSegment();
 8a4:	09 dd       	rcall	.-1518   	; 0x2b8 <initSegment>
    initInterrupt();
 8a6:	11 dd       	rcall	.-1502   	; 0x2ca <initInterrupt>
    initTimerInterrupt();
 8a8:	23 dd       	rcall	.-1466   	; 0x2f0 <initTimerInterrupt>
 8aa:	36 dc       	rcall	.-1940   	; 0x118 <initFlag>
    initFlag();
 8ac:	8f ef       	ldi	r24, 0xFF	; 255
 8ae:	81 bb       	out	0x11, r24	; 17
    
    MOTOR_PORT_DDR = 0xff;
 8b0:	78 94       	sei
 8b2:	0f 2e       	mov	r0, r31
    //Global Interrupt Enable
    sei();
 8b4:	f8 ee       	ldi	r31, 0xE8	; 232
    //print 7segment by global variable timeNum
    //timeNum variable is state and OCR0
    while (1){
        //segment print
        for(int i = 0; i < 4; i++){
            printSeg(((state*1000 + timeNum)/exp10[i])%10,3-i); //OCR0를 세그먼트에 출력합니다.
 8b6:	ef 2e       	mov	r14, r31
 8b8:	f3 e0       	ldi	r31, 0x03	; 3
 8ba:	ff 2e       	mov	r15, r31
 8bc:	f0 2d       	mov	r31, r0
 8be:	04 e0       	ldi	r16, 0x04	; 4
 8c0:	11 e0       	ldi	r17, 0x01	; 1
 8c2:	c3 e0       	ldi	r28, 0x03	; 3
 8c4:	d0 e0       	ldi	r29, 0x00	; 0
        sensorScan(sensor);                    //일반적인 라인 팔로잉 상태
    }
}
///////////////////interrupt service routine end////////////////////////

int main(void){
 8c6:	f8 01       	movw	r30, r16
 8c8:	61 91       	ld	r22, Z+
    //print 7segment by global variable timeNum
    //timeNum variable is state and OCR0
    while (1){
        //segment print
        for(int i = 0; i < 4; i++){
            printSeg(((state*1000 + timeNum)/exp10[i])%10,3-i); //OCR0를 세그먼트에 출력합니다.
 8ca:	71 91       	ld	r23, Z+
 8cc:	8f 01       	movw	r16, r30
 8ce:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <state>
 8d2:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <state+0x1>
 8d6:	8e 9d       	mul	r24, r14
 8d8:	90 01       	movw	r18, r0
 8da:	8f 9d       	mul	r24, r15
 8dc:	30 0d       	add	r19, r0
 8de:	9e 9d       	mul	r25, r14
 8e0:	30 0d       	add	r19, r0
 8e2:	11 24       	eor	r1, r1
 8e4:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <timeNum>
 8e8:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <timeNum+0x1>
 8ec:	82 0f       	add	r24, r18
 8ee:	93 1f       	adc	r25, r19
 8f0:	1f d0       	rcall	.+62     	; 0x930 <__udivmodhi4>
 8f2:	ab 01       	movw	r20, r22
 8f4:	9b 01       	movw	r18, r22
 8f6:	ad ec       	ldi	r26, 0xCD	; 205
 8f8:	bc ec       	ldi	r27, 0xCC	; 204
 8fa:	37 d0       	rcall	.+110    	; 0x96a <__umulhisi3>
 8fc:	96 95       	lsr	r25
 8fe:	87 95       	ror	r24
 900:	96 95       	lsr	r25
 902:	87 95       	ror	r24
 904:	96 95       	lsr	r25
 906:	87 95       	ror	r24
 908:	9c 01       	movw	r18, r24
 90a:	22 0f       	add	r18, r18
 90c:	33 1f       	adc	r19, r19
 90e:	88 0f       	add	r24, r24
 910:	99 1f       	adc	r25, r25
 912:	88 0f       	add	r24, r24
 914:	99 1f       	adc	r25, r25
 916:	88 0f       	add	r24, r24
 918:	99 1f       	adc	r25, r25
 91a:	82 0f       	add	r24, r18
 91c:	93 1f       	adc	r25, r19
 91e:	be 01       	movw	r22, r28
 920:	9a 01       	movw	r18, r20
 922:	28 1b       	sub	r18, r24
 924:	39 0b       	sbc	r19, r25
 926:	c9 01       	movw	r24, r18
 928:	b8 dc       	rcall	.-1680   	; 0x29a <printSeg>
 92a:	21 97       	sbiw	r28, 0x01	; 1
 92c:	60 f6       	brcc	.-104    	; 0x8c6 <main+0x24>
 92e:	c7 cf       	rjmp	.-114    	; 0x8be <main+0x1c>

00000930 <__udivmodhi4>:
 930:	aa 1b       	sub	r26, r26
 932:	bb 1b       	sub	r27, r27
 934:	51 e1       	ldi	r21, 0x11	; 17
 936:	07 c0       	rjmp	.+14     	; 0x946 <__udivmodhi4_ep>

00000938 <__udivmodhi4_loop>:
 938:	aa 1f       	adc	r26, r26
 93a:	bb 1f       	adc	r27, r27
 93c:	a6 17       	cp	r26, r22
 93e:	b7 07       	cpc	r27, r23
 940:	10 f0       	brcs	.+4      	; 0x946 <__udivmodhi4_ep>
 942:	a6 1b       	sub	r26, r22
 944:	b7 0b       	sbc	r27, r23

00000946 <__udivmodhi4_ep>:
 946:	88 1f       	adc	r24, r24
 948:	99 1f       	adc	r25, r25
 94a:	5a 95       	dec	r21
 94c:	a9 f7       	brne	.-22     	; 0x938 <__udivmodhi4_loop>
 94e:	80 95       	com	r24
 950:	90 95       	com	r25
 952:	bc 01       	movw	r22, r24
 954:	cd 01       	movw	r24, r26
 956:	08 95       	ret

00000958 <__tablejump2__>:
 958:	ee 0f       	add	r30, r30
 95a:	ff 1f       	adc	r31, r31
 95c:	00 24       	eor	r0, r0
 95e:	00 1c       	adc	r0, r0
 960:	0b be       	out	0x3b, r0	; 59
 962:	07 90       	elpm	r0, Z+
 964:	f6 91       	elpm	r31, Z
 966:	e0 2d       	mov	r30, r0
 968:	09 94       	ijmp

0000096a <__umulhisi3>:
 96a:	a2 9f       	mul	r26, r18
 96c:	b0 01       	movw	r22, r0
 96e:	b3 9f       	mul	r27, r19
 970:	c0 01       	movw	r24, r0
 972:	a3 9f       	mul	r26, r19
 974:	70 0d       	add	r23, r0
 976:	81 1d       	adc	r24, r1
 978:	11 24       	eor	r1, r1
 97a:	91 1d       	adc	r25, r1
 97c:	b2 9f       	mul	r27, r18
 97e:	70 0d       	add	r23, r0
 980:	81 1d       	adc	r24, r1
 982:	11 24       	eor	r1, r1
 984:	91 1d       	adc	r25, r1
 986:	08 95       	ret

00000988 <_exit>:
 988:	f8 94       	cli

0000098a <__stop_program>:
 98a:	ff cf       	rjmp	.-2      	; 0x98a <__stop_program>
