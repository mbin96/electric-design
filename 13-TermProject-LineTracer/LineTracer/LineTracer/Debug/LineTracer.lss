
LineTracer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  000006e0  00000774  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800118  00800118  0000078c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000078c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  000007fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d64  00000000  00000000  0000088c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008b5  00000000  00000000  000015f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007e1  00000000  00000000  00001ea5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000017c  00000000  00000000  00002688  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000056f  00000000  00000000  00002804  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005a1  00000000  00000000  00002d73  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00003314  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	6d c0       	rjmp	.+218    	; 0xdc <__ctors_end>
   2:	00 00       	nop
   4:	88 c0       	rjmp	.+272    	; 0x116 <__bad_interrupt>
   6:	00 00       	nop
   8:	86 c0       	rjmp	.+268    	; 0x116 <__bad_interrupt>
   a:	00 00       	nop
   c:	84 c0       	rjmp	.+264    	; 0x116 <__bad_interrupt>
   e:	00 00       	nop
  10:	82 c0       	rjmp	.+260    	; 0x116 <__bad_interrupt>
  12:	00 00       	nop
  14:	a9 c1       	rjmp	.+850    	; 0x368 <__vector_5>
  16:	00 00       	nop
  18:	93 c1       	rjmp	.+806    	; 0x340 <__vector_6>
  1a:	00 00       	nop
  1c:	7c c0       	rjmp	.+248    	; 0x116 <__bad_interrupt>
  1e:	00 00       	nop
  20:	7a c0       	rjmp	.+244    	; 0x116 <__bad_interrupt>
  22:	00 00       	nop
  24:	78 c0       	rjmp	.+240    	; 0x116 <__bad_interrupt>
  26:	00 00       	nop
  28:	76 c0       	rjmp	.+236    	; 0x116 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	74 c0       	rjmp	.+232    	; 0x116 <__bad_interrupt>
  2e:	00 00       	nop
  30:	72 c0       	rjmp	.+228    	; 0x116 <__bad_interrupt>
  32:	00 00       	nop
  34:	70 c0       	rjmp	.+224    	; 0x116 <__bad_interrupt>
  36:	00 00       	nop
  38:	6e c0       	rjmp	.+220    	; 0x116 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	38 c2       	rjmp	.+1136   	; 0x4ae <__vector_15>
  3e:	00 00       	nop
  40:	6a c0       	rjmp	.+212    	; 0x116 <__bad_interrupt>
  42:	00 00       	nop
  44:	68 c0       	rjmp	.+208    	; 0x116 <__bad_interrupt>
  46:	00 00       	nop
  48:	66 c0       	rjmp	.+204    	; 0x116 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	64 c0       	rjmp	.+200    	; 0x116 <__bad_interrupt>
  4e:	00 00       	nop
  50:	62 c0       	rjmp	.+196    	; 0x116 <__bad_interrupt>
  52:	00 00       	nop
  54:	60 c0       	rjmp	.+192    	; 0x116 <__bad_interrupt>
  56:	00 00       	nop
  58:	5e c0       	rjmp	.+188    	; 0x116 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5c c0       	rjmp	.+184    	; 0x116 <__bad_interrupt>
  5e:	00 00       	nop
  60:	5a c0       	rjmp	.+180    	; 0x116 <__bad_interrupt>
  62:	00 00       	nop
  64:	58 c0       	rjmp	.+176    	; 0x116 <__bad_interrupt>
  66:	00 00       	nop
  68:	56 c0       	rjmp	.+172    	; 0x116 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	54 c0       	rjmp	.+168    	; 0x116 <__bad_interrupt>
  6e:	00 00       	nop
  70:	52 c0       	rjmp	.+164    	; 0x116 <__bad_interrupt>
  72:	00 00       	nop
  74:	50 c0       	rjmp	.+160    	; 0x116 <__bad_interrupt>
  76:	00 00       	nop
  78:	4e c0       	rjmp	.+156    	; 0x116 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4c c0       	rjmp	.+152    	; 0x116 <__bad_interrupt>
  7e:	00 00       	nop
  80:	4a c0       	rjmp	.+148    	; 0x116 <__bad_interrupt>
  82:	00 00       	nop
  84:	48 c0       	rjmp	.+144    	; 0x116 <__bad_interrupt>
  86:	00 00       	nop
  88:	46 c0       	rjmp	.+140    	; 0x116 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	cd 00       	.word	0x00cd	; ????
  8e:	d1 00       	.word	0x00d1	; ????
  90:	cf 00       	.word	0x00cf	; ????
  92:	d5 00       	.word	0x00d5	; ????
  94:	db 00       	.word	0x00db	; ????
  96:	d3 00       	.word	0x00d3	; ????
  98:	db 00       	.word	0x00db	; ????
  9a:	d9 00       	.word	0x00d9	; ????
  9c:	f6 00       	.word	0x00f6	; ????
  9e:	db 00       	.word	0x00db	; ????
  a0:	db 00       	.word	0x00db	; ????
  a2:	d7 00       	.word	0x00d7	; ????
  a4:	e6 00       	.word	0x00e6	; ????
  a6:	ea 00       	.word	0x00ea	; ????
  a8:	e8 00       	.word	0x00e8	; ????
  aa:	ee 00       	.word	0x00ee	; ????
  ac:	f4 00       	.word	0x00f4	; ????
  ae:	ec 00       	.word	0x00ec	; ????
  b0:	f4 00       	.word	0x00f4	; ????
  b2:	f2 00       	.word	0x00f2	; ????
  b4:	f8 00       	.word	0x00f8	; ????
  b6:	f4 00       	.word	0x00f4	; ????
  b8:	f4 00       	.word	0x00f4	; ????
  ba:	f0 00       	.word	0x00f0	; ????
  bc:	4b 02       	muls	r20, r27
  be:	25 02       	muls	r18, r21
  c0:	54 02       	muls	r21, r20
  c2:	54 02       	muls	r21, r20
  c4:	54 02       	muls	r21, r20
  c6:	54 02       	muls	r21, r20
  c8:	1f 02       	muls	r17, r31
  ca:	13 02       	muls	r17, r19
  cc:	38 02       	muls	r19, r24
  ce:	54 02       	muls	r21, r20
  d0:	54 02       	muls	r21, r20
  d2:	0d 02       	muls	r16, r29
  d4:	54 02       	muls	r21, r20
  d6:	10 02       	muls	r17, r16
  d8:	19 02       	muls	r17, r25
  da:	de 01       	movw	r26, r28

000000dc <__ctors_end>:
  dc:	11 24       	eor	r1, r1
  de:	1f be       	out	0x3f, r1	; 63
  e0:	cf ef       	ldi	r28, 0xFF	; 255
  e2:	d0 e1       	ldi	r29, 0x10	; 16
  e4:	de bf       	out	0x3e, r29	; 62
  e6:	cd bf       	out	0x3d, r28	; 61

000000e8 <__do_copy_data>:
  e8:	11 e0       	ldi	r17, 0x01	; 1
  ea:	a0 e0       	ldi	r26, 0x00	; 0
  ec:	b1 e0       	ldi	r27, 0x01	; 1
  ee:	e0 ee       	ldi	r30, 0xE0	; 224
  f0:	f6 e0       	ldi	r31, 0x06	; 6
  f2:	00 e0       	ldi	r16, 0x00	; 0
  f4:	0b bf       	out	0x3b, r16	; 59
  f6:	02 c0       	rjmp	.+4      	; 0xfc <__do_copy_data+0x14>
  f8:	07 90       	elpm	r0, Z+
  fa:	0d 92       	st	X+, r0
  fc:	a8 31       	cpi	r26, 0x18	; 24
  fe:	b1 07       	cpc	r27, r17
 100:	d9 f7       	brne	.-10     	; 0xf8 <__do_copy_data+0x10>

00000102 <__do_clear_bss>:
 102:	21 e0       	ldi	r18, 0x01	; 1
 104:	a8 e1       	ldi	r26, 0x18	; 24
 106:	b1 e0       	ldi	r27, 0x01	; 1
 108:	01 c0       	rjmp	.+2      	; 0x10c <.do_clear_bss_start>

0000010a <.do_clear_bss_loop>:
 10a:	1d 92       	st	X+, r1

0000010c <.do_clear_bss_start>:
 10c:	a4 32       	cpi	r26, 0x24	; 36
 10e:	b2 07       	cpc	r27, r18
 110:	e1 f7       	brne	.-8      	; 0x10a <.do_clear_bss_loop>
 112:	6c d2       	rcall	.+1240   	; 0x5ec <main>
 114:	e3 c2       	rjmp	.+1478   	; 0x6dc <_exit>

00000116 <__bad_interrupt>:
 116:	74 cf       	rjmp	.-280    	; 0x0 <__vectors>

00000118 <initFlag>:
unsigned char forceLeftSign = 0 ;
unsigned char calibLeft = 0;
unsigned char calibRight = 0;

void initFlag(){
    motorForceLeftFlag = 0;
 118:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <motorForceLeftFlag>
    motorForceRightFlag = 0; 
 11c:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <motorForceRightFlag>
    countStopSign = 0;
 120:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <countStopSign>
    stopSign = 0;
 124:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <stopSign>
    forceRightSign = 0;
 128:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <forceRightSign>
    forceLeftSign = 0;
 12c:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <forceLeftSign>
    calibLeft = 0;
 130:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <calibLeft>
    calibRight = 0;
 134:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <__data_end>
 138:	08 95       	ret

0000013a <initPort>:
}

void initPort(void)
{
    PORTA = 0x00;
 13a:	1b ba       	out	0x1b, r1	; 27
    DDRA  = 0x00;
 13c:	1a ba       	out	0x1a, r1	; 26
    PORTB = 0x00;
 13e:	18 ba       	out	0x18, r1	; 24
    DDRB  = 0x00;
 140:	17 ba       	out	0x17, r1	; 23
    PORTC = 0x00;
 142:	15 ba       	out	0x15, r1	; 21
    DDRC  = 0x00;
 144:	14 ba       	out	0x14, r1	; 20
    PORTD = 0x00;
 146:	12 ba       	out	0x12, r1	; 18
    DDRD  = 0xFF;
 148:	8f ef       	ldi	r24, 0xFF	; 255
 14a:	81 bb       	out	0x11, r24	; 17
    PORTE = 0x00;
 14c:	13 b8       	out	0x03, r1	; 3
    DDRE  = 0x00;
 14e:	12 b8       	out	0x02, r1	; 2
    PORTF = 0x00;
 150:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    DDRF  = 0x00;
 154:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    PORTG = 0x00;
 158:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
    DDRG  = 0x03;
 15c:	83 e0       	ldi	r24, 0x03	; 3
 15e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
 162:	08 95       	ret

00000164 <initDevices>:
}

void initDevices(void)
{
    cli(); //disable all interrupts
 164:	f8 94       	cli
    XDIV  = 0x00; //xtal divider
 166:	1c be       	out	0x3c, r1	; 60
    XMCRA = 0x00; //external memory
 168:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
    initPort();
 16c:	e6 df       	rcall	.-52     	; 0x13a <initPort>
    

    MCUCR = 0x00;
 16e:	15 be       	out	0x35, r1	; 53
    EICRA = 0x00; //extended ext ints
 170:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
    EICRB = 0x00; //extended ext ints
 174:	1a be       	out	0x3a, r1	; 58
    EIMSK = 0x00;
 176:	19 be       	out	0x39, r1	; 57
    TIMSK = 0x00; //timer interrupt sources
 178:	17 be       	out	0x37, r1	; 55
    ETIMSK = 0x00; //extended timer interrupt sources
 17a:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <__TEXT_REGION_LENGTH__+0x7e007d>
    sei(); //re-enable interrupts
 17e:	78 94       	sei
 180:	08 95       	ret

00000182 <LEFTmotorOneClock>:

// Stepping Motor drive---------------------------
//1-2상 구동
unsigned char  LEFTmotorOneClock(unsigned char step, char dir)
{    
    step = step & 0x0f;
 182:	8f 70       	andi	r24, 0x0F	; 15
    if(dir){
 184:	66 23       	and	r22, r22
 186:	c9 f0       	breq	.+50     	; 0x1ba <LEFTmotorOneClock+0x38>
        switch(step){
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	fc 01       	movw	r30, r24
 18c:	31 97       	sbiw	r30, 0x01	; 1
 18e:	ec 30       	cpi	r30, 0x0C	; 12
 190:	f1 05       	cpc	r31, r1
 192:	88 f4       	brcc	.+34     	; 0x1b6 <LEFTmotorOneClock+0x34>
 194:	ea 5b       	subi	r30, 0xBA	; 186
 196:	ff 4f       	sbci	r31, 0xFF	; 255
 198:	89 c2       	rjmp	.+1298   	; 0x6ac <__tablejump2__>
            case 0x09: step=0x01; break;
            case 0x01: step=0x03; break;
 19a:	83 e0       	ldi	r24, 0x03	; 3
 19c:	08 95       	ret
            case 0x03: step=0x02; break;
 19e:	82 e0       	ldi	r24, 0x02	; 2
 1a0:	08 95       	ret
            case 0x02: step=0x06; break;
 1a2:	86 e0       	ldi	r24, 0x06	; 6
 1a4:	08 95       	ret
            case 0x06: step=0x04; break;
 1a6:	84 e0       	ldi	r24, 0x04	; 4
 1a8:	08 95       	ret
            case 0x04: step=0x0c; break;
 1aa:	8c e0       	ldi	r24, 0x0C	; 12
 1ac:	08 95       	ret
            case 0x0c: step=0x08; break;
 1ae:	88 e0       	ldi	r24, 0x08	; 8
 1b0:	08 95       	ret
            case 0x08: step=0x09; break;
 1b2:	89 e0       	ldi	r24, 0x09	; 9
 1b4:	08 95       	ret
            default: step=0x0c; break;
 1b6:	8c e0       	ldi	r24, 0x0C	; 12
 1b8:	08 95       	ret
        }
    }else{
        switch(step){
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	fc 01       	movw	r30, r24
 1be:	31 97       	sbiw	r30, 0x01	; 1
 1c0:	ec 30       	cpi	r30, 0x0C	; 12
 1c2:	f1 05       	cpc	r31, r1
 1c4:	88 f4       	brcc	.+34     	; 0x1e8 <LEFTmotorOneClock+0x66>
 1c6:	ee 5a       	subi	r30, 0xAE	; 174
 1c8:	ff 4f       	sbci	r31, 0xFF	; 255
 1ca:	70 c2       	rjmp	.+1248   	; 0x6ac <__tablejump2__>
            case 0x09: step=0x08; break;
            case 0x01: step=0x09; break;
 1cc:	89 e0       	ldi	r24, 0x09	; 9
 1ce:	08 95       	ret
            case 0x03: step=0x01; break;
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	08 95       	ret
            case 0x02: step=0x03; break;
 1d4:	83 e0       	ldi	r24, 0x03	; 3
 1d6:	08 95       	ret
            case 0x06: step=0x02; break;
 1d8:	82 e0       	ldi	r24, 0x02	; 2
 1da:	08 95       	ret
            case 0x04: step=0x06; break;
 1dc:	86 e0       	ldi	r24, 0x06	; 6
 1de:	08 95       	ret
            case 0x0c: step=0x04; break;
 1e0:	84 e0       	ldi	r24, 0x04	; 4
 1e2:	08 95       	ret
            case 0x08: step=0x0c; break;
 1e4:	8c e0       	ldi	r24, 0x0C	; 12
 1e6:	08 95       	ret
            default: step=0x0c; break;
 1e8:	8c e0       	ldi	r24, 0x0C	; 12
 1ea:	08 95       	ret
unsigned char  LEFTmotorOneClock(unsigned char step, char dir)
{    
    step = step & 0x0f;
    if(dir){
        switch(step){
            case 0x09: step=0x01; break;
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	08 95       	ret
            case 0x08: step=0x09; break;
            default: step=0x0c; break;
        }
    }else{
        switch(step){
            case 0x09: step=0x08; break;
 1f0:	88 e0       	ldi	r24, 0x08	; 8
            default: step=0x0c; break;
        }
    }
    return step;

}
 1f2:	08 95       	ret

000001f4 <RIGHTmotorOneClock>:

unsigned char  RIGHTmotorOneClock(unsigned char step, char dir)
{    
    step = step & 0xf0;
 1f4:	80 7f       	andi	r24, 0xF0	; 240
    if(dir){
 1f6:	66 23       	and	r22, r22
 1f8:	29 f1       	breq	.+74     	; 0x244 <RIGHTmotorOneClock+0x50>
        switch(step){//후진
 1fa:	80 34       	cpi	r24, 0x40	; 64
 1fc:	d9 f0       	breq	.+54     	; 0x234 <RIGHTmotorOneClock+0x40>
 1fe:	38 f4       	brcc	.+14     	; 0x20e <RIGHTmotorOneClock+0x1a>
 200:	80 32       	cpi	r24, 0x20	; 32
 202:	a1 f0       	breq	.+40     	; 0x22c <RIGHTmotorOneClock+0x38>
 204:	80 33       	cpi	r24, 0x30	; 48
 206:	81 f0       	breq	.+32     	; 0x228 <RIGHTmotorOneClock+0x34>
 208:	80 31       	cpi	r24, 0x10	; 16
 20a:	d1 f4       	brne	.+52     	; 0x240 <RIGHTmotorOneClock+0x4c>
 20c:	0b c0       	rjmp	.+22     	; 0x224 <RIGHTmotorOneClock+0x30>
 20e:	80 38       	cpi	r24, 0x80	; 128
 210:	a9 f0       	breq	.+42     	; 0x23c <RIGHTmotorOneClock+0x48>
 212:	18 f4       	brcc	.+6      	; 0x21a <RIGHTmotorOneClock+0x26>
 214:	80 36       	cpi	r24, 0x60	; 96
 216:	61 f0       	breq	.+24     	; 0x230 <RIGHTmotorOneClock+0x3c>
 218:	13 c0       	rjmp	.+38     	; 0x240 <RIGHTmotorOneClock+0x4c>
 21a:	80 39       	cpi	r24, 0x90	; 144
 21c:	c1 f1       	breq	.+112    	; 0x28e <RIGHTmotorOneClock+0x9a>
 21e:	80 3c       	cpi	r24, 0xC0	; 192
 220:	59 f0       	breq	.+22     	; 0x238 <RIGHTmotorOneClock+0x44>
 222:	0e c0       	rjmp	.+28     	; 0x240 <RIGHTmotorOneClock+0x4c>
            case 0x90: step=0x10; break;
            case 0x10: step=0x30; break;
 224:	80 e3       	ldi	r24, 0x30	; 48
 226:	08 95       	ret
            case 0x30: step=0x20; break;
 228:	80 e2       	ldi	r24, 0x20	; 32
 22a:	08 95       	ret
            case 0x20: step=0x60; break;
 22c:	80 e6       	ldi	r24, 0x60	; 96
 22e:	08 95       	ret
            case 0x60: step=0x40; break;
 230:	80 e4       	ldi	r24, 0x40	; 64
 232:	08 95       	ret
            case 0x40: step=0xc0; break;
 234:	80 ec       	ldi	r24, 0xC0	; 192
 236:	08 95       	ret
            case 0xc0: step=0x80; break;
 238:	80 e8       	ldi	r24, 0x80	; 128
 23a:	08 95       	ret
            case 0x80: step=0x90; break;
 23c:	80 e9       	ldi	r24, 0x90	; 144
 23e:	08 95       	ret
            default: step=0xc0; break;
 240:	80 ec       	ldi	r24, 0xC0	; 192
 242:	08 95       	ret
        }
    }else{
        switch(step){//전진
 244:	80 34       	cpi	r24, 0x40	; 64
 246:	d9 f0       	breq	.+54     	; 0x27e <RIGHTmotorOneClock+0x8a>
 248:	38 f4       	brcc	.+14     	; 0x258 <RIGHTmotorOneClock+0x64>
 24a:	80 32       	cpi	r24, 0x20	; 32
 24c:	a1 f0       	breq	.+40     	; 0x276 <RIGHTmotorOneClock+0x82>
 24e:	80 33       	cpi	r24, 0x30	; 48
 250:	81 f0       	breq	.+32     	; 0x272 <RIGHTmotorOneClock+0x7e>
 252:	80 31       	cpi	r24, 0x10	; 16
 254:	d1 f4       	brne	.+52     	; 0x28a <RIGHTmotorOneClock+0x96>
 256:	0b c0       	rjmp	.+22     	; 0x26e <RIGHTmotorOneClock+0x7a>
 258:	80 38       	cpi	r24, 0x80	; 128
 25a:	a9 f0       	breq	.+42     	; 0x286 <RIGHTmotorOneClock+0x92>
 25c:	18 f4       	brcc	.+6      	; 0x264 <RIGHTmotorOneClock+0x70>
 25e:	80 36       	cpi	r24, 0x60	; 96
 260:	61 f0       	breq	.+24     	; 0x27a <RIGHTmotorOneClock+0x86>
 262:	13 c0       	rjmp	.+38     	; 0x28a <RIGHTmotorOneClock+0x96>
 264:	80 39       	cpi	r24, 0x90	; 144
 266:	a9 f0       	breq	.+42     	; 0x292 <RIGHTmotorOneClock+0x9e>
 268:	80 3c       	cpi	r24, 0xC0	; 192
 26a:	59 f0       	breq	.+22     	; 0x282 <RIGHTmotorOneClock+0x8e>
 26c:	0e c0       	rjmp	.+28     	; 0x28a <RIGHTmotorOneClock+0x96>
            case 0x90: step=0x80; break;//1001
            case 0x10: step=0x90; break;//0001
 26e:	80 e9       	ldi	r24, 0x90	; 144
 270:	08 95       	ret
            case 0x30: step=0x10; break;//0011
 272:	80 e1       	ldi	r24, 0x10	; 16
 274:	08 95       	ret
            case 0x20: step=0x30; break;//0010
 276:	80 e3       	ldi	r24, 0x30	; 48
 278:	08 95       	ret
            case 0x60: step=0x20; break;//0110
 27a:	80 e2       	ldi	r24, 0x20	; 32
 27c:	08 95       	ret
            case 0x40: step=0x60; break;//0100
 27e:	80 e6       	ldi	r24, 0x60	; 96
 280:	08 95       	ret
            case 0xc0: step=0x40; break;//1100
 282:	80 e4       	ldi	r24, 0x40	; 64
 284:	08 95       	ret
            case 0x80: step=0xc0; break;//1000
 286:	80 ec       	ldi	r24, 0xC0	; 192
 288:	08 95       	ret
            default: step=0xc0; break;
 28a:	80 ec       	ldi	r24, 0xC0	; 192
 28c:	08 95       	ret
unsigned char  RIGHTmotorOneClock(unsigned char step, char dir)
{    
    step = step & 0xf0;
    if(dir){
        switch(step){//후진
            case 0x90: step=0x10; break;
 28e:	80 e1       	ldi	r24, 0x10	; 16
 290:	08 95       	ret
            case 0x80: step=0x90; break;
            default: step=0xc0; break;
        }
    }else{
        switch(step){//전진
            case 0x90: step=0x80; break;//1001
 292:	80 e8       	ldi	r24, 0x80	; 128
            case 0x80: step=0xc0; break;//1000
            default: step=0xc0; break;
        }
    }
    return step;
}
 294:	08 95       	ret

00000296 <printSeg>:
void printSeg(int segNum, int segDigit){
    //by schematic, PORTE must being clear before set segment's digit and led.
    //because circuit use same port(A) to set segment's digit and led by latch.

    //set segment digit to print
    PORTA = FND_SEGPOS[segDigit];
 296:	fb 01       	movw	r30, r22
 298:	e6 5f       	subi	r30, 0xF6	; 246
 29a:	fe 4f       	sbci	r31, 0xFE	; 254
 29c:	20 81       	ld	r18, Z
 29e:	2b bb       	out	0x1b, r18	; 27
    PORTE |= 0x04; //set 1 segment digit latch
 2a0:	1a 9a       	sbi	0x03, 2	; 3
    PORTE &= ~(0x04); //clear LED_CTL(PE2)
 2a2:	1a 98       	cbi	0x03, 2	; 3

    //print num at segment
    PORTA = FND_SEGNP[segNum]; //print with out decimal point
 2a4:	82 5f       	subi	r24, 0xF2	; 242
 2a6:	9e 4f       	sbci	r25, 0xFE	; 254
 2a8:	fc 01       	movw	r30, r24
 2aa:	80 81       	ld	r24, Z
 2ac:	8b bb       	out	0x1b, r24	; 27
    PORTE |= 0x08; //set 1 segment led latch
 2ae:	1b 9a       	sbi	0x03, 3	; 3
    PORTE &= ~(0x08); //clear LED_DATA(PE3)
 2b0:	1b 98       	cbi	0x03, 3	; 3
 2b2:	08 95       	ret

000002b4 <initSegment>:
}

void initSegment(){
    //initialize port A and E
    DDRA = 0xFF;    //set portA(7:0) to output
 2b4:	8f ef       	ldi	r24, 0xFF	; 255
 2b6:	8a bb       	out	0x1a, r24	; 26
    DDRE |= 0x0C;   //set portE(3:2) to output
 2b8:	82 b1       	in	r24, 0x02	; 2
 2ba:	8c 60       	ori	r24, 0x0C	; 12
 2bc:	82 b9       	out	0x02, r24	; 2
    PORTE |= 0x04;  //init portE(3)
 2be:	1a 9a       	sbi	0x03, 2	; 3
    PORTA = 0x0F;   //init portA(3:0)
 2c0:	8f e0       	ldi	r24, 0x0F	; 15
 2c2:	8b bb       	out	0x1b, r24	; 27
 2c4:	08 95       	ret

000002c6 <initInterrupt>:
}

void initInterrupt(){
        //external interrupt int4 enable
        //int4 pin falling edge활성화
        EICRB &= ~(1 << ISC40);
 2c6:	8a b7       	in	r24, 0x3a	; 58
 2c8:	8e 7f       	andi	r24, 0xFE	; 254
 2ca:	8a bf       	out	0x3a, r24	; 58
        EICRB |= 1 << ISC41; //same to EICRB = 0d00000010
 2cc:	8a b7       	in	r24, 0x3a	; 58
 2ce:	82 60       	ori	r24, 0x02	; 2
 2d0:	8a bf       	out	0x3a, r24	; 58
        //enable external interrupt 4
        EIMSK |= 1 << INT4;
 2d2:	89 b7       	in	r24, 0x39	; 57
 2d4:	80 61       	ori	r24, 0x10	; 16
 2d6:	89 bf       	out	0x39, r24	; 57

        //external interrupt int5 enable
        //int5 pin falling edge활성화
        EICRB &= ~(1 << ISC50); //clear
 2d8:	8a b7       	in	r24, 0x3a	; 58
 2da:	8b 7f       	andi	r24, 0xFB	; 251
 2dc:	8a bf       	out	0x3a, r24	; 58
        EICRB |= 1 << ISC51;    //set
 2de:	8a b7       	in	r24, 0x3a	; 58
 2e0:	88 60       	ori	r24, 0x08	; 8
 2e2:	8a bf       	out	0x3a, r24	; 58
        //enable external interrupt 5
        EIMSK |= 1 << INT5;
 2e4:	89 b7       	in	r24, 0x39	; 57
 2e6:	80 62       	ori	r24, 0x20	; 32
 2e8:	89 bf       	out	0x39, r24	; 57
 2ea:	08 95       	ret

000002ec <initTimerInterrupt>:
}

void initTimerInterrupt()
{
    TCCR0 = 0x0e; //0d00001110//CTC mode and 256 prescaling
 2ec:	8e e0       	ldi	r24, 0x0E	; 14
 2ee:	83 bf       	out	0x33, r24	; 51
    TCNT0 = 0x00; //clear count value register. TCNT0 increase count from 0, clear on 63
 2f0:	12 be       	out	0x32, r1	; 50
    TIMSK = 0x02; //enable Timer/Counter0 compare match interrupt, disable overflow interrupt
 2f2:	82 e0       	ldi	r24, 0x02	; 2
 2f4:	87 bf       	out	0x37, r24	; 55
    TIFR = 0xff;  //write logic 1 on flag for clear register
 2f6:	8f ef       	ldi	r24, 0xFF	; 255
 2f8:	86 bf       	out	0x36, r24	; 54
    OCR0 = 0x64;  //compare 100
 2fa:	84 e6       	ldi	r24, 0x64	; 100
 2fc:	81 bf       	out	0x31, r24	; 49
 2fe:	08 95       	ret

00000300 <motor>:
}

//모터 구동
void motor(char direction){

    switch(direction){
 300:	81 30       	cpi	r24, 0x01	; 1
 302:	51 f0       	breq	.+20     	; 0x318 <motor+0x18>
 304:	18 f0       	brcs	.+6      	; 0x30c <motor+0xc>
 306:	82 30       	cpi	r24, 0x02	; 2
 308:	71 f0       	breq	.+28     	; 0x326 <motor+0x26>
 30a:	13 c0       	rjmp	.+38     	; 0x332 <motor+0x32>
        case STRAIGHT : 
            stepRight = RIGHTmotorOneClock(stepRight, 1);  //break 없으니까 밑에꺼도 실행됨
 30c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 310:	61 e0       	ldi	r22, 0x01	; 1
 312:	70 df       	rcall	.-288    	; 0x1f4 <RIGHTmotorOneClock>
 314:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
        case RIGHT : 
            stepLeft = LEFTmotorOneClock(stepLeft, 0);
 318:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <stepLeft>
 31c:	60 e0       	ldi	r22, 0x00	; 0
 31e:	31 df       	rcall	.-414    	; 0x182 <LEFTmotorOneClock>
 320:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <stepLeft>
            break;
 324:	06 c0       	rjmp	.+12     	; 0x332 <motor+0x32>
        case LEFT  : 
            stepRight = RIGHTmotorOneClock(stepRight, 1);
 326:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 32a:	61 e0       	ldi	r22, 0x01	; 1
 32c:	63 df       	rcall	.-314    	; 0x1f4 <RIGHTmotorOneClock>
 32e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
            break;
    }
    MOTOR_PORT = stepLeft|stepRight;
 332:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <stepLeft>
 336:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 33a:	89 2b       	or	r24, r25
 33c:	82 bb       	out	0x12, r24	; 18
 33e:	08 95       	ret

00000340 <__vector_6>:
}

//출발
ISR(INT5_vect){
 340:	1f 92       	push	r1
 342:	0f 92       	push	r0
 344:	0f b6       	in	r0, 0x3f	; 63
 346:	0f 92       	push	r0
 348:	11 24       	eor	r1, r1
 34a:	8f 93       	push	r24
 34c:	9f 93       	push	r25
    state = STATE_RUNNING;
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <state+0x1>
 356:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <state>
}
 35a:	9f 91       	pop	r25
 35c:	8f 91       	pop	r24
 35e:	0f 90       	pop	r0
 360:	0f be       	out	0x3f, r0	; 63
 362:	0f 90       	pop	r0
 364:	1f 90       	pop	r1
 366:	18 95       	reti

00000368 <__vector_5>:

//속도조절
ISR(INT4_vect){
 368:	1f 92       	push	r1
 36a:	0f 92       	push	r0
 36c:	0f b6       	in	r0, 0x3f	; 63
 36e:	0f 92       	push	r0
 370:	11 24       	eor	r1, r1
 372:	8f 93       	push	r24
 374:	9f 93       	push	r25
    //when interrupt 4 excu, increase num
    timeNum = OCR0;
 376:	81 b7       	in	r24, 0x31	; 49
    timeNum -= 5;
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	05 97       	sbiw	r24, 0x05	; 5
    if (timeNum<30){
 37c:	8e 31       	cpi	r24, 0x1E	; 30
 37e:	91 05       	cpc	r25, r1
 380:	28 f0       	brcs	.+10     	; 0x38c <__vector_5+0x24>

//속도조절
ISR(INT4_vect){
    //when interrupt 4 excu, increase num
    timeNum = OCR0;
    timeNum -= 5;
 382:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timeNum+0x1>
 386:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timeNum>
 38a:	06 c0       	rjmp	.+12     	; 0x398 <__vector_5+0x30>
    if (timeNum<30){
        timeNum = 100;
 38c:	84 e6       	ldi	r24, 0x64	; 100
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timeNum+0x1>
 394:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timeNum>
    }
    OCR0 = timeNum;
 398:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <timeNum>
 39c:	81 bf       	out	0x31, r24	; 49
}
 39e:	9f 91       	pop	r25
 3a0:	8f 91       	pop	r24
 3a2:	0f 90       	pop	r0
 3a4:	0f be       	out	0x3f, r0	; 63
 3a6:	0f 90       	pop	r0
 3a8:	1f 90       	pop	r1
 3aa:	18 95       	reti

000003ac <sensorScan>:



void sensorScan(int sensor){
    switch(sensor){
 3ac:	80 31       	cpi	r24, 0x10	; 16
 3ae:	91 05       	cpc	r25, r1
 3b0:	08 f0       	brcs	.+2      	; 0x3b4 <sensorScan+0x8>
 3b2:	7a c0       	rjmp	.+244    	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
 3b4:	fc 01       	movw	r30, r24
 3b6:	e2 5a       	subi	r30, 0xA2	; 162
 3b8:	ff 4f       	sbci	r31, 0xFF	; 255
 3ba:	78 c1       	rjmp	.+752    	; 0x6ac <__tablejump2__>
        case 0x0f:{                      //1111 - 걸리는거없음 직진
            //정지신호 있을때
            if(stopSign==1){            // stop sign(0110)이 있은뒤 사라지면 카운트
 3bc:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <stopSign>
 3c0:	81 30       	cpi	r24, 0x01	; 1
 3c2:	99 f4       	brne	.+38     	; 0x3ea <sensorScan+0x3e>
                forceRightSign = forceLeftSign = 0; //정지신호가 양쪽 조금씩 다르게 들어간경우 예외처리
 3c4:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <forceLeftSign>
 3c8:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <forceRightSign>
                stopSign=0;
 3cc:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <stopSign>
                countStopSign++;
 3d0:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <countStopSign>
 3d4:	8f 5f       	subi	r24, 0xFF	; 255
 3d6:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <countStopSign>

                if(countStopSign >2){    //stopsign 3번 나오면 종료
 3da:	83 30       	cpi	r24, 0x03	; 3
 3dc:	d8 f0       	brcs	.+54     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
                    state = STATE_INIT;
 3de:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <state+0x1>
 3e2:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <state>
                    initFlag();
 3e6:	98 ce       	rjmp	.-720    	; 0x118 <initFlag>
                    return;
 3e8:	08 95       	ret
                }
            }else if(forceRightSign){
 3ea:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <forceRightSign>
 3ee:	88 23       	and	r24, r24
 3f0:	39 f0       	breq	.+14     	; 0x400 <__LOCK_REGION_LENGTH__>
                state=STATE_FORCE_RIGHT;
 3f2:	82 e0       	ldi	r24, 0x02	; 2
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <state+0x1>
 3fa:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <state>
 3fe:	0a c0       	rjmp	.+20     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
            }else if(forceLeftSign){
 400:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <forceLeftSign>
 404:	88 23       	and	r24, r24
 406:	31 f0       	breq	.+12     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
                state=STATE_FORCE_LEFT;
 408:	83 e0       	ldi	r24, 0x03	; 3
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <state+0x1>
 410:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <state>
            }
            motor(STRAIGHT);   //직진!
 414:	80 e0       	ldi	r24, 0x00	; 0
            break;
 416:	74 cf       	rjmp	.-280    	; 0x300 <motor>
        }
        case 0x0b:{                      //1011 -- 하나걸림 좌회전
            motor(LEFT);
 418:	08 95       	ret
 41a:	82 e0       	ldi	r24, 0x02	; 2
            break;
 41c:	71 cf       	rjmp	.-286    	; 0x300 <motor>
        }
        case 0x0d:{                      //1101 -- 하나걸림 -우회전
            motor(RIGHT);
 41e:	08 95       	ret
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	6e cf       	rjmp	.-292    	; 0x300 <motor>
            break;
        }
        case 0x07:{                      //0111 -- 교차로 좌회전 신호
            forceLeftSign = 1;
 424:	08 95       	ret
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <forceLeftSign>
            motor(STRAIGHT);
 42c:	80 e0       	ldi	r24, 0x00	; 0
            break;
 42e:	68 cf       	rjmp	.-304    	; 0x300 <motor>
        }
        case 0x0e:{                      //1110 -- 교차로 우회전 신호
            
            forceRightSign = 1;
 430:	08 95       	ret
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <forceRightSign>
            motor(STRAIGHT);
 438:	80 e0       	ldi	r24, 0x00	; 0
            break;
 43a:	62 cf       	rjmp	.-316    	; 0x300 <motor>
        }
        case 0x06:{                      //0110 -- 정지 신호
            
            stopSign=1;                    //flag 설정
 43c:	08 95       	ret
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <stopSign>
            motor(STRAIGHT);
 444:	80 e0       	ldi	r24, 0x00	; 0
 446:	5c cf       	rjmp	.-328    	; 0x300 <motor>
            break;
 448:	08 95       	ret
        }
        case 0x01:{                        //0001 - 교차로로 치우쳐 들어감
            if(calibRight == 1){                //교차로 1000으로 들어와서 0001로 나온경우엔 오른쪽으로칼리브레이션을 해줘야 합니다.
 44a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 44e:	81 30       	cpi	r24, 0x01	; 1
 450:	49 f4       	brne	.+18     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
                state = STATE_CALIB_RIGHT;
 452:	84 e0       	ldi	r24, 0x04	; 4
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <state+0x1>
 45a:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <state>
                calibRight = 0;//스테이트 바꿨으면 초기화하기
 45e:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <__data_end>
                return;
            }else{
                calibLeft = 1;
 462:	08 95       	ret
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <calibLeft>
            }
            motor(STRAIGHT);
 46a:	80 e0       	ldi	r24, 0x00	; 0
 46c:	49 cf       	rjmp	.-366    	; 0x300 <motor>
            break;
 46e:	08 95       	ret
        }
        case 0x08:{                        //1000    - 교차로로 치우쳐 들어감
            if(calibLeft == 1){                //교차로 0001으로 들어와서 1000로 나온경우 왼쪽으로칼리브레이션을 해줘야 합니다.
 470:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <calibLeft>
 474:	81 30       	cpi	r24, 0x01	; 1
 476:	49 f4       	brne	.+18     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
                state = STATE_CALIB_LEFT;
 478:	85 e0       	ldi	r24, 0x05	; 5
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <state+0x1>
 480:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <state>
                calibLeft = 0;//스테이트 바꿨으면 초기화하기
 484:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <calibLeft>
                return;
            }else{
                calibRight = 1;
 488:	08 95       	ret
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
            }
            motor(STRAIGHT);
 490:	80 e0       	ldi	r24, 0x00	; 0
            break;
 492:	36 cf       	rjmp	.-404    	; 0x300 <motor>
        }
        case 0x00:{                      //0000 - 교차로
            forceLeftSign = forceRightSign = stopSign = 0;                //교차로에 많이 치우쳐 들어온경우(0111이 인식된뒤 들어온)교차로 를 나간뒤 STATE_FORCE로 들어가지 않게 초기화 해줘야 합니다.
 494:	08 95       	ret
 496:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <stopSign>
 49a:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <forceRightSign>
            motor(STRAIGHT);
 49e:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <forceLeftSign>
 4a2:	80 e0       	ldi	r24, 0x00	; 0
            break;
 4a4:	2d cf       	rjmp	.-422    	; 0x300 <motor>
        }
        default: {   
            motor(STRAIGHT);
 4a6:	08 95       	ret
 4a8:	80 e0       	ldi	r24, 0x00	; 0
 4aa:	2a cf       	rjmp	.-428    	; 0x300 <motor>
 4ac:	08 95       	ret

000004ae <__vector_15>:
        }
    }
}

ISR(TIMER0_COMP_vect)  //OCR0와 카운터 비교해서 실행됨. 즉 모터의 펄스 간격(속도)가 ocr0에 따라 가변
{
 4ae:	1f 92       	push	r1
 4b0:	0f 92       	push	r0
 4b2:	0f b6       	in	r0, 0x3f	; 63
 4b4:	0f 92       	push	r0
 4b6:	11 24       	eor	r1, r1
 4b8:	0b b6       	in	r0, 0x3b	; 59
 4ba:	0f 92       	push	r0
 4bc:	2f 93       	push	r18
 4be:	3f 93       	push	r19
 4c0:	4f 93       	push	r20
 4c2:	5f 93       	push	r21
 4c4:	6f 93       	push	r22
 4c6:	7f 93       	push	r23
 4c8:	8f 93       	push	r24
 4ca:	9f 93       	push	r25
 4cc:	af 93       	push	r26
 4ce:	bf 93       	push	r27
 4d0:	cf 93       	push	r28
 4d2:	df 93       	push	r29
 4d4:	ef 93       	push	r30
 4d6:	ff 93       	push	r31
    int sensor = SENSOR_PORT & 0x0F; //센서값 읽기
 4d8:	83 b3       	in	r24, 0x13	; 19
 4da:	8f 70       	andi	r24, 0x0F	; 15
 4dc:	c8 2f       	mov	r28, r24
 4de:	d0 e0       	ldi	r29, 0x00	; 0

    if(state == STATE_FORCE_RIGHT){                                 //-강제회전
 4e0:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <state>
 4e4:	30 91 23 01 	lds	r19, 0x0123	; 0x800123 <state+0x1>
 4e8:	22 30       	cpi	r18, 0x02	; 2
 4ea:	31 05       	cpc	r19, r1
 4ec:	c9 f4       	brne	.+50     	; 0x520 <__vector_15+0x72>
        if(!forceRightSign){
 4ee:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <forceRightSign>
 4f2:	91 11       	cpse	r25, r1
 4f4:	0c c0       	rjmp	.+24     	; 0x50e <__vector_15+0x60>
            motor(RIGHT);                                           //교차로에 들어간 뒤엔 회전만 합니다
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	03 df       	rcall	.-506    	; 0x300 <motor>
            if(sensor == 0x0d){
 4fa:	2d 97       	sbiw	r28, 0x0d	; 13
 4fc:	09 f0       	breq	.+2      	; 0x500 <__vector_15+0x52>
 4fe:	61 c0       	rjmp	.+194    	; 0x5c2 <__vector_15+0x114>
                state = STATE_RUNNING;                              //강제 회전하다 라인이 잡히면 트랙 타기
 500:	81 e0       	ldi	r24, 0x01	; 1
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <state+0x1>
 508:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <state>
 50c:	5a c0       	rjmp	.+180    	; 0x5c2 <__vector_15+0x114>
            }
        }else{
            if(sensor == 0x00 || sensor == 0x01 || sensor == 0x08){    
 50e:	82 30       	cpi	r24, 0x02	; 2
 510:	10 f0       	brcs	.+4      	; 0x516 <__vector_15+0x68>
 512:	28 97       	sbiw	r28, 0x08	; 8
 514:	11 f4       	brne	.+4      	; 0x51a <__vector_15+0x6c>
                forceRightSign = 0;                                 //교차로 나타나면 플래그 초기화 하고 강제로 돌림
 516:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <forceRightSign>
            }
            motor(STRAIGHT);                                        //교차로 들어가기 전까지는 무조껀 직진
 51a:	80 e0       	ldi	r24, 0x00	; 0
 51c:	f1 de       	rcall	.-542    	; 0x300 <motor>
 51e:	51 c0       	rjmp	.+162    	; 0x5c2 <__vector_15+0x114>
        }
    }else if(state == STATE_FORCE_LEFT){                            //-강제회전
 520:	23 30       	cpi	r18, 0x03	; 3
 522:	31 05       	cpc	r19, r1
 524:	c9 f4       	brne	.+50     	; 0x558 <__vector_15+0xaa>
        if(!forceLeftSign){
 526:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <forceLeftSign>
 52a:	91 11       	cpse	r25, r1
            motor(LEFT);                                            //교차로에 들어간 뒤엔 회전만 합니다
 52c:	0c c0       	rjmp	.+24     	; 0x546 <__vector_15+0x98>
 52e:	82 e0       	ldi	r24, 0x02	; 2
 530:	e7 de       	rcall	.-562    	; 0x300 <motor>
            if(sensor == 0x0b){                                        //강제 회전하다 라인 잡히면 트랙 타기
 532:	2b 97       	sbiw	r28, 0x0b	; 11
 534:	09 f0       	breq	.+2      	; 0x538 <__vector_15+0x8a>
 536:	45 c0       	rjmp	.+138    	; 0x5c2 <__vector_15+0x114>
                state = STATE_RUNNING;
 538:	81 e0       	ldi	r24, 0x01	; 1
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <state+0x1>
 540:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <state>
 544:	3e c0       	rjmp	.+124    	; 0x5c2 <__vector_15+0x114>
            }
        }else{                                                        
            if(sensor == 0x00 || sensor == 0x01 || sensor == 0x08){
 546:	82 30       	cpi	r24, 0x02	; 2
 548:	10 f0       	brcs	.+4      	; 0x54e <__vector_15+0xa0>
 54a:	28 97       	sbiw	r28, 0x08	; 8
 54c:	11 f4       	brne	.+4      	; 0x552 <__vector_15+0xa4>
                forceLeftSign = 0;                                  //교차로 나타나면 플래그 초기화 하고 강제로 돌림
 54e:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <forceLeftSign>
            }
            motor(STRAIGHT);                                        //교차로 들어가기 전까지는 무조껀 직진
 552:	80 e0       	ldi	r24, 0x00	; 0
 554:	d5 de       	rcall	.-598    	; 0x300 <motor>
 556:	35 c0       	rjmp	.+106    	; 0x5c2 <__vector_15+0x114>
            
        }
    }else if(state == STATE_CALIB_RIGHT){                           //-교차로를 틀어져서 왼쪽으로 들어갈때 칼리브레이션
 558:	24 30       	cpi	r18, 0x04	; 4
 55a:	31 05       	cpc	r19, r1
 55c:	a9 f4       	brne	.+42     	; 0x588 <__vector_15+0xda>
        if(sensor == 0x0b||sensor == 0x0d){                         //레일 위로 돌아가면 종료
 55e:	cb 30       	cpi	r28, 0x0B	; 11
 560:	d1 05       	cpc	r29, r1
 562:	19 f0       	breq	.+6      	; 0x56a <__vector_15+0xbc>
 564:	cd 30       	cpi	r28, 0x0D	; 13
 566:	d1 05       	cpc	r29, r1
 568:	39 f4       	brne	.+14     	; 0x578 <__vector_15+0xca>
            state = STATE_RUNNING;
 56a:	81 e0       	ldi	r24, 0x01	; 1
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <state+0x1>
 572:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <state>
        }else if(sensor == 0x0f){                                   //하나도 안걸릴때 일딴 오른쪽으로 돌림
 576:	25 c0       	rjmp	.+74     	; 0x5c2 <__vector_15+0x114>
 578:	2f 97       	sbiw	r28, 0x0f	; 15
            motor(RIGHT);
 57a:	19 f4       	brne	.+6      	; 0x582 <__vector_15+0xd4>
 57c:	81 e0       	ldi	r24, 0x01	; 1
 57e:	c0 de       	rcall	.-640    	; 0x300 <motor>
        }else{                                                      //교차로를 나오기 전까지는 무조껀 직진
            motor(STRAIGHT);
 580:	20 c0       	rjmp	.+64     	; 0x5c2 <__vector_15+0x114>
 582:	80 e0       	ldi	r24, 0x00	; 0
 584:	bd de       	rcall	.-646    	; 0x300 <motor>
 586:	1d c0       	rjmp	.+58     	; 0x5c2 <__vector_15+0x114>
        }
    }else if(state == STATE_CALIB_LEFT){                            //-교차로를 틀어져서 오른쪽으로 들어갈때 칼리브레이션
 588:	25 30       	cpi	r18, 0x05	; 5
 58a:	31 05       	cpc	r19, r1
 58c:	a9 f4       	brne	.+42     	; 0x5b8 <__vector_15+0x10a>
        if(sensor == 0x0b||sensor == 0x0d){                         //레일 위로 돌아가면 종료
 58e:	cb 30       	cpi	r28, 0x0B	; 11
 590:	d1 05       	cpc	r29, r1
 592:	19 f0       	breq	.+6      	; 0x59a <__vector_15+0xec>
 594:	cd 30       	cpi	r28, 0x0D	; 13
 596:	d1 05       	cpc	r29, r1
 598:	39 f4       	brne	.+14     	; 0x5a8 <__vector_15+0xfa>
            state = STATE_RUNNING;
 59a:	81 e0       	ldi	r24, 0x01	; 1
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <state+0x1>
 5a2:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <state>
        }else if(sensor == 0x0f){                                   //하나도 안걸릴때 일딴 오른쪽으로 돌림
 5a6:	0d c0       	rjmp	.+26     	; 0x5c2 <__vector_15+0x114>
            motor(LEFT);
 5a8:	2f 97       	sbiw	r28, 0x0f	; 15
 5aa:	19 f4       	brne	.+6      	; 0x5b2 <__vector_15+0x104>
 5ac:	82 e0       	ldi	r24, 0x02	; 2
 5ae:	a8 de       	rcall	.-688    	; 0x300 <motor>
        }else{                                                      //교차로를 나오기 전까지는 무조껀 직진
            motor(STRAIGHT);
 5b0:	08 c0       	rjmp	.+16     	; 0x5c2 <__vector_15+0x114>
 5b2:	80 e0       	ldi	r24, 0x00	; 0
 5b4:	a5 de       	rcall	.-694    	; 0x300 <motor>
        }
    }else if(state == STATE_RUNNING){
 5b6:	05 c0       	rjmp	.+10     	; 0x5c2 <__vector_15+0x114>
 5b8:	21 30       	cpi	r18, 0x01	; 1
 5ba:	31 05       	cpc	r19, r1
        sensorScan(sensor);                    //일반적인 라인 팔로잉 상태
 5bc:	11 f4       	brne	.+4      	; 0x5c2 <__vector_15+0x114>
 5be:	ce 01       	movw	r24, r28
 5c0:	f5 de       	rcall	.-534    	; 0x3ac <sensorScan>
    }
}
 5c2:	ff 91       	pop	r31
 5c4:	ef 91       	pop	r30
 5c6:	df 91       	pop	r29
 5c8:	cf 91       	pop	r28
 5ca:	bf 91       	pop	r27
 5cc:	af 91       	pop	r26
 5ce:	9f 91       	pop	r25
 5d0:	8f 91       	pop	r24
 5d2:	7f 91       	pop	r23
 5d4:	6f 91       	pop	r22
 5d6:	5f 91       	pop	r21
 5d8:	4f 91       	pop	r20
 5da:	3f 91       	pop	r19
 5dc:	2f 91       	pop	r18
 5de:	0f 90       	pop	r0
 5e0:	0b be       	out	0x3b, r0	; 59
 5e2:	0f 90       	pop	r0
 5e4:	0f be       	out	0x3f, r0	; 63
 5e6:	0f 90       	pop	r0
 5e8:	1f 90       	pop	r1
 5ea:	18 95       	reti

000005ec <main>:
///////////////////interrupt service routine end////////////////////////

int main(void){

    //initialize port and interrupt
    initDevices();
 5ec:	bb dd       	rcall	.-1162   	; 0x164 <initDevices>
    initSegment();
 5ee:	62 de       	rcall	.-828    	; 0x2b4 <initSegment>
    initInterrupt();
 5f0:	6a de       	rcall	.-812    	; 0x2c6 <initInterrupt>
    initTimerInterrupt();
 5f2:	7c de       	rcall	.-776    	; 0x2ec <initTimerInterrupt>
 5f4:	91 dd       	rcall	.-1246   	; 0x118 <initFlag>
    initFlag();
 5f6:	8f ef       	ldi	r24, 0xFF	; 255
 5f8:	81 bb       	out	0x11, r24	; 17
    
    MOTOR_PORT_DDR = 0xff;
 5fa:	78 94       	sei
 5fc:	0f 2e       	mov	r0, r31
    //Global Interrupt Enable
    sei();
 5fe:	f8 ee       	ldi	r31, 0xE8	; 232

    //main function
    //print 7segment by global variable timeNum
    //timeNum variable is state and OCR0
    while (1){
        timeNum = state*1000 + (int)OCR0;
 600:	ef 2e       	mov	r14, r31
 602:	f3 e0       	ldi	r31, 0x03	; 3
 604:	ff 2e       	mov	r15, r31
 606:	f0 2d       	mov	r31, r0
 608:	21 b7       	in	r18, 0x31	; 49
 60a:	40 91 22 01 	lds	r20, 0x0122	; 0x800122 <state>
 60e:	50 91 23 01 	lds	r21, 0x0123	; 0x800123 <state+0x1>
 612:	4e 9d       	mul	r20, r14
 614:	c0 01       	movw	r24, r0
 616:	4f 9d       	mul	r20, r15
 618:	90 0d       	add	r25, r0
 61a:	5e 9d       	mul	r21, r14
 61c:	90 0d       	add	r25, r0
 61e:	11 24       	eor	r1, r1
 620:	82 0f       	add	r24, r18
 622:	91 1d       	adc	r25, r1
 624:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timeNum+0x1>
 628:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timeNum>
 62c:	02 e0       	ldi	r16, 0x02	; 2
 62e:	11 e0       	ldi	r17, 0x01	; 1
 630:	c3 e0       	ldi	r28, 0x03	; 3
 632:	d0 e0       	ldi	r29, 0x00	; 0
 634:	f8 01       	movw	r30, r16
 636:	61 91       	ld	r22, Z+
        //segment print
        for(int i = 0; i < 4; i++){
            printSeg((timeNum/exp10[i])%10,3-i); //OCR0를 세그먼트에 출력합니다.
 638:	71 91       	ld	r23, Z+
 63a:	8f 01       	movw	r16, r30
 63c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <timeNum>
 640:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <timeNum+0x1>
 644:	1f d0       	rcall	.+62     	; 0x684 <__udivmodhi4>
 646:	ab 01       	movw	r20, r22
 648:	9b 01       	movw	r18, r22
 64a:	ad ec       	ldi	r26, 0xCD	; 205
 64c:	bc ec       	ldi	r27, 0xCC	; 204
 64e:	37 d0       	rcall	.+110    	; 0x6be <__umulhisi3>
 650:	96 95       	lsr	r25
 652:	87 95       	ror	r24
 654:	96 95       	lsr	r25
 656:	87 95       	ror	r24
 658:	96 95       	lsr	r25
 65a:	87 95       	ror	r24
 65c:	9c 01       	movw	r18, r24
 65e:	22 0f       	add	r18, r18
 660:	33 1f       	adc	r19, r19
 662:	88 0f       	add	r24, r24
 664:	99 1f       	adc	r25, r25
 666:	88 0f       	add	r24, r24
 668:	99 1f       	adc	r25, r25
 66a:	88 0f       	add	r24, r24
 66c:	99 1f       	adc	r25, r25
 66e:	82 0f       	add	r24, r18
 670:	93 1f       	adc	r25, r19
 672:	be 01       	movw	r22, r28
 674:	9a 01       	movw	r18, r20
 676:	28 1b       	sub	r18, r24
 678:	39 0b       	sbc	r19, r25
 67a:	c9 01       	movw	r24, r18
 67c:	0c de       	rcall	.-1000   	; 0x296 <printSeg>
 67e:	21 97       	sbiw	r28, 0x01	; 1
 680:	c8 f6       	brcc	.-78     	; 0x634 <main+0x48>
 682:	c2 cf       	rjmp	.-124    	; 0x608 <main+0x1c>

00000684 <__udivmodhi4>:
 684:	aa 1b       	sub	r26, r26
 686:	bb 1b       	sub	r27, r27
 688:	51 e1       	ldi	r21, 0x11	; 17
 68a:	07 c0       	rjmp	.+14     	; 0x69a <__udivmodhi4_ep>

0000068c <__udivmodhi4_loop>:
 68c:	aa 1f       	adc	r26, r26
 68e:	bb 1f       	adc	r27, r27
 690:	a6 17       	cp	r26, r22
 692:	b7 07       	cpc	r27, r23
 694:	10 f0       	brcs	.+4      	; 0x69a <__udivmodhi4_ep>
 696:	a6 1b       	sub	r26, r22
 698:	b7 0b       	sbc	r27, r23

0000069a <__udivmodhi4_ep>:
 69a:	88 1f       	adc	r24, r24
 69c:	99 1f       	adc	r25, r25
 69e:	5a 95       	dec	r21
 6a0:	a9 f7       	brne	.-22     	; 0x68c <__udivmodhi4_loop>
 6a2:	80 95       	com	r24
 6a4:	90 95       	com	r25
 6a6:	bc 01       	movw	r22, r24
 6a8:	cd 01       	movw	r24, r26
 6aa:	08 95       	ret

000006ac <__tablejump2__>:
 6ac:	ee 0f       	add	r30, r30
 6ae:	ff 1f       	adc	r31, r31
 6b0:	00 24       	eor	r0, r0
 6b2:	00 1c       	adc	r0, r0
 6b4:	0b be       	out	0x3b, r0	; 59
 6b6:	07 90       	elpm	r0, Z+
 6b8:	f6 91       	elpm	r31, Z
 6ba:	e0 2d       	mov	r30, r0
 6bc:	09 94       	ijmp

000006be <__umulhisi3>:
 6be:	a2 9f       	mul	r26, r18
 6c0:	b0 01       	movw	r22, r0
 6c2:	b3 9f       	mul	r27, r19
 6c4:	c0 01       	movw	r24, r0
 6c6:	a3 9f       	mul	r26, r19
 6c8:	70 0d       	add	r23, r0
 6ca:	81 1d       	adc	r24, r1
 6cc:	11 24       	eor	r1, r1
 6ce:	91 1d       	adc	r25, r1
 6d0:	b2 9f       	mul	r27, r18
 6d2:	70 0d       	add	r23, r0
 6d4:	81 1d       	adc	r24, r1
 6d6:	11 24       	eor	r1, r1
 6d8:	91 1d       	adc	r25, r1
 6da:	08 95       	ret

000006dc <_exit>:
 6dc:	f8 94       	cli

000006de <__stop_program>:
 6de:	ff cf       	rjmp	.-2      	; 0x6de <__stop_program>
