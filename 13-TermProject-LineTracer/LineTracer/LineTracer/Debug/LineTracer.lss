
LineTracer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00000b72  00000c06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b72  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  0080011c  0080011c  00000c22  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c22  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c54  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000c94  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010a7  00000000  00000000  00000d24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008ed  00000000  00000000  00001dcb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bbf  00000000  00000000  000026b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000017c  00000000  00000000  00003278  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c5  00000000  00000000  000033f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000619  00000000  00000000  000039b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00003fd2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	6d c0       	rjmp	.+218    	; 0xdc <__ctors_end>
   2:	00 00       	nop
   4:	88 c0       	rjmp	.+272    	; 0x116 <__bad_interrupt>
   6:	00 00       	nop
   8:	86 c0       	rjmp	.+268    	; 0x116 <__bad_interrupt>
   a:	00 00       	nop
   c:	84 c0       	rjmp	.+264    	; 0x116 <__bad_interrupt>
   e:	00 00       	nop
  10:	82 c0       	rjmp	.+260    	; 0x116 <__bad_interrupt>
  12:	00 00       	nop
  14:	ab c1       	rjmp	.+854    	; 0x36c <__vector_5>
  16:	00 00       	nop
  18:	95 c1       	rjmp	.+810    	; 0x344 <__vector_6>
  1a:	00 00       	nop
  1c:	7c c0       	rjmp	.+248    	; 0x116 <__bad_interrupt>
  1e:	00 00       	nop
  20:	7a c0       	rjmp	.+244    	; 0x116 <__bad_interrupt>
  22:	00 00       	nop
  24:	78 c0       	rjmp	.+240    	; 0x116 <__bad_interrupt>
  26:	00 00       	nop
  28:	76 c0       	rjmp	.+236    	; 0x116 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	74 c0       	rjmp	.+232    	; 0x116 <__bad_interrupt>
  2e:	00 00       	nop
  30:	72 c0       	rjmp	.+228    	; 0x116 <__bad_interrupt>
  32:	00 00       	nop
  34:	70 c0       	rjmp	.+224    	; 0x116 <__bad_interrupt>
  36:	00 00       	nop
  38:	6e c0       	rjmp	.+220    	; 0x116 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	1e c3       	rjmp	.+1596   	; 0x67a <__vector_15>
  3e:	00 00       	nop
  40:	6a c0       	rjmp	.+212    	; 0x116 <__bad_interrupt>
  42:	00 00       	nop
  44:	68 c0       	rjmp	.+208    	; 0x116 <__bad_interrupt>
  46:	00 00       	nop
  48:	66 c0       	rjmp	.+204    	; 0x116 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	64 c0       	rjmp	.+200    	; 0x116 <__bad_interrupt>
  4e:	00 00       	nop
  50:	62 c0       	rjmp	.+196    	; 0x116 <__bad_interrupt>
  52:	00 00       	nop
  54:	60 c0       	rjmp	.+192    	; 0x116 <__bad_interrupt>
  56:	00 00       	nop
  58:	5e c0       	rjmp	.+188    	; 0x116 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5c c0       	rjmp	.+184    	; 0x116 <__bad_interrupt>
  5e:	00 00       	nop
  60:	5a c0       	rjmp	.+180    	; 0x116 <__bad_interrupt>
  62:	00 00       	nop
  64:	58 c0       	rjmp	.+176    	; 0x116 <__bad_interrupt>
  66:	00 00       	nop
  68:	56 c0       	rjmp	.+172    	; 0x116 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	54 c0       	rjmp	.+168    	; 0x116 <__bad_interrupt>
  6e:	00 00       	nop
  70:	52 c0       	rjmp	.+164    	; 0x116 <__bad_interrupt>
  72:	00 00       	nop
  74:	50 c0       	rjmp	.+160    	; 0x116 <__bad_interrupt>
  76:	00 00       	nop
  78:	4e c0       	rjmp	.+156    	; 0x116 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4c c0       	rjmp	.+152    	; 0x116 <__bad_interrupt>
  7e:	00 00       	nop
  80:	4a c0       	rjmp	.+148    	; 0x116 <__bad_interrupt>
  82:	00 00       	nop
  84:	48 c0       	rjmp	.+144    	; 0x116 <__bad_interrupt>
  86:	00 00       	nop
  88:	46 c0       	rjmp	.+140    	; 0x116 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	cf 00       	.word	0x00cf	; ????
  8e:	d3 00       	.word	0x00d3	; ????
  90:	d1 00       	.word	0x00d1	; ????
  92:	d7 00       	.word	0x00d7	; ????
  94:	dd 00       	.word	0x00dd	; ????
  96:	d5 00       	.word	0x00d5	; ????
  98:	dd 00       	.word	0x00dd	; ????
  9a:	db 00       	.word	0x00db	; ????
  9c:	f8 00       	.word	0x00f8	; ????
  9e:	dd 00       	.word	0x00dd	; ????
  a0:	dd 00       	.word	0x00dd	; ????
  a2:	d9 00       	.word	0x00d9	; ????
  a4:	e8 00       	.word	0x00e8	; ????
  a6:	ec 00       	.word	0x00ec	; ????
  a8:	ea 00       	.word	0x00ea	; ????
  aa:	f0 00       	.word	0x00f0	; ????
  ac:	f6 00       	.word	0x00f6	; ????
  ae:	ee 00       	.word	0x00ee	; ????
  b0:	f6 00       	.word	0x00f6	; ????
  b2:	f4 00       	.word	0x00f4	; ????
  b4:	fa 00       	.word	0x00fa	; ????
  b6:	f6 00       	.word	0x00f6	; ????
  b8:	f6 00       	.word	0x00f6	; ????
  ba:	f2 00       	.word	0x00f2	; ????
  bc:	2f 03       	fmul	r18, r23
  be:	09 03       	fmul	r16, r17
  c0:	03 03       	mulsu	r16, r19
  c2:	af 02       	muls	r26, r31
  c4:	03 03       	mulsu	r16, r19
  c6:	c1 02       	muls	r28, r17
  c8:	03 03       	mulsu	r16, r19
  ca:	d3 02       	muls	r29, r19
  cc:	1c 03       	fmul	r17, r20
  ce:	3a 03       	fmul	r19, r18
  d0:	eb 02       	muls	r30, r27
  d2:	2f 02       	muls	r18, r31
  d4:	d9 02       	muls	r29, r25
  d6:	6f 02       	muls	r22, r31
  d8:	fd 02       	muls	r31, r29
  da:	fc 01       	movw	r30, r24

000000dc <__ctors_end>:
  dc:	11 24       	eor	r1, r1
  de:	1f be       	out	0x3f, r1	; 63
  e0:	cf ef       	ldi	r28, 0xFF	; 255
  e2:	d0 e1       	ldi	r29, 0x10	; 16
  e4:	de bf       	out	0x3e, r29	; 62
  e6:	cd bf       	out	0x3d, r28	; 61

000000e8 <__do_copy_data>:
  e8:	11 e0       	ldi	r17, 0x01	; 1
  ea:	a0 e0       	ldi	r26, 0x00	; 0
  ec:	b1 e0       	ldi	r27, 0x01	; 1
  ee:	e2 e7       	ldi	r30, 0x72	; 114
  f0:	fb e0       	ldi	r31, 0x0B	; 11
  f2:	00 e0       	ldi	r16, 0x00	; 0
  f4:	0b bf       	out	0x3b, r16	; 59
  f6:	02 c0       	rjmp	.+4      	; 0xfc <__do_copy_data+0x14>
  f8:	07 90       	elpm	r0, Z+
  fa:	0d 92       	st	X+, r0
  fc:	ac 31       	cpi	r26, 0x1C	; 28
  fe:	b1 07       	cpc	r27, r17
 100:	d9 f7       	brne	.-10     	; 0xf8 <__do_copy_data+0x10>

00000102 <__do_clear_bss>:
 102:	21 e0       	ldi	r18, 0x01	; 1
 104:	ac e1       	ldi	r26, 0x1C	; 28
 106:	b1 e0       	ldi	r27, 0x01	; 1
 108:	01 c0       	rjmp	.+2      	; 0x10c <.do_clear_bss_start>

0000010a <.do_clear_bss_loop>:
 10a:	1d 92       	st	X+, r1

0000010c <.do_clear_bss_start>:
 10c:	ac 32       	cpi	r26, 0x2C	; 44
 10e:	b2 07       	cpc	r27, r18
 110:	e1 f7       	brne	.-8      	; 0x10a <.do_clear_bss_loop>
 112:	ba d4       	rcall	.+2420   	; 0xa88 <main>
 114:	2c c5       	rjmp	.+2648   	; 0xb6e <_exit>

00000116 <__bad_interrupt>:
 116:	74 cf       	rjmp	.-280    	; 0x0 <__vectors>

00000118 <initFlag>:
unsigned char calibLeft = 0;
unsigned char calibRight = 0;
short countTimeStop = 1000;

void initFlag(){
	motorForceLeftFlag = 0;
 118:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <motorForceLeftFlag>
	motorForceRightFlag = 0;
 11c:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <motorForceRightFlag>
	countStopSign = 0;
 120:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <countStopSign>
	stopSign = 0;
 124:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <stopSign>
	forceRightSign = 0;
 128:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <forceRightSign>
	forceLeftSign = 0;
 12c:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <forceLeftSign>
	calibLeft = 0;
 130:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <calibLeft>
	calibRight = 0;
 134:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <calibRight>
	OCR0 = 100;
 138:	84 e6       	ldi	r24, 0x64	; 100
 13a:	81 bf       	out	0x31, r24	; 49
 13c:	08 95       	ret

0000013e <initPort>:
}

void initPort(void)
{
	PORTA = 0x00;
 13e:	1b ba       	out	0x1b, r1	; 27
	DDRA  = 0x00;
 140:	1a ba       	out	0x1a, r1	; 26
	PORTB = 0x00;
 142:	18 ba       	out	0x18, r1	; 24
	DDRB  = 0x00;
 144:	17 ba       	out	0x17, r1	; 23
	PORTC = 0x00;
 146:	15 ba       	out	0x15, r1	; 21
	DDRC  = 0x00;
 148:	14 ba       	out	0x14, r1	; 20
	PORTD = 0x00;
 14a:	12 ba       	out	0x12, r1	; 18
	DDRD  = 0xFF;
 14c:	8f ef       	ldi	r24, 0xFF	; 255
 14e:	81 bb       	out	0x11, r24	; 17
	PORTE = 0x00;
 150:	13 b8       	out	0x03, r1	; 3
	DDRE  = 0x00;
 152:	12 b8       	out	0x02, r1	; 2
	PORTF = 0x00;
 154:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	DDRF  = 0x00;
 158:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	PORTG = 0x00;
 15c:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
	DDRG  = 0x03;
 160:	83 e0       	ldi	r24, 0x03	; 3
 162:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
 166:	08 95       	ret

00000168 <initDevices>:
}

void initDevices(void)
{
	cli(); //disable all interrupts
 168:	f8 94       	cli
	XDIV  = 0x00; //xtal divider
 16a:	1c be       	out	0x3c, r1	; 60
	XMCRA = 0x00; //external memory
 16c:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
	initPort();
 170:	e6 df       	rcall	.-52     	; 0x13e <initPort>
	

	MCUCR = 0x00;
 172:	15 be       	out	0x35, r1	; 53
	EICRA = 0x00; //extended ext ints
 174:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	EICRB = 0x00; //extended ext ints
 178:	1a be       	out	0x3a, r1	; 58
	EIMSK = 0x00;
 17a:	19 be       	out	0x39, r1	; 57
	TIMSK = 0x00; //timer interrupt sources
 17c:	17 be       	out	0x37, r1	; 55
	ETIMSK = 0x00; //extended timer interrupt sources
 17e:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <__TEXT_REGION_LENGTH__+0x7e007d>
	sei(); //re-enable interrupts
 182:	78 94       	sei
 184:	08 95       	ret

00000186 <LEFTmotorOneClock>:

// Stepping Motor drive---------------------------
//1-2상 구동
unsigned char  LEFTmotorOneClock(unsigned char step, char dir)
{
	step = step & 0x0f;
 186:	8f 70       	andi	r24, 0x0F	; 15
	if(dir){
 188:	66 23       	and	r22, r22
 18a:	c9 f0       	breq	.+50     	; 0x1be <LEFTmotorOneClock+0x38>
		switch(step){
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	fc 01       	movw	r30, r24
 190:	31 97       	sbiw	r30, 0x01	; 1
 192:	ec 30       	cpi	r30, 0x0C	; 12
 194:	f1 05       	cpc	r31, r1
 196:	88 f4       	brcc	.+34     	; 0x1ba <LEFTmotorOneClock+0x34>
 198:	ea 5b       	subi	r30, 0xBA	; 186
 19a:	ff 4f       	sbci	r31, 0xFF	; 255
 19c:	d0 c4       	rjmp	.+2464   	; 0xb3e <__tablejump2__>
			case 0x09: step=0x01; break;
			case 0x01: step=0x03; break;
 19e:	83 e0       	ldi	r24, 0x03	; 3
 1a0:	08 95       	ret
			case 0x03: step=0x02; break;
 1a2:	82 e0       	ldi	r24, 0x02	; 2
 1a4:	08 95       	ret
			case 0x02: step=0x06; break;
 1a6:	86 e0       	ldi	r24, 0x06	; 6
 1a8:	08 95       	ret
			case 0x06: step=0x04; break;
 1aa:	84 e0       	ldi	r24, 0x04	; 4
 1ac:	08 95       	ret
			case 0x04: step=0x0c; break;
 1ae:	8c e0       	ldi	r24, 0x0C	; 12
 1b0:	08 95       	ret
			case 0x0c: step=0x08; break;
 1b2:	88 e0       	ldi	r24, 0x08	; 8
 1b4:	08 95       	ret
			case 0x08: step=0x09; break;
 1b6:	89 e0       	ldi	r24, 0x09	; 9
 1b8:	08 95       	ret
			default: step=0x0c; break;
 1ba:	8c e0       	ldi	r24, 0x0C	; 12
 1bc:	08 95       	ret
		}
		}else{
		switch(step){
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	fc 01       	movw	r30, r24
 1c2:	31 97       	sbiw	r30, 0x01	; 1
 1c4:	ec 30       	cpi	r30, 0x0C	; 12
 1c6:	f1 05       	cpc	r31, r1
 1c8:	88 f4       	brcc	.+34     	; 0x1ec <LEFTmotorOneClock+0x66>
 1ca:	ee 5a       	subi	r30, 0xAE	; 174
 1cc:	ff 4f       	sbci	r31, 0xFF	; 255
 1ce:	b7 c4       	rjmp	.+2414   	; 0xb3e <__tablejump2__>
			case 0x09: step=0x08; break;
			case 0x01: step=0x09; break;
 1d0:	89 e0       	ldi	r24, 0x09	; 9
 1d2:	08 95       	ret
			case 0x03: step=0x01; break;
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	08 95       	ret
			case 0x02: step=0x03; break;
 1d8:	83 e0       	ldi	r24, 0x03	; 3
 1da:	08 95       	ret
			case 0x06: step=0x02; break;
 1dc:	82 e0       	ldi	r24, 0x02	; 2
 1de:	08 95       	ret
			case 0x04: step=0x06; break;
 1e0:	86 e0       	ldi	r24, 0x06	; 6
 1e2:	08 95       	ret
			case 0x0c: step=0x04; break;
 1e4:	84 e0       	ldi	r24, 0x04	; 4
 1e6:	08 95       	ret
			case 0x08: step=0x0c; break;
 1e8:	8c e0       	ldi	r24, 0x0C	; 12
 1ea:	08 95       	ret
			default: step=0x0c; break;
 1ec:	8c e0       	ldi	r24, 0x0C	; 12
 1ee:	08 95       	ret
unsigned char  LEFTmotorOneClock(unsigned char step, char dir)
{
	step = step & 0x0f;
	if(dir){
		switch(step){
			case 0x09: step=0x01; break;
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	08 95       	ret
			case 0x08: step=0x09; break;
			default: step=0x0c; break;
		}
		}else{
		switch(step){
			case 0x09: step=0x08; break;
 1f4:	88 e0       	ldi	r24, 0x08	; 8
			default: step=0x0c; break;
		}
	}
	return step;

}
 1f6:	08 95       	ret

000001f8 <RIGHTmotorOneClock>:



unsigned char  RIGHTmotorOneClock(unsigned char step, char dir)
{
	step = step & 0xf0;
 1f8:	80 7f       	andi	r24, 0xF0	; 240
	if(dir){
 1fa:	66 23       	and	r22, r22
 1fc:	29 f1       	breq	.+74     	; 0x248 <RIGHTmotorOneClock+0x50>
		switch(step){//후진
 1fe:	80 34       	cpi	r24, 0x40	; 64
 200:	d9 f0       	breq	.+54     	; 0x238 <RIGHTmotorOneClock+0x40>
 202:	38 f4       	brcc	.+14     	; 0x212 <RIGHTmotorOneClock+0x1a>
 204:	80 32       	cpi	r24, 0x20	; 32
 206:	a1 f0       	breq	.+40     	; 0x230 <RIGHTmotorOneClock+0x38>
 208:	80 33       	cpi	r24, 0x30	; 48
 20a:	81 f0       	breq	.+32     	; 0x22c <RIGHTmotorOneClock+0x34>
 20c:	80 31       	cpi	r24, 0x10	; 16
 20e:	d1 f4       	brne	.+52     	; 0x244 <RIGHTmotorOneClock+0x4c>
 210:	0b c0       	rjmp	.+22     	; 0x228 <RIGHTmotorOneClock+0x30>
 212:	80 38       	cpi	r24, 0x80	; 128
 214:	a9 f0       	breq	.+42     	; 0x240 <RIGHTmotorOneClock+0x48>
 216:	18 f4       	brcc	.+6      	; 0x21e <RIGHTmotorOneClock+0x26>
 218:	80 36       	cpi	r24, 0x60	; 96
 21a:	61 f0       	breq	.+24     	; 0x234 <RIGHTmotorOneClock+0x3c>
 21c:	13 c0       	rjmp	.+38     	; 0x244 <RIGHTmotorOneClock+0x4c>
 21e:	80 39       	cpi	r24, 0x90	; 144
 220:	c1 f1       	breq	.+112    	; 0x292 <RIGHTmotorOneClock+0x9a>
 222:	80 3c       	cpi	r24, 0xC0	; 192
 224:	59 f0       	breq	.+22     	; 0x23c <RIGHTmotorOneClock+0x44>
 226:	0e c0       	rjmp	.+28     	; 0x244 <RIGHTmotorOneClock+0x4c>
			case 0x90: step=0x10; break;
			case 0x10: step=0x30; break;
 228:	80 e3       	ldi	r24, 0x30	; 48
 22a:	08 95       	ret
			case 0x30: step=0x20; break;
 22c:	80 e2       	ldi	r24, 0x20	; 32
 22e:	08 95       	ret
			case 0x20: step=0x60; break;
 230:	80 e6       	ldi	r24, 0x60	; 96
 232:	08 95       	ret
			case 0x60: step=0x40; break;
 234:	80 e4       	ldi	r24, 0x40	; 64
 236:	08 95       	ret
			case 0x40: step=0xc0; break;
 238:	80 ec       	ldi	r24, 0xC0	; 192
 23a:	08 95       	ret
			case 0xc0: step=0x80; break;
 23c:	80 e8       	ldi	r24, 0x80	; 128
 23e:	08 95       	ret
			case 0x80: step=0x90; break;
 240:	80 e9       	ldi	r24, 0x90	; 144
 242:	08 95       	ret
			default: step=0xc0; break;
 244:	80 ec       	ldi	r24, 0xC0	; 192
 246:	08 95       	ret
		}
		}else{
		switch(step){//전진
 248:	80 34       	cpi	r24, 0x40	; 64
 24a:	d9 f0       	breq	.+54     	; 0x282 <RIGHTmotorOneClock+0x8a>
 24c:	38 f4       	brcc	.+14     	; 0x25c <RIGHTmotorOneClock+0x64>
 24e:	80 32       	cpi	r24, 0x20	; 32
 250:	a1 f0       	breq	.+40     	; 0x27a <RIGHTmotorOneClock+0x82>
 252:	80 33       	cpi	r24, 0x30	; 48
 254:	81 f0       	breq	.+32     	; 0x276 <RIGHTmotorOneClock+0x7e>
 256:	80 31       	cpi	r24, 0x10	; 16
 258:	d1 f4       	brne	.+52     	; 0x28e <RIGHTmotorOneClock+0x96>
 25a:	0b c0       	rjmp	.+22     	; 0x272 <RIGHTmotorOneClock+0x7a>
 25c:	80 38       	cpi	r24, 0x80	; 128
 25e:	a9 f0       	breq	.+42     	; 0x28a <RIGHTmotorOneClock+0x92>
 260:	18 f4       	brcc	.+6      	; 0x268 <RIGHTmotorOneClock+0x70>
 262:	80 36       	cpi	r24, 0x60	; 96
 264:	61 f0       	breq	.+24     	; 0x27e <RIGHTmotorOneClock+0x86>
 266:	13 c0       	rjmp	.+38     	; 0x28e <RIGHTmotorOneClock+0x96>
 268:	80 39       	cpi	r24, 0x90	; 144
 26a:	a9 f0       	breq	.+42     	; 0x296 <RIGHTmotorOneClock+0x9e>
 26c:	80 3c       	cpi	r24, 0xC0	; 192
 26e:	59 f0       	breq	.+22     	; 0x286 <RIGHTmotorOneClock+0x8e>
 270:	0e c0       	rjmp	.+28     	; 0x28e <RIGHTmotorOneClock+0x96>
			case 0x90: step=0x80; break;//1001
			case 0x10: step=0x90; break;//0001
 272:	80 e9       	ldi	r24, 0x90	; 144
 274:	08 95       	ret
			case 0x30: step=0x10; break;//0011
 276:	80 e1       	ldi	r24, 0x10	; 16
 278:	08 95       	ret
			case 0x20: step=0x30; break;//0010
 27a:	80 e3       	ldi	r24, 0x30	; 48
 27c:	08 95       	ret
			case 0x60: step=0x20; break;//0110
 27e:	80 e2       	ldi	r24, 0x20	; 32
 280:	08 95       	ret
			case 0x40: step=0x60; break;//0100
 282:	80 e6       	ldi	r24, 0x60	; 96
 284:	08 95       	ret
			case 0xc0: step=0x40; break;//1100
 286:	80 e4       	ldi	r24, 0x40	; 64
 288:	08 95       	ret
			case 0x80: step=0xc0; break;//1000
 28a:	80 ec       	ldi	r24, 0xC0	; 192
 28c:	08 95       	ret
			default: step=0xc0; break;
 28e:	80 ec       	ldi	r24, 0xC0	; 192
 290:	08 95       	ret
unsigned char  RIGHTmotorOneClock(unsigned char step, char dir)
{
	step = step & 0xf0;
	if(dir){
		switch(step){//후진
			case 0x90: step=0x10; break;
 292:	80 e1       	ldi	r24, 0x10	; 16
 294:	08 95       	ret
			case 0x80: step=0x90; break;
			default: step=0xc0; break;
		}
		}else{
		switch(step){//전진
			case 0x90: step=0x80; break;//1001
 296:	80 e8       	ldi	r24, 0x80	; 128
			case 0x80: step=0xc0; break;//1000
			default: step=0xc0; break;
		}
	}
	return step;
}
 298:	08 95       	ret

0000029a <printSeg>:
void printSeg(int segNum, int segDigit){
	//by schematic, PORTE must being clear before set segment's digit and led.
	//because circuit use same port(A) to set segment's digit and led by latch.

	//set segment digit to print
	PORTA = FND_SEGPOS[segDigit];
 29a:	fb 01       	movw	r30, r22
 29c:	e4 5f       	subi	r30, 0xF4	; 244
 29e:	fe 4f       	sbci	r31, 0xFE	; 254
 2a0:	20 81       	ld	r18, Z
 2a2:	2b bb       	out	0x1b, r18	; 27
	PORTE |= 0x04; //set 1 segment digit latch
 2a4:	1a 9a       	sbi	0x03, 2	; 3
	PORTE &= ~(0x04); //clear LED_CTL(PE2)
 2a6:	1a 98       	cbi	0x03, 2	; 3

	//print num at segment
	PORTA = FND_SEGNP[segNum]; //print with out decimal point
 2a8:	80 5f       	subi	r24, 0xF0	; 240
 2aa:	9e 4f       	sbci	r25, 0xFE	; 254
 2ac:	fc 01       	movw	r30, r24
 2ae:	80 81       	ld	r24, Z
 2b0:	8b bb       	out	0x1b, r24	; 27
	PORTE |= 0x08; //set 1 segment led latch
 2b2:	1b 9a       	sbi	0x03, 3	; 3
	PORTE &= ~(0x08); //clear LED_DATA(PE3)
 2b4:	1b 98       	cbi	0x03, 3	; 3
 2b6:	08 95       	ret

000002b8 <initSegment>:
}

void initSegment(){
	//initialize port A and E
	DDRA = 0xFF;    //set portA(7:0) to output
 2b8:	8f ef       	ldi	r24, 0xFF	; 255
 2ba:	8a bb       	out	0x1a, r24	; 26
	DDRE |= 0x0C;   //set portE(3:2) to output
 2bc:	82 b1       	in	r24, 0x02	; 2
 2be:	8c 60       	ori	r24, 0x0C	; 12
 2c0:	82 b9       	out	0x02, r24	; 2
	PORTE |= 0x04;  //init portE(3)
 2c2:	1a 9a       	sbi	0x03, 2	; 3
	PORTA = 0x0F;   //init portA(3:0)
 2c4:	8f e0       	ldi	r24, 0x0F	; 15
 2c6:	8b bb       	out	0x1b, r24	; 27
 2c8:	08 95       	ret

000002ca <initInterrupt>:
}

void initInterrupt(){
	//external interrupt int4 enable
	//int4 pin falling edge활성화
	EICRB &= ~(1 << ISC40);
 2ca:	8a b7       	in	r24, 0x3a	; 58
 2cc:	8e 7f       	andi	r24, 0xFE	; 254
 2ce:	8a bf       	out	0x3a, r24	; 58
	EICRB |= 1 << ISC41; //same to EICRB = 0d00000010
 2d0:	8a b7       	in	r24, 0x3a	; 58
 2d2:	82 60       	ori	r24, 0x02	; 2
 2d4:	8a bf       	out	0x3a, r24	; 58
	//enable external interrupt 4
	EIMSK |= 1 << INT4;
 2d6:	89 b7       	in	r24, 0x39	; 57
 2d8:	80 61       	ori	r24, 0x10	; 16
 2da:	89 bf       	out	0x39, r24	; 57

	//external interrupt int5 enable
	//int5 pin falling edge활성화
	EICRB &= ~(1 << ISC50); //clear
 2dc:	8a b7       	in	r24, 0x3a	; 58
 2de:	8b 7f       	andi	r24, 0xFB	; 251
 2e0:	8a bf       	out	0x3a, r24	; 58
	EICRB |= 1 << ISC51;    //set
 2e2:	8a b7       	in	r24, 0x3a	; 58
 2e4:	88 60       	ori	r24, 0x08	; 8
 2e6:	8a bf       	out	0x3a, r24	; 58
	//enable external interrupt 5
	EIMSK |= 1 << INT5;
 2e8:	89 b7       	in	r24, 0x39	; 57
 2ea:	80 62       	ori	r24, 0x20	; 32
 2ec:	89 bf       	out	0x39, r24	; 57
 2ee:	08 95       	ret

000002f0 <initTimerInterrupt>:
}

void initTimerInterrupt()
{
	TCCR0 = 0x0d; //0d00001110//CTC mode and 64 prescaling
 2f0:	8d e0       	ldi	r24, 0x0D	; 13
 2f2:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0x00; //clear count value register. TCNT0 increase count from 0, clear on 63
 2f4:	12 be       	out	0x32, r1	; 50
	TIMSK = 0x02; //enable Timer/Counter0 compare match interrupt, disable overflow interrupt
 2f6:	82 e0       	ldi	r24, 0x02	; 2
 2f8:	87 bf       	out	0x37, r24	; 55
	TIFR = 0xff;  //write logic 1 on flag for clear register
 2fa:	8f ef       	ldi	r24, 0xFF	; 255
 2fc:	86 bf       	out	0x36, r24	; 54
	OCR0 = 0x6d;  //compare 110
 2fe:	8d e6       	ldi	r24, 0x6D	; 109
 300:	81 bf       	out	0x31, r24	; 49
 302:	08 95       	ret

00000304 <motor>:
}

//모터 구동
void motor(char direction){

	switch(direction){
 304:	81 30       	cpi	r24, 0x01	; 1
 306:	51 f0       	breq	.+20     	; 0x31c <motor+0x18>
 308:	18 f0       	brcs	.+6      	; 0x310 <motor+0xc>
 30a:	82 30       	cpi	r24, 0x02	; 2
 30c:	71 f0       	breq	.+28     	; 0x32a <motor+0x26>
 30e:	13 c0       	rjmp	.+38     	; 0x336 <motor+0x32>
		case STRAIGHT :
		stepRight = RIGHTmotorOneClock(stepRight, 1);  //break 없으니까 밑에꺼도 실행됨
 310:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <stepRight>
 314:	61 e0       	ldi	r22, 0x01	; 1
 316:	70 df       	rcall	.-288    	; 0x1f8 <RIGHTmotorOneClock>
 318:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <stepRight>
		case RIGHT :
		stepLeft = LEFTmotorOneClock(stepLeft, 0);
 31c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <stepLeft>
 320:	60 e0       	ldi	r22, 0x00	; 0
 322:	31 df       	rcall	.-414    	; 0x186 <LEFTmotorOneClock>
 324:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <stepLeft>
		break;
 328:	06 c0       	rjmp	.+12     	; 0x336 <motor+0x32>
		case LEFT  :
		stepRight = RIGHTmotorOneClock(stepRight, 1);
 32a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <stepRight>
 32e:	61 e0       	ldi	r22, 0x01	; 1
 330:	63 df       	rcall	.-314    	; 0x1f8 <RIGHTmotorOneClock>
 332:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <stepRight>
		break;
	}
	
	MOTOR_PORT = stepLeft|stepRight;
 336:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <stepLeft>
 33a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <stepRight>
 33e:	89 2b       	or	r24, r25
 340:	82 bb       	out	0x12, r24	; 18
 342:	08 95       	ret

00000344 <__vector_6>:
}

//출발
ISR(INT5_vect){
 344:	1f 92       	push	r1
 346:	0f 92       	push	r0
 348:	0f b6       	in	r0, 0x3f	; 63
 34a:	0f 92       	push	r0
 34c:	11 24       	eor	r1, r1
 34e:	8f 93       	push	r24
 350:	9f 93       	push	r25
	state = STATE_RUNNING;
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <state+0x1>
 35a:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <state>
}
 35e:	9f 91       	pop	r25
 360:	8f 91       	pop	r24
 362:	0f 90       	pop	r0
 364:	0f be       	out	0x3f, r0	; 63
 366:	0f 90       	pop	r0
 368:	1f 90       	pop	r1
 36a:	18 95       	reti

0000036c <__vector_5>:

//속도조절

ISR(INT4_vect){
 36c:	1f 92       	push	r1
 36e:	0f 92       	push	r0
 370:	0f b6       	in	r0, 0x3f	; 63
 372:	0f 92       	push	r0
 374:	11 24       	eor	r1, r1
 376:	8f 93       	push	r24
 378:	9f 93       	push	r25
	//when interrupt 4 excu, increase num
	
	if(timeNum > 60){
 37a:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <timeNum>
 37e:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <timeNum+0x1>
 382:	8d 33       	cpi	r24, 0x3D	; 61
 384:	91 05       	cpc	r25, r1
 386:	30 f0       	brcs	.+12     	; 0x394 <__vector_5+0x28>
		timeNum -= 5;
 388:	05 97       	sbiw	r24, 0x05	; 5
 38a:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <timeNum+0x1>
 38e:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <timeNum>
 392:	05 c0       	rjmp	.+10     	; 0x39e <__vector_5+0x32>
		}else{
		timeNum -= 1;
 394:	01 97       	sbiw	r24, 0x01	; 1
 396:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <timeNum+0x1>
 39a:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <timeNum>
	}
	if (timeNum < 40){
 39e:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <timeNum>
 3a2:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <timeNum+0x1>
 3a6:	88 32       	cpi	r24, 0x28	; 40
 3a8:	91 05       	cpc	r25, r1
 3aa:	98 f4       	brcc	.+38     	; 0x3d2 <__vector_5+0x66>
		OCR0 = timeNum = 110;
 3ac:	8e e6       	ldi	r24, 0x6E	; 110
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <timeNum+0x1>
 3b4:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <timeNum>
 3b8:	81 bf       	out	0x31, r24	; 49
	}
	if(timeNum < 100){
 3ba:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <timeNum>
 3be:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <timeNum+0x1>
 3c2:	84 36       	cpi	r24, 0x64	; 100
 3c4:	91 05       	cpc	r25, r1
 3c6:	18 f4       	brcc	.+6      	; 0x3ce <__vector_5+0x62>
		OCR0 = 100;
 3c8:	84 e6       	ldi	r24, 0x64	; 100
 3ca:	81 bf       	out	0x31, r24	; 49
 3cc:	06 c0       	rjmp	.+12     	; 0x3da <__vector_5+0x6e>
		}else if(timeNum >=100){
		OCR0 = timeNum;
 3ce:	81 bf       	out	0x31, r24	; 49
	}
	
}
 3d0:	04 c0       	rjmp	.+8      	; 0x3da <__vector_5+0x6e>
		timeNum -= 1;
	}
	if (timeNum < 40){
		OCR0 = timeNum = 110;
	}
	if(timeNum < 100){
 3d2:	84 36       	cpi	r24, 0x64	; 100
 3d4:	91 05       	cpc	r25, r1
 3d6:	d8 f7       	brcc	.-10     	; 0x3ce <__vector_5+0x62>
 3d8:	f7 cf       	rjmp	.-18     	; 0x3c8 <__vector_5+0x5c>
		OCR0 = 100;
		}else if(timeNum >=100){
		OCR0 = timeNum;
	}
	
}
 3da:	9f 91       	pop	r25
 3dc:	8f 91       	pop	r24
 3de:	0f 90       	pop	r0
 3e0:	0f be       	out	0x3f, r0	; 63
 3e2:	0f 90       	pop	r0
 3e4:	1f 90       	pop	r1
 3e6:	18 95       	reti

000003e8 <sensorScan>:

char rightSmoth = 0;
char leftSmoth = 0;

void sensorScan(int sensor){
	switch(sensor){
 3e8:	80 31       	cpi	r24, 0x10	; 16
 3ea:	91 05       	cpc	r25, r1
 3ec:	08 f0       	brcs	.+2      	; 0x3f0 <sensorScan+0x8>
 3ee:	42 c1       	rjmp	.+644    	; 0x674 <__LOCK_REGION_LENGTH__+0x274>
 3f0:	fc 01       	movw	r30, r24
 3f2:	e2 5a       	subi	r30, 0xA2	; 162
 3f4:	ff 4f       	sbci	r31, 0xFF	; 255
 3f6:	a3 c3       	rjmp	.+1862   	; 0xb3e <__tablejump2__>
		case 0x0f:{                      //1111 - 걸리는거없음 직진
			//정지신호 있을때
			if(stopSign==1){            // stop sign(0110)이 있은뒤 사라지면 카운트
 3f8:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <stopSign>
 3fc:	81 30       	cpi	r24, 0x01	; 1
 3fe:	b9 f4       	brne	.+46     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
				forceRightSign = forceLeftSign = 0; //정지신호가 양쪽 조금씩 다르게 들어간경우 예외처리
 400:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <forceLeftSign>
 404:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <forceRightSign>
				stopSign=0;
 408:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <stopSign>
				countStopSign++;
 40c:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <countStopSign>
 410:	8f 5f       	subi	r24, 0xFF	; 255
 412:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <countStopSign>
				countTimeStop = 0;
 416:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
 41a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
				if (countTimeStop == 300){
					countStopSign = 0;
				}

				if((countTimeStop < 300)&&(countStopSign > 2)){    //stopsign 3번 나오면 종료
 41e:	83 30       	cpi	r24, 0x03	; 3
 420:	d8 f0       	brcs	.+54     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
					state = STATE_INIT;
 422:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <state+0x1>
 426:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <state>
					initFlag();
 42a:	76 ce       	rjmp	.-788    	; 0x118 <initFlag>
					return;
 42c:	08 95       	ret
				}
				}else if(forceRightSign){
 42e:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <forceRightSign>
 432:	88 23       	and	r24, r24
 434:	39 f0       	breq	.+14     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
				state=STATE_FORCE_RIGHT;
 436:	82 e0       	ldi	r24, 0x02	; 2
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <state+0x1>
 43e:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <state>
 442:	0a c0       	rjmp	.+20     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
				}else if(forceLeftSign){
 444:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <forceLeftSign>
 448:	88 23       	and	r24, r24
 44a:	31 f0       	breq	.+12     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
				state=STATE_FORCE_LEFT;
 44c:	83 e0       	ldi	r24, 0x03	; 3
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <state+0x1>
 454:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <state>
			}
			motor(STRAIGHT);   //직진!
 458:	80 e0       	ldi	r24, 0x00	; 0
 45a:	54 cf       	rjmp	.-344    	; 0x304 <motor>
			break;
 45c:	08 95       	ret
		}
		case 0x0b:{                      //1011 -- 하나걸림 좌회전
			if(stopSign==1){            // stop sign(0110)이 있은뒤 사라지면 카운트
 45e:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <stopSign>
 462:	81 30       	cpi	r24, 0x01	; 1
 464:	b9 f4       	brne	.+46     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
				forceRightSign = forceLeftSign = 0; //정지신호가 양쪽 조금씩 다르게 들어간경우 예외처리
 466:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <forceLeftSign>
 46a:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <forceRightSign>
				stopSign=0;
 46e:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <stopSign>
				countStopSign++;
 472:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <countStopSign>
 476:	8f 5f       	subi	r24, 0xFF	; 255
 478:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <countStopSign>
				countTimeStop = 0;
 47c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
 480:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
				if (countTimeStop == 300){
					countStopSign = 0;
				}

				if((countTimeStop < 300)&&(countStopSign > 2)){    //stopsign 3번 나오면 종료
 484:	83 30       	cpi	r24, 0x03	; 3
 486:	30 f0       	brcs	.+12     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
					state = STATE_INIT;
 488:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <state+0x1>
 48c:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <state>
					initFlag();
 490:	43 ce       	rjmp	.-890    	; 0x118 <initFlag>
					return;
 492:	08 95       	ret
				}
			}
			if(leftSmoth == 1){
 494:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <leftSmoth>
 498:	81 30       	cpi	r24, 0x01	; 1
				motor(STRAIGHT);
 49a:	29 f4       	brne	.+10     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 49c:	80 e0       	ldi	r24, 0x00	; 0
 49e:	32 df       	rcall	.-412    	; 0x304 <motor>
				leftSmoth=0;
 4a0:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <leftSmoth>
				}else{
				leftSmoth++;
 4a4:	05 c0       	rjmp	.+10     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
 4a6:	8f 5f       	subi	r24, 0xFF	; 255
 4a8:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <leftSmoth>
				motor(LEFT);
 4ac:	82 e0       	ldi	r24, 0x02	; 2
 4ae:	2a df       	rcall	.-428    	; 0x304 <motor>
			}
			if(forceRightSign){
 4b0:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <forceRightSign>
 4b4:	88 23       	and	r24, r24
 4b6:	39 f0       	breq	.+14     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
				state=STATE_FORCE_RIGHT;
 4b8:	82 e0       	ldi	r24, 0x02	; 2
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <state+0x1>
 4c0:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <state>
 4c4:	08 95       	ret
				}else if(forceLeftSign){
 4c6:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <forceLeftSign>
 4ca:	88 23       	and	r24, r24
 4cc:	09 f4       	brne	.+2      	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
 4ce:	d4 c0       	rjmp	.+424    	; 0x678 <__LOCK_REGION_LENGTH__+0x278>
				state=STATE_FORCE_LEFT;
 4d0:	83 e0       	ldi	r24, 0x03	; 3
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <state+0x1>
 4d8:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <state>
 4dc:	08 95       	ret
			}
			break;
		}
		case 0x0d:{                      //1101 -- 하나걸림 -우회전
			if(stopSign==1){            // stop sign(0110)이 있은뒤 사라지면 카운트
 4de:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <stopSign>
 4e2:	81 30       	cpi	r24, 0x01	; 1
 4e4:	b9 f4       	brne	.+46     	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
				forceRightSign = forceLeftSign = 0; //정지신호가 양쪽 조금씩 다르게 들어간경우 예외처리
 4e6:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <forceLeftSign>
 4ea:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <forceRightSign>
				stopSign=0;
 4ee:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <stopSign>
				countStopSign++;
 4f2:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <countStopSign>
 4f6:	8f 5f       	subi	r24, 0xFF	; 255
 4f8:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <countStopSign>
				countTimeStop = 0;
 4fc:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
 500:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
				if (countTimeStop == 300){
					countStopSign = 0;
				}

				if((countTimeStop < 300)&&(countStopSign > 2)){    //stopsign 3번 나오면 종료
 504:	83 30       	cpi	r24, 0x03	; 3
					state = STATE_INIT;
 506:	30 f0       	brcs	.+12     	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
 508:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <state+0x1>
 50c:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <state>
					initFlag();
					return;
 510:	03 ce       	rjmp	.-1018   	; 0x118 <initFlag>
				}
			}
			if(rightSmoth == 1){
 512:	08 95       	ret
 514:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <rightSmoth>
 518:	81 30       	cpi	r24, 0x01	; 1
				motor(STRAIGHT);
 51a:	29 f4       	brne	.+10     	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
 51c:	80 e0       	ldi	r24, 0x00	; 0
				rightSmoth=0;
 51e:	f2 de       	rcall	.-540    	; 0x304 <motor>
 520:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <rightSmoth>
				}else{
				rightSmoth++;
 524:	05 c0       	rjmp	.+10     	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
 526:	8f 5f       	subi	r24, 0xFF	; 255
 528:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <rightSmoth>
				motor(RIGHT);
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	ea de       	rcall	.-556    	; 0x304 <motor>
			}
			if(forceRightSign){
 530:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <forceRightSign>
 534:	88 23       	and	r24, r24
 536:	39 f0       	breq	.+14     	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
				state=STATE_FORCE_RIGHT;
 538:	82 e0       	ldi	r24, 0x02	; 2
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <state+0x1>
 540:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <state>
 544:	08 95       	ret
				}else if(forceLeftSign){
 546:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <forceLeftSign>
 54a:	88 23       	and	r24, r24
 54c:	09 f4       	brne	.+2      	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
 54e:	94 c0       	rjmp	.+296    	; 0x678 <__LOCK_REGION_LENGTH__+0x278>
				state=STATE_FORCE_LEFT;
 550:	83 e0       	ldi	r24, 0x03	; 3
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <state+0x1>
 558:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <state>
			
			break;
		}
		
		case 0x03:{                     //0011 -- 교차로 좌회전 신호
			forceLeftSign = 1;
 55c:	08 95       	ret
 55e:	81 e0       	ldi	r24, 0x01	; 1
 560:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <forceLeftSign>
			if(leftSmoth == 1){
 564:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <leftSmoth>
 568:	81 30       	cpi	r24, 0x01	; 1
				motor(STRAIGHT);
 56a:	29 f4       	brne	.+10     	; 0x576 <__LOCK_REGION_LENGTH__+0x176>
 56c:	80 e0       	ldi	r24, 0x00	; 0
				leftSmoth=0;
 56e:	ca de       	rcall	.-620    	; 0x304 <motor>
 570:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <leftSmoth>
				}else{
				leftSmoth++;
 574:	08 95       	ret
 576:	8f 5f       	subi	r24, 0xFF	; 255
 578:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <leftSmoth>
				motor(LEFT);
 57c:	82 e0       	ldi	r24, 0x02	; 2
 57e:	c2 ce       	rjmp	.-636    	; 0x304 <motor>
			}
			break;
		}        //0011
		case 0x05:{             //0101
			forceLeftSign = 1;
 580:	08 95       	ret
 582:	81 e0       	ldi	r24, 0x01	; 1
 584:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <forceLeftSign>
			if(rightSmoth == 1){
 588:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <rightSmoth>
				motor(STRAIGHT);
 58c:	81 30       	cpi	r24, 0x01	; 1
 58e:	29 f4       	brne	.+10     	; 0x59a <__LOCK_REGION_LENGTH__+0x19a>
 590:	80 e0       	ldi	r24, 0x00	; 0
				rightSmoth=0;
 592:	b8 de       	rcall	.-656    	; 0x304 <motor>
 594:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <rightSmoth>
				}else{
				rightSmoth++;
 598:	08 95       	ret
 59a:	8f 5f       	subi	r24, 0xFF	; 255
				motor(RIGHT);
 59c:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <rightSmoth>
 5a0:	81 e0       	ldi	r24, 0x01	; 1
 5a2:	b0 ce       	rjmp	.-672    	; 0x304 <motor>
			}
			break;
		}        //0101
		case 0x07:{                      //0111 -- 교차로 좌회전 신호
			forceLeftSign = 1;
 5a4:	08 95       	ret
 5a6:	81 e0       	ldi	r24, 0x01	; 1
			motor(STRAIGHT);
 5a8:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <forceLeftSign>
 5ac:	80 e0       	ldi	r24, 0x00	; 0
			break;
 5ae:	aa ce       	rjmp	.-684    	; 0x304 <motor>
		}
		case 0x0c:{
			forceRightSign = 1;
 5b0:	08 95       	ret
 5b2:	81 e0       	ldi	r24, 0x01	; 1
			if(rightSmoth == 1){
 5b4:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <forceRightSign>
 5b8:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <rightSmoth>
				motor(STRAIGHT);
 5bc:	81 30       	cpi	r24, 0x01	; 1
 5be:	29 f4       	brne	.+10     	; 0x5ca <__LOCK_REGION_LENGTH__+0x1ca>
 5c0:	80 e0       	ldi	r24, 0x00	; 0
				rightSmoth=0;
 5c2:	a0 de       	rcall	.-704    	; 0x304 <motor>
 5c4:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <rightSmoth>
				}else{
				rightSmoth++;
 5c8:	08 95       	ret
 5ca:	8f 5f       	subi	r24, 0xFF	; 255
				motor(RIGHT);
 5cc:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <rightSmoth>
 5d0:	81 e0       	ldi	r24, 0x01	; 1
 5d2:	98 ce       	rjmp	.-720    	; 0x304 <motor>
			}
			break;
		}            //1100
		case 0x0a:{
			forceRightSign = 1;
 5d4:	08 95       	ret
 5d6:	81 e0       	ldi	r24, 0x01	; 1
			if(leftSmoth == 1){
 5d8:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <forceRightSign>
 5dc:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <leftSmoth>
				motor(STRAIGHT);
 5e0:	81 30       	cpi	r24, 0x01	; 1
 5e2:	29 f4       	brne	.+10     	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
				leftSmoth=0;
 5e4:	80 e0       	ldi	r24, 0x00	; 0
 5e6:	8e de       	rcall	.-740    	; 0x304 <motor>
				}else{
				leftSmoth++;
 5e8:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <leftSmoth>
 5ec:	08 95       	ret
				motor(LEFT);
 5ee:	8f 5f       	subi	r24, 0xFF	; 255
 5f0:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <leftSmoth>
 5f4:	82 e0       	ldi	r24, 0x02	; 2
			}
			break;
		}
		case 0x0e:{                      //1110 -- 교차로 우회전 신호
			
			forceRightSign = 1;
 5f6:	86 ce       	rjmp	.-756    	; 0x304 <motor>
 5f8:	08 95       	ret
 5fa:	81 e0       	ldi	r24, 0x01	; 1
			motor(STRAIGHT);
 5fc:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <forceRightSign>
 600:	80 e0       	ldi	r24, 0x00	; 0
			break;
 602:	80 ce       	rjmp	.-768    	; 0x304 <motor>
		}
		case 0x02://0010
		case 0x04://0100
		case 0x06:{                      //0110 -- 정지 신호
			
			stopSign=1;                    //flag 설정
 604:	08 95       	ret
 606:	81 e0       	ldi	r24, 0x01	; 1
 608:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <stopSign>
			motor(STRAIGHT);
 60c:	80 e0       	ldi	r24, 0x00	; 0
			break;
 60e:	7a ce       	rjmp	.-780    	; 0x304 <motor>
		}
		case 0x01:{                        //0001 - 교차로로 치우쳐 들어감
			if(calibRight == 1){                //교차로 1000으로 들어와서 0001로 나온경우엔 오른쪽으로칼리브레이션을 해줘야 합니다.
 610:	08 95       	ret
 612:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <calibRight>
 616:	81 30       	cpi	r24, 0x01	; 1
				state = STATE_CALIB_RIGHT;
 618:	49 f4       	brne	.+18     	; 0x62c <__LOCK_REGION_LENGTH__+0x22c>
 61a:	84 e0       	ldi	r24, 0x04	; 4
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <state+0x1>
 622:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <state>
				calibRight = 0;//스테이트 바꿨으면 초기화하기
 626:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <calibRight>
				return;
				}else{
				calibLeft = 1;
 62a:	08 95       	ret
 62c:	81 e0       	ldi	r24, 0x01	; 1
 62e:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <calibLeft>
			}
			motor(STRAIGHT);
 632:	80 e0       	ldi	r24, 0x00	; 0
			break;
 634:	67 ce       	rjmp	.-818    	; 0x304 <motor>
		}
		case 0x08:{                        //1000    - 교차로로 치우쳐 들어감
			if(calibLeft == 1){                //교차로 0001으로 들어와서 1000로 나온경우 왼쪽으로칼리브레이션을 해줘야 합니다.
 636:	08 95       	ret
 638:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <calibLeft>
 63c:	81 30       	cpi	r24, 0x01	; 1
				state = STATE_CALIB_LEFT;
 63e:	49 f4       	brne	.+18     	; 0x652 <__LOCK_REGION_LENGTH__+0x252>
 640:	85 e0       	ldi	r24, 0x05	; 5
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <state+0x1>
				calibLeft = 0;//스테이트 바꿨으면 초기화하기
 648:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <state>
				return;
				}else{
				calibRight = 1;
 64c:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <calibLeft>
 650:	08 95       	ret
			}
			motor(STRAIGHT);
 652:	81 e0       	ldi	r24, 0x01	; 1
 654:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <calibRight>
			break;
 658:	80 e0       	ldi	r24, 0x00	; 0
		}
		case 0x00:{                      //0000 - 교차로
			forceLeftSign = forceRightSign = stopSign= countStopSign = 0;                //교차로에 많이 치우쳐 들어온경우(0111이 인식된뒤 들어온)교차로 를 나간뒤 STATE_FORCE로 들어가지 않게 초기화 해줘야 합니다.
 65a:	54 ce       	rjmp	.-856    	; 0x304 <motor>
 65c:	08 95       	ret
 65e:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <countStopSign>
 662:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <stopSign>
 666:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <forceRightSign>
			motor(STRAIGHT);
 66a:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <forceLeftSign>
 66e:	80 e0       	ldi	r24, 0x00	; 0
			break;
 670:	49 ce       	rjmp	.-878    	; 0x304 <motor>
		}
		default: {
			motor(STRAIGHT);
 672:	08 95       	ret
 674:	80 e0       	ldi	r24, 0x00	; 0
 676:	46 ce       	rjmp	.-884    	; 0x304 <motor>
 678:	08 95       	ret

0000067a <__vector_15>:
}
char smothStart=0;
char stateForceSmoth = 0;
short forceStraight = 0;
ISR(TIMER0_COMP_vect)  //OCR0와 카운터 비교해서 실행됨. 즉 모터의 펄스 간격(속도)가 ocr0에 따라 가변
{
 67a:	1f 92       	push	r1
 67c:	0f 92       	push	r0
 67e:	0f b6       	in	r0, 0x3f	; 63
 680:	0f 92       	push	r0
 682:	11 24       	eor	r1, r1
 684:	0b b6       	in	r0, 0x3b	; 59
 686:	0f 92       	push	r0
 688:	2f 93       	push	r18
 68a:	3f 93       	push	r19
 68c:	4f 93       	push	r20
 68e:	5f 93       	push	r21
 690:	6f 93       	push	r22
 692:	7f 93       	push	r23
 694:	8f 93       	push	r24
 696:	9f 93       	push	r25
 698:	af 93       	push	r26
 69a:	bf 93       	push	r27
 69c:	cf 93       	push	r28
 69e:	df 93       	push	r29
 6a0:	ef 93       	push	r30
 6a2:	ff 93       	push	r31
	int sensor = SENSOR_PORT & 0x0F; //센서값 읽기
 6a4:	83 b3       	in	r24, 0x13	; 19
 6a6:	8f 70       	andi	r24, 0x0F	; 15
 6a8:	c8 2f       	mov	r28, r24
 6aa:	d0 e0       	ldi	r29, 0x00	; 0
	
	if(countTimeStop < 1000){
 6ac:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 6b0:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 6b4:	28 3e       	cpi	r18, 0xE8	; 232
 6b6:	93 e0       	ldi	r25, 0x03	; 3
 6b8:	39 07       	cpc	r19, r25
 6ba:	34 f4       	brge	.+12     	; 0x6c8 <__vector_15+0x4e>
		countTimeStop++;
 6bc:	2f 5f       	subi	r18, 0xFF	; 255
 6be:	3f 4f       	sbci	r19, 0xFF	; 255
 6c0:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__data_start+0x1>
 6c4:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__data_start>
	}
	
	
	if(state == STATE_FORCE_RIGHT){                                 //-강제회전
 6c8:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <state>
 6cc:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <state+0x1>
 6d0:	22 30       	cpi	r18, 0x02	; 2
 6d2:	31 05       	cpc	r19, r1
 6d4:	09 f0       	breq	.+2      	; 0x6d8 <__vector_15+0x5e>
 6d6:	b9 c0       	rjmp	.+370    	; 0x84a <__vector_15+0x1d0>
		if(70 > OCR0&&(smothStart>9)){
 6d8:	91 b7       	in	r25, 0x31	; 49
 6da:	96 34       	cpi	r25, 0x46	; 70
 6dc:	50 f4       	brcc	.+20     	; 0x6f2 <__vector_15+0x78>
 6de:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <smothStart>
 6e2:	9a 30       	cpi	r25, 0x0A	; 10
 6e4:	30 f0       	brcs	.+12     	; 0x6f2 <__vector_15+0x78>
			OCR0++;
 6e6:	91 b7       	in	r25, 0x31	; 49
 6e8:	9f 5f       	subi	r25, 0xFF	; 255
 6ea:	91 bf       	out	0x31, r25	; 49
			smothStart=0;
 6ec:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <smothStart>
 6f0:	05 c0       	rjmp	.+10     	; 0x6fc <__vector_15+0x82>
			}else{
			smothStart++;
 6f2:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <smothStart>
 6f6:	9f 5f       	subi	r25, 0xFF	; 255
 6f8:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <smothStart>
		}
		if(!forceRightSign){
 6fc:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <forceRightSign>
 700:	91 11       	cpse	r25, r1
 702:	29 c0       	rjmp	.+82     	; 0x756 <__vector_15+0xdc>
			if(stateForceSmoth==3){
 704:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <stateForceSmoth>
 708:	83 30       	cpi	r24, 0x03	; 3
 70a:	29 f4       	brne	.+10     	; 0x716 <__vector_15+0x9c>
				motor(STRAIGHT);
 70c:	80 e0       	ldi	r24, 0x00	; 0
 70e:	fa dd       	rcall	.-1036   	; 0x304 <motor>
				stateForceSmoth=0;
 710:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <stateForceSmoth>
 714:	05 c0       	rjmp	.+10     	; 0x720 <__vector_15+0xa6>
				}else{
				stateForceSmoth++;
 716:	8f 5f       	subi	r24, 0xFF	; 255
 718:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <stateForceSmoth>
				motor(RIGHT);
 71c:	81 e0       	ldi	r24, 0x01	; 1
 71e:	f2 dd       	rcall	.-1052   	; 0x304 <motor>
			}
			forceStraight++;                                          //교차로에 들어간 뒤엔 회전만 합니다
 720:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
 724:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
 728:	01 96       	adiw	r24, 0x01	; 1
 72a:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <__data_end+0x1>
 72e:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
			if((forceStraight>80)&&(sensor == 0x0d)){
 732:	81 35       	cpi	r24, 0x51	; 81
 734:	91 05       	cpc	r25, r1
 736:	0c f4       	brge	.+2      	; 0x73a <__vector_15+0xc0>
 738:	92 c1       	rjmp	.+804    	; 0xa5e <__vector_15+0x3e4>
 73a:	2d 97       	sbiw	r28, 0x0d	; 13
 73c:	09 f0       	breq	.+2      	; 0x740 <__vector_15+0xc6>
 73e:	8f c1       	rjmp	.+798    	; 0xa5e <__vector_15+0x3e4>
				state = STATE_RUNNING;
 740:	81 e0       	ldi	r24, 0x01	; 1
 742:	90 e0       	ldi	r25, 0x00	; 0
 744:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <state+0x1>
 748:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <state>
				forceStraight=0;                           //강제 회전하다 라인이 잡히면 트랙 타기
 74c:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <__data_end+0x1>
 750:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <__data_end>
 754:	84 c1       	rjmp	.+776    	; 0xa5e <__vector_15+0x3e4>
			}
			}else{
			if(timeNum<100){
 756:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <timeNum>
 75a:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <timeNum+0x1>
 75e:	24 36       	cpi	r18, 0x64	; 100
 760:	31 05       	cpc	r19, r1
 762:	08 f0       	brcs	.+2      	; 0x766 <__vector_15+0xec>
 764:	3e c0       	rjmp	.+124    	; 0x7e2 <__vector_15+0x168>
				switch(sensor){
 766:	8d 30       	cpi	r24, 0x0D	; 13
 768:	b9 f0       	breq	.+46     	; 0x798 <__vector_15+0x11e>
 76a:	8f 30       	cpi	r24, 0x0F	; 15
 76c:	19 f0       	breq	.+6      	; 0x774 <__vector_15+0xfa>
 76e:	8b 30       	cpi	r24, 0x0B	; 11
 770:	11 f5       	brne	.+68     	; 0x7b6 <__vector_15+0x13c>
					case 0x0f:
					motor(STRAIGHT);
 772:	03 c0       	rjmp	.+6      	; 0x77a <__vector_15+0x100>
 774:	80 e0       	ldi	r24, 0x00	; 0
 776:	c6 dd       	rcall	.-1140   	; 0x304 <motor>
					break;
 778:	20 c0       	rjmp	.+64     	; 0x7ba <__vector_15+0x140>
					case 0x0b:{                      //1011 -- 하나걸림 좌회전
						if(stateForceSmoth==3){
 77a:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <stateForceSmoth>
 77e:	83 30       	cpi	r24, 0x03	; 3
							motor(STRAIGHT);
 780:	29 f4       	brne	.+10     	; 0x78c <__vector_15+0x112>
 782:	80 e0       	ldi	r24, 0x00	; 0
 784:	bf dd       	rcall	.-1154   	; 0x304 <motor>
							stateForceSmoth=0;
 786:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <stateForceSmoth>
 78a:	17 c0       	rjmp	.+46     	; 0x7ba <__vector_15+0x140>
							}else{
							stateForceSmoth++;
 78c:	8f 5f       	subi	r24, 0xFF	; 255
 78e:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <stateForceSmoth>
							motor(LEFT);
 792:	82 e0       	ldi	r24, 0x02	; 2
 794:	b7 dd       	rcall	.-1170   	; 0x304 <motor>
 796:	11 c0       	rjmp	.+34     	; 0x7ba <__vector_15+0x140>
						}
						break;
					}
					case 0x0d:{                      //1101 -- 하나걸림 -우회전
						if(stateForceSmoth==3){
 798:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <stateForceSmoth>
 79c:	83 30       	cpi	r24, 0x03	; 3
							motor(STRAIGHT);
 79e:	29 f4       	brne	.+10     	; 0x7aa <__vector_15+0x130>
 7a0:	80 e0       	ldi	r24, 0x00	; 0
 7a2:	b0 dd       	rcall	.-1184   	; 0x304 <motor>
							stateForceSmoth=0;
 7a4:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <stateForceSmoth>
							}else{
							stateForceSmoth++;
 7a8:	08 c0       	rjmp	.+16     	; 0x7ba <__vector_15+0x140>
 7aa:	8f 5f       	subi	r24, 0xFF	; 255
							motor(RIGHT);
 7ac:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <stateForceSmoth>
 7b0:	81 e0       	ldi	r24, 0x01	; 1
 7b2:	a8 dd       	rcall	.-1200   	; 0x304 <motor>
						}
						break;
					}
					default:
					motor(STRAIGHT);
 7b4:	02 c0       	rjmp	.+4      	; 0x7ba <__vector_15+0x140>
 7b6:	80 e0       	ldi	r24, 0x00	; 0
 7b8:	a5 dd       	rcall	.-1206   	; 0x304 <motor>
				}
				forceStraight++;
 7ba:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
 7be:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
 7c2:	01 96       	adiw	r24, 0x01	; 1
 7c4:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <__data_end+0x1>
 7c8:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
				if(forceStraight==240){
 7cc:	80 3f       	cpi	r24, 0xF0	; 240
 7ce:	91 05       	cpc	r25, r1
 7d0:	09 f0       	breq	.+2      	; 0x7d4 <__vector_15+0x15a>
 7d2:	45 c1       	rjmp	.+650    	; 0xa5e <__vector_15+0x3e4>
					forceRightSign = 0;
 7d4:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <forceRightSign>
					forceStraight=0;
 7d8:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <__data_end+0x1>
 7dc:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <__data_end>
				}
				}else if(sensor == 0x00 || sensor == 0x01 || sensor == 0x08){
 7e0:	3e c1       	rjmp	.+636    	; 0xa5e <__vector_15+0x3e4>
 7e2:	82 30       	cpi	r24, 0x02	; 2
 7e4:	10 f0       	brcs	.+4      	; 0x7ea <__vector_15+0x170>
 7e6:	28 97       	sbiw	r28, 0x08	; 8
				forceRightSign = 0;
 7e8:	29 f4       	brne	.+10     	; 0x7f4 <__vector_15+0x17a>
 7ea:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <forceRightSign>
				motor(RIGHT);                               //교차로 나타나면 플래그 초기화 하고 강제로 돌림
 7ee:	81 e0       	ldi	r24, 0x01	; 1
 7f0:	89 dd       	rcall	.-1262   	; 0x304 <motor>
				}else{
				switch(sensor){
 7f2:	35 c1       	rjmp	.+618    	; 0xa5e <__vector_15+0x3e4>
 7f4:	8d 30       	cpi	r24, 0x0D	; 13
 7f6:	b9 f0       	breq	.+46     	; 0x826 <__vector_15+0x1ac>
 7f8:	8f 30       	cpi	r24, 0x0F	; 15
 7fa:	19 f0       	breq	.+6      	; 0x802 <__vector_15+0x188>
 7fc:	8b 30       	cpi	r24, 0x0B	; 11
					case 0x0f:
					motor(STRAIGHT);
 7fe:	11 f5       	brne	.+68     	; 0x844 <__vector_15+0x1ca>
 800:	03 c0       	rjmp	.+6      	; 0x808 <__vector_15+0x18e>
 802:	80 e0       	ldi	r24, 0x00	; 0
					break;
 804:	7f dd       	rcall	.-1282   	; 0x304 <motor>
					case 0x0b:{                      //1011 -- 하나걸림 좌회전
						if(stateForceSmoth==3){
 806:	2b c1       	rjmp	.+598    	; 0xa5e <__vector_15+0x3e4>
 808:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <stateForceSmoth>
							motor(STRAIGHT);
 80c:	83 30       	cpi	r24, 0x03	; 3
 80e:	29 f4       	brne	.+10     	; 0x81a <__vector_15+0x1a0>
 810:	80 e0       	ldi	r24, 0x00	; 0
							stateForceSmoth=0;
 812:	78 dd       	rcall	.-1296   	; 0x304 <motor>
 814:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <stateForceSmoth>
							}else{
							stateForceSmoth++;
 818:	22 c1       	rjmp	.+580    	; 0xa5e <__vector_15+0x3e4>
 81a:	8f 5f       	subi	r24, 0xFF	; 255
							motor(LEFT);
 81c:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <stateForceSmoth>
 820:	82 e0       	ldi	r24, 0x02	; 2
 822:	70 dd       	rcall	.-1312   	; 0x304 <motor>
						}
						break;
					}
					case 0x0d:{                      //1101 -- 하나걸림 -우회전
						if(stateForceSmoth==3){
 824:	1c c1       	rjmp	.+568    	; 0xa5e <__vector_15+0x3e4>
 826:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <stateForceSmoth>
							motor(STRAIGHT);
 82a:	83 30       	cpi	r24, 0x03	; 3
 82c:	29 f4       	brne	.+10     	; 0x838 <__vector_15+0x1be>
							stateForceSmoth=0;
 82e:	80 e0       	ldi	r24, 0x00	; 0
 830:	69 dd       	rcall	.-1326   	; 0x304 <motor>
 832:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <stateForceSmoth>
							}else{
							stateForceSmoth++;
 836:	13 c1       	rjmp	.+550    	; 0xa5e <__vector_15+0x3e4>
 838:	8f 5f       	subi	r24, 0xFF	; 255
							motor(RIGHT);
 83a:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <stateForceSmoth>
 83e:	81 e0       	ldi	r24, 0x01	; 1
 840:	61 dd       	rcall	.-1342   	; 0x304 <motor>
						}
						break;
					}
					default:
					motor(STRAIGHT);
 842:	0d c1       	rjmp	.+538    	; 0xa5e <__vector_15+0x3e4>
 844:	80 e0       	ldi	r24, 0x00	; 0
 846:	5e dd       	rcall	.-1348   	; 0x304 <motor>
 848:	0a c1       	rjmp	.+532    	; 0xa5e <__vector_15+0x3e4>
				}
			}                                      //교차로 들어가기 전까지는 무조껀 직진
		}
		}else if(state == STATE_FORCE_LEFT){                            //-강제회전
 84a:	23 30       	cpi	r18, 0x03	; 3
 84c:	31 05       	cpc	r19, r1
 84e:	09 f0       	breq	.+2      	; 0x852 <__vector_15+0x1d8>
 850:	b9 c0       	rjmp	.+370    	; 0x9c4 <__vector_15+0x34a>
		
		if(70 > OCR0&&(smothStart>9)){
 852:	91 b7       	in	r25, 0x31	; 49
 854:	96 34       	cpi	r25, 0x46	; 70
 856:	50 f4       	brcc	.+20     	; 0x86c <__vector_15+0x1f2>
 858:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <smothStart>
 85c:	9a 30       	cpi	r25, 0x0A	; 10
 85e:	30 f0       	brcs	.+12     	; 0x86c <__vector_15+0x1f2>
			OCR0++;
 860:	91 b7       	in	r25, 0x31	; 49
 862:	9f 5f       	subi	r25, 0xFF	; 255
 864:	91 bf       	out	0x31, r25	; 49
			smothStart=0;
 866:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <smothStart>
			}else{
			smothStart++;
 86a:	05 c0       	rjmp	.+10     	; 0x876 <__vector_15+0x1fc>
 86c:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <smothStart>
 870:	9f 5f       	subi	r25, 0xFF	; 255
 872:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <smothStart>
		}
		if(!forceLeftSign){
 876:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <forceLeftSign>
			if(stateForceSmoth==3){
 87a:	91 11       	cpse	r25, r1
 87c:	29 c0       	rjmp	.+82     	; 0x8d0 <__vector_15+0x256>
 87e:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <stateForceSmoth>
				motor(STRAIGHT);
 882:	83 30       	cpi	r24, 0x03	; 3
 884:	29 f4       	brne	.+10     	; 0x890 <__vector_15+0x216>
 886:	80 e0       	ldi	r24, 0x00	; 0
				stateForceSmoth=0;
 888:	3d dd       	rcall	.-1414   	; 0x304 <motor>
 88a:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <stateForceSmoth>
				}else{
				stateForceSmoth++;
 88e:	05 c0       	rjmp	.+10     	; 0x89a <__vector_15+0x220>
 890:	8f 5f       	subi	r24, 0xFF	; 255
 892:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <stateForceSmoth>
				motor(LEFT);
 896:	82 e0       	ldi	r24, 0x02	; 2
 898:	35 dd       	rcall	.-1430   	; 0x304 <motor>
			}
			forceStraight++;                                           //교차로에 들어간 뒤엔 회전만 합니다
 89a:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
 89e:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
 8a2:	01 96       	adiw	r24, 0x01	; 1
 8a4:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <__data_end+0x1>
 8a8:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
			if((forceStraight>80)&&(sensor == 0x0b)){                                        //강제 회전하다 라인 잡히면 트랙 타기
 8ac:	81 35       	cpi	r24, 0x51	; 81
 8ae:	91 05       	cpc	r25, r1
 8b0:	0c f4       	brge	.+2      	; 0x8b4 <__vector_15+0x23a>
 8b2:	d5 c0       	rjmp	.+426    	; 0xa5e <__vector_15+0x3e4>
 8b4:	2b 97       	sbiw	r28, 0x0b	; 11
 8b6:	09 f0       	breq	.+2      	; 0x8ba <__vector_15+0x240>
 8b8:	d2 c0       	rjmp	.+420    	; 0xa5e <__vector_15+0x3e4>
				state = STATE_RUNNING;
 8ba:	81 e0       	ldi	r24, 0x01	; 1
 8bc:	90 e0       	ldi	r25, 0x00	; 0
 8be:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <state+0x1>
 8c2:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <state>
				forceStraight=0;
 8c6:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <__data_end+0x1>
 8ca:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <__data_end>
			}
			}else{
			if(timeNum<100){
 8ce:	c7 c0       	rjmp	.+398    	; 0xa5e <__vector_15+0x3e4>
 8d0:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <timeNum>
 8d4:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <timeNum+0x1>
 8d8:	24 36       	cpi	r18, 0x64	; 100
 8da:	31 05       	cpc	r19, r1
				switch(sensor){
 8dc:	08 f0       	brcs	.+2      	; 0x8e0 <__vector_15+0x266>
 8de:	3e c0       	rjmp	.+124    	; 0x95c <__vector_15+0x2e2>
 8e0:	8d 30       	cpi	r24, 0x0D	; 13
 8e2:	b9 f0       	breq	.+46     	; 0x912 <__vector_15+0x298>
 8e4:	8f 30       	cpi	r24, 0x0F	; 15
 8e6:	19 f0       	breq	.+6      	; 0x8ee <__vector_15+0x274>
					case 0x0f:
					motor(STRAIGHT);
 8e8:	8b 30       	cpi	r24, 0x0B	; 11
 8ea:	11 f5       	brne	.+68     	; 0x930 <__vector_15+0x2b6>
 8ec:	03 c0       	rjmp	.+6      	; 0x8f4 <__vector_15+0x27a>
					break;
 8ee:	80 e0       	ldi	r24, 0x00	; 0
					case 0x0b:{                      //1011 -- 하나걸림 좌회전
						if(stateForceSmoth==3){
 8f0:	09 dd       	rcall	.-1518   	; 0x304 <motor>
 8f2:	20 c0       	rjmp	.+64     	; 0x934 <__vector_15+0x2ba>
 8f4:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <stateForceSmoth>
							motor(STRAIGHT);
 8f8:	83 30       	cpi	r24, 0x03	; 3
 8fa:	29 f4       	brne	.+10     	; 0x906 <__vector_15+0x28c>
							stateForceSmoth=0;
 8fc:	80 e0       	ldi	r24, 0x00	; 0
 8fe:	02 dd       	rcall	.-1532   	; 0x304 <motor>
 900:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <stateForceSmoth>
							}else{
							stateForceSmoth++;
 904:	17 c0       	rjmp	.+46     	; 0x934 <__vector_15+0x2ba>
							motor(LEFT);
 906:	8f 5f       	subi	r24, 0xFF	; 255
 908:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <stateForceSmoth>
						}
						break;
					}
					case 0x0d:{                      //1101 -- 하나걸림 -우회전
						if(stateForceSmoth==3){
 90c:	82 e0       	ldi	r24, 0x02	; 2
 90e:	fa dc       	rcall	.-1548   	; 0x304 <motor>
 910:	11 c0       	rjmp	.+34     	; 0x934 <__vector_15+0x2ba>
 912:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <stateForceSmoth>
							motor(STRAIGHT);
 916:	83 30       	cpi	r24, 0x03	; 3
 918:	29 f4       	brne	.+10     	; 0x924 <__vector_15+0x2aa>
							stateForceSmoth=0;
 91a:	80 e0       	ldi	r24, 0x00	; 0
 91c:	f3 dc       	rcall	.-1562   	; 0x304 <motor>
 91e:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <stateForceSmoth>
							}else{
							stateForceSmoth++;
 922:	08 c0       	rjmp	.+16     	; 0x934 <__vector_15+0x2ba>
 924:	8f 5f       	subi	r24, 0xFF	; 255
							motor(RIGHT);
 926:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <stateForceSmoth>
 92a:	81 e0       	ldi	r24, 0x01	; 1
 92c:	eb dc       	rcall	.-1578   	; 0x304 <motor>
						}
						break;
					}
					default:
					motor(STRAIGHT);
 92e:	02 c0       	rjmp	.+4      	; 0x934 <__vector_15+0x2ba>
 930:	80 e0       	ldi	r24, 0x00	; 0
 932:	e8 dc       	rcall	.-1584   	; 0x304 <motor>
				}
				forceStraight++;
 934:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
 938:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
 93c:	01 96       	adiw	r24, 0x01	; 1
 93e:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <__data_end+0x1>
 942:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
				if(forceStraight==240){
 946:	80 3f       	cpi	r24, 0xF0	; 240
 948:	91 05       	cpc	r25, r1
 94a:	09 f0       	breq	.+2      	; 0x94e <__vector_15+0x2d4>
					forceLeftSign = 0;
 94c:	88 c0       	rjmp	.+272    	; 0xa5e <__vector_15+0x3e4>
					forceStraight=0;
 94e:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <forceLeftSign>
 952:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <__data_end+0x1>
 956:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <__data_end>
					
				}
				}else if(sensor == 0x00 || sensor == 0x01 || sensor == 0x08){
 95a:	81 c0       	rjmp	.+258    	; 0xa5e <__vector_15+0x3e4>
 95c:	82 30       	cpi	r24, 0x02	; 2
				forceLeftSign = 0;
 95e:	10 f0       	brcs	.+4      	; 0x964 <__vector_15+0x2ea>
 960:	28 97       	sbiw	r28, 0x08	; 8
				motor(LEFT);                               //교차로 나타나면 플래그 초기화 하고 강제로 돌림
 962:	29 f4       	brne	.+10     	; 0x96e <__vector_15+0x2f4>
 964:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <forceLeftSign>
				}else{
				switch(sensor){
 968:	82 e0       	ldi	r24, 0x02	; 2
 96a:	cc dc       	rcall	.-1640   	; 0x304 <motor>
 96c:	78 c0       	rjmp	.+240    	; 0xa5e <__vector_15+0x3e4>
 96e:	8d 30       	cpi	r24, 0x0D	; 13
 970:	b9 f0       	breq	.+46     	; 0x9a0 <__vector_15+0x326>
 972:	8f 30       	cpi	r24, 0x0F	; 15
					case 0x0f:
					motor(STRAIGHT);
 974:	19 f0       	breq	.+6      	; 0x97c <__vector_15+0x302>
 976:	8b 30       	cpi	r24, 0x0B	; 11
 978:	11 f5       	brne	.+68     	; 0x9be <__vector_15+0x344>
					break;
 97a:	03 c0       	rjmp	.+6      	; 0x982 <__vector_15+0x308>
					case 0x0b:{                      //1011 -- 하나걸림 좌회전
						if(stateForceSmoth==3){
 97c:	80 e0       	ldi	r24, 0x00	; 0
 97e:	c2 dc       	rcall	.-1660   	; 0x304 <motor>
 980:	6e c0       	rjmp	.+220    	; 0xa5e <__vector_15+0x3e4>
							motor(STRAIGHT);
 982:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <stateForceSmoth>
							stateForceSmoth=0;
 986:	83 30       	cpi	r24, 0x03	; 3
 988:	29 f4       	brne	.+10     	; 0x994 <__vector_15+0x31a>
 98a:	80 e0       	ldi	r24, 0x00	; 0
							}else{
							stateForceSmoth++;
 98c:	bb dc       	rcall	.-1674   	; 0x304 <motor>
 98e:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <stateForceSmoth>
							motor(LEFT);
 992:	65 c0       	rjmp	.+202    	; 0xa5e <__vector_15+0x3e4>
 994:	8f 5f       	subi	r24, 0xFF	; 255
 996:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <stateForceSmoth>
						}
						break;
					}
					case 0x0d:{                      //1101 -- 하나걸림 -우회전
						if(stateForceSmoth==3){
 99a:	82 e0       	ldi	r24, 0x02	; 2
 99c:	b3 dc       	rcall	.-1690   	; 0x304 <motor>
 99e:	5f c0       	rjmp	.+190    	; 0xa5e <__vector_15+0x3e4>
 9a0:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <stateForceSmoth>
							motor(STRAIGHT);
 9a4:	83 30       	cpi	r24, 0x03	; 3
 9a6:	29 f4       	brne	.+10     	; 0x9b2 <__vector_15+0x338>
							stateForceSmoth=0;
 9a8:	80 e0       	ldi	r24, 0x00	; 0
 9aa:	ac dc       	rcall	.-1704   	; 0x304 <motor>
 9ac:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <stateForceSmoth>
							}else{
							stateForceSmoth++;
 9b0:	56 c0       	rjmp	.+172    	; 0xa5e <__vector_15+0x3e4>
							motor(RIGHT);
 9b2:	8f 5f       	subi	r24, 0xFF	; 255
 9b4:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <stateForceSmoth>
						}
						break;
					}
					default:
					motor(STRAIGHT);
 9b8:	81 e0       	ldi	r24, 0x01	; 1
 9ba:	a4 dc       	rcall	.-1720   	; 0x304 <motor>
 9bc:	50 c0       	rjmp	.+160    	; 0xa5e <__vector_15+0x3e4>
 9be:	80 e0       	ldi	r24, 0x00	; 0
				}                                        //교차로 들어가기 전까지는 무조껀 직진
			}
		}
		}else if(state == STATE_CALIB_RIGHT){                           //-교차로를 틀어져서 왼쪽으로 들어갈때 칼리브레이션
 9c0:	a1 dc       	rcall	.-1726   	; 0x304 <motor>
 9c2:	4d c0       	rjmp	.+154    	; 0xa5e <__vector_15+0x3e4>
 9c4:	24 30       	cpi	r18, 0x04	; 4
		if(sensor == 0x0b||sensor == 0x0d){                         //레일 위로 돌아가면 종료
 9c6:	31 05       	cpc	r19, r1
 9c8:	a9 f4       	brne	.+42     	; 0x9f4 <__vector_15+0x37a>
 9ca:	cb 30       	cpi	r28, 0x0B	; 11
 9cc:	d1 05       	cpc	r29, r1
 9ce:	19 f0       	breq	.+6      	; 0x9d6 <__vector_15+0x35c>
 9d0:	cd 30       	cpi	r28, 0x0D	; 13
			state = STATE_RUNNING;
 9d2:	d1 05       	cpc	r29, r1
 9d4:	39 f4       	brne	.+14     	; 0x9e4 <__vector_15+0x36a>
 9d6:	81 e0       	ldi	r24, 0x01	; 1
 9d8:	90 e0       	ldi	r25, 0x00	; 0
 9da:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <state+0x1>
			}else if(sensor == 0x0f){                                   //하나도 안걸릴때 일딴 오른쪽으로 돌림
 9de:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <state>
			motor(RIGHT);
 9e2:	3d c0       	rjmp	.+122    	; 0xa5e <__vector_15+0x3e4>
 9e4:	2f 97       	sbiw	r28, 0x0f	; 15
 9e6:	19 f4       	brne	.+6      	; 0x9ee <__vector_15+0x374>
			}else{                                                      //교차로를 나오기 전까지는 무조껀 직진
			motor(STRAIGHT);
 9e8:	81 e0       	ldi	r24, 0x01	; 1
 9ea:	8c dc       	rcall	.-1768   	; 0x304 <motor>
 9ec:	38 c0       	rjmp	.+112    	; 0xa5e <__vector_15+0x3e4>
 9ee:	80 e0       	ldi	r24, 0x00	; 0
		}
		}else if(state == STATE_CALIB_LEFT){                            //-교차로를 틀어져서 오른쪽으로 들어갈때 칼리브레이션
 9f0:	89 dc       	rcall	.-1774   	; 0x304 <motor>
 9f2:	35 c0       	rjmp	.+106    	; 0xa5e <__vector_15+0x3e4>
 9f4:	25 30       	cpi	r18, 0x05	; 5
		if(sensor == 0x0b||sensor == 0x0d){                         //레일 위로 돌아가면 종료
 9f6:	31 05       	cpc	r19, r1
 9f8:	a9 f4       	brne	.+42     	; 0xa24 <__vector_15+0x3aa>
 9fa:	cb 30       	cpi	r28, 0x0B	; 11
 9fc:	d1 05       	cpc	r29, r1
 9fe:	19 f0       	breq	.+6      	; 0xa06 <__vector_15+0x38c>
 a00:	cd 30       	cpi	r28, 0x0D	; 13
			state = STATE_RUNNING;
 a02:	d1 05       	cpc	r29, r1
 a04:	39 f4       	brne	.+14     	; 0xa14 <__vector_15+0x39a>
 a06:	81 e0       	ldi	r24, 0x01	; 1
 a08:	90 e0       	ldi	r25, 0x00	; 0
 a0a:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <state+0x1>
 a0e:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <state>
			}else if(sensor == 0x0f){                                   //하나도 안걸릴때 일딴 오른쪽으로 돌림
 a12:	25 c0       	rjmp	.+74     	; 0xa5e <__vector_15+0x3e4>
			motor(LEFT);
 a14:	2f 97       	sbiw	r28, 0x0f	; 15
 a16:	19 f4       	brne	.+6      	; 0xa1e <__vector_15+0x3a4>
 a18:	82 e0       	ldi	r24, 0x02	; 2
			}else{                                                      //교차로를 나오기 전까지는 무조껀 직진
			motor(STRAIGHT);
 a1a:	74 dc       	rcall	.-1816   	; 0x304 <motor>
 a1c:	20 c0       	rjmp	.+64     	; 0xa5e <__vector_15+0x3e4>
 a1e:	80 e0       	ldi	r24, 0x00	; 0
 a20:	71 dc       	rcall	.-1822   	; 0x304 <motor>
		}
		}else if(state == STATE_RUNNING){
 a22:	1d c0       	rjmp	.+58     	; 0xa5e <__vector_15+0x3e4>
 a24:	21 30       	cpi	r18, 0x01	; 1
 a26:	31 05       	cpc	r19, r1
		if(timeNum < OCR0&&(smothStart > 20)){
 a28:	d1 f4       	brne	.+52     	; 0xa5e <__vector_15+0x3e4>
 a2a:	81 b7       	in	r24, 0x31	; 49
 a2c:	90 e0       	ldi	r25, 0x00	; 0
 a2e:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <timeNum>
 a32:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <timeNum+0x1>
 a36:	28 17       	cp	r18, r24
 a38:	39 07       	cpc	r19, r25
 a3a:	50 f4       	brcc	.+20     	; 0xa50 <__vector_15+0x3d6>
 a3c:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <smothStart>
 a40:	85 31       	cpi	r24, 0x15	; 21
			OCR0--;
 a42:	30 f0       	brcs	.+12     	; 0xa50 <__vector_15+0x3d6>
 a44:	81 b7       	in	r24, 0x31	; 49
 a46:	81 50       	subi	r24, 0x01	; 1
			smothStart=0;
 a48:	81 bf       	out	0x31, r24	; 49
 a4a:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <smothStart>
			}else{
			smothStart++;
 a4e:	05 c0       	rjmp	.+10     	; 0xa5a <__vector_15+0x3e0>
 a50:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <smothStart>
 a54:	8f 5f       	subi	r24, 0xFF	; 255
 a56:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <smothStart>
		}
		
		sensorScan(sensor);                    //일반적인 라인 팔로잉 상태
 a5a:	ce 01       	movw	r24, r28
 a5c:	c5 dc       	rcall	.-1654   	; 0x3e8 <sensorScan>
	}
}
 a5e:	ff 91       	pop	r31
 a60:	ef 91       	pop	r30
 a62:	df 91       	pop	r29
 a64:	cf 91       	pop	r28
 a66:	bf 91       	pop	r27
 a68:	af 91       	pop	r26
 a6a:	9f 91       	pop	r25
 a6c:	8f 91       	pop	r24
 a6e:	7f 91       	pop	r23
 a70:	6f 91       	pop	r22
 a72:	5f 91       	pop	r21
 a74:	4f 91       	pop	r20
 a76:	3f 91       	pop	r19
 a78:	2f 91       	pop	r18
 a7a:	0f 90       	pop	r0
 a7c:	0b be       	out	0x3b, r0	; 59
 a7e:	0f 90       	pop	r0
 a80:	0f be       	out	0x3f, r0	; 63
 a82:	0f 90       	pop	r0
 a84:	1f 90       	pop	r1
 a86:	18 95       	reti

00000a88 <main>:
///////////////////interrupt service routine end////////////////////////

int main(void){

	//initialize port and interrupt
	initDevices();
 a88:	6f db       	rcall	.-2338   	; 0x168 <initDevices>
	initSegment();
 a8a:	16 dc       	rcall	.-2004   	; 0x2b8 <initSegment>
	initInterrupt();
 a8c:	1e dc       	rcall	.-1988   	; 0x2ca <initInterrupt>
	initTimerInterrupt();
 a8e:	30 dc       	rcall	.-1952   	; 0x2f0 <initTimerInterrupt>
 a90:	43 db       	rcall	.-2426   	; 0x118 <initFlag>
	initFlag();
 a92:	8f ef       	ldi	r24, 0xFF	; 255
 a94:	81 bb       	out	0x11, r24	; 17
	
	MOTOR_PORT_DDR = 0xff;
 a96:	78 94       	sei
 a98:	0f 2e       	mov	r0, r31
	//Global Interrupt Enable
	sei();
 a9a:	f8 ee       	ldi	r31, 0xE8	; 232
	//print 7segment by global variable timeNum
	//timeNum variable is state and OCR0
	while (1){
		//segment print
		for(int i = 0; i < 4; i++){
			printSeg(((state*1000 + timeNum)/exp10[i])%10,3-i); //OCR0를 세그먼트에 출력합니다.
 a9c:	ef 2e       	mov	r14, r31
 a9e:	f3 e0       	ldi	r31, 0x03	; 3
 aa0:	ff 2e       	mov	r15, r31
 aa2:	f0 2d       	mov	r31, r0
 aa4:	04 e0       	ldi	r16, 0x04	; 4
 aa6:	11 e0       	ldi	r17, 0x01	; 1
 aa8:	c3 e0       	ldi	r28, 0x03	; 3
 aaa:	d0 e0       	ldi	r29, 0x00	; 0
		sensorScan(sensor);                    //일반적인 라인 팔로잉 상태
	}
}
///////////////////interrupt service routine end////////////////////////

int main(void){
 aac:	f8 01       	movw	r30, r16
 aae:	61 91       	ld	r22, Z+
	//print 7segment by global variable timeNum
	//timeNum variable is state and OCR0
	while (1){
		//segment print
		for(int i = 0; i < 4; i++){
			printSeg(((state*1000 + timeNum)/exp10[i])%10,3-i); //OCR0를 세그먼트에 출력합니다.
 ab0:	71 91       	ld	r23, Z+
 ab2:	8f 01       	movw	r16, r30
 ab4:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <state>
 ab8:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <state+0x1>
 abc:	8e 9d       	mul	r24, r14
 abe:	90 01       	movw	r18, r0
 ac0:	8f 9d       	mul	r24, r15
 ac2:	30 0d       	add	r19, r0
 ac4:	9e 9d       	mul	r25, r14
 ac6:	30 0d       	add	r19, r0
 ac8:	11 24       	eor	r1, r1
 aca:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <timeNum>
 ace:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <timeNum+0x1>
 ad2:	82 0f       	add	r24, r18
 ad4:	93 1f       	adc	r25, r19
 ad6:	1f d0       	rcall	.+62     	; 0xb16 <__udivmodhi4>
 ad8:	ab 01       	movw	r20, r22
 ada:	9b 01       	movw	r18, r22
 adc:	ad ec       	ldi	r26, 0xCD	; 205
 ade:	bc ec       	ldi	r27, 0xCC	; 204
 ae0:	37 d0       	rcall	.+110    	; 0xb50 <__umulhisi3>
 ae2:	96 95       	lsr	r25
 ae4:	87 95       	ror	r24
 ae6:	96 95       	lsr	r25
 ae8:	87 95       	ror	r24
 aea:	96 95       	lsr	r25
 aec:	87 95       	ror	r24
 aee:	9c 01       	movw	r18, r24
 af0:	22 0f       	add	r18, r18
 af2:	33 1f       	adc	r19, r19
 af4:	88 0f       	add	r24, r24
 af6:	99 1f       	adc	r25, r25
 af8:	88 0f       	add	r24, r24
 afa:	99 1f       	adc	r25, r25
 afc:	88 0f       	add	r24, r24
 afe:	99 1f       	adc	r25, r25
 b00:	82 0f       	add	r24, r18
 b02:	93 1f       	adc	r25, r19
 b04:	be 01       	movw	r22, r28
 b06:	9a 01       	movw	r18, r20
 b08:	28 1b       	sub	r18, r24
 b0a:	39 0b       	sbc	r19, r25
 b0c:	c9 01       	movw	r24, r18
 b0e:	c5 db       	rcall	.-2166   	; 0x29a <printSeg>
 b10:	21 97       	sbiw	r28, 0x01	; 1
 b12:	60 f6       	brcc	.-104    	; 0xaac <main+0x24>
 b14:	c7 cf       	rjmp	.-114    	; 0xaa4 <main+0x1c>

00000b16 <__udivmodhi4>:
 b16:	aa 1b       	sub	r26, r26
 b18:	bb 1b       	sub	r27, r27
 b1a:	51 e1       	ldi	r21, 0x11	; 17
 b1c:	07 c0       	rjmp	.+14     	; 0xb2c <__udivmodhi4_ep>

00000b1e <__udivmodhi4_loop>:
 b1e:	aa 1f       	adc	r26, r26
 b20:	bb 1f       	adc	r27, r27
 b22:	a6 17       	cp	r26, r22
 b24:	b7 07       	cpc	r27, r23
 b26:	10 f0       	brcs	.+4      	; 0xb2c <__udivmodhi4_ep>
 b28:	a6 1b       	sub	r26, r22
 b2a:	b7 0b       	sbc	r27, r23

00000b2c <__udivmodhi4_ep>:
 b2c:	88 1f       	adc	r24, r24
 b2e:	99 1f       	adc	r25, r25
 b30:	5a 95       	dec	r21
 b32:	a9 f7       	brne	.-22     	; 0xb1e <__udivmodhi4_loop>
 b34:	80 95       	com	r24
 b36:	90 95       	com	r25
 b38:	bc 01       	movw	r22, r24
 b3a:	cd 01       	movw	r24, r26
 b3c:	08 95       	ret

00000b3e <__tablejump2__>:
 b3e:	ee 0f       	add	r30, r30
 b40:	ff 1f       	adc	r31, r31
 b42:	00 24       	eor	r0, r0
 b44:	00 1c       	adc	r0, r0
 b46:	0b be       	out	0x3b, r0	; 59
 b48:	07 90       	elpm	r0, Z+
 b4a:	f6 91       	elpm	r31, Z
 b4c:	e0 2d       	mov	r30, r0
 b4e:	09 94       	ijmp

00000b50 <__umulhisi3>:
 b50:	a2 9f       	mul	r26, r18
 b52:	b0 01       	movw	r22, r0
 b54:	b3 9f       	mul	r27, r19
 b56:	c0 01       	movw	r24, r0
 b58:	a3 9f       	mul	r26, r19
 b5a:	70 0d       	add	r23, r0
 b5c:	81 1d       	adc	r24, r1
 b5e:	11 24       	eor	r1, r1
 b60:	91 1d       	adc	r25, r1
 b62:	b2 9f       	mul	r27, r18
 b64:	70 0d       	add	r23, r0
 b66:	81 1d       	adc	r24, r1
 b68:	11 24       	eor	r1, r1
 b6a:	91 1d       	adc	r25, r1
 b6c:	08 95       	ret

00000b6e <_exit>:
 b6e:	f8 94       	cli

00000b70 <__stop_program>:
 b70:	ff cf       	rjmp	.-2      	; 0xb70 <__stop_program>
