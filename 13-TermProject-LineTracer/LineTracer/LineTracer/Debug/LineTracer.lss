
LineTracer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00000906  0000099a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000906  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  0080011a  0080011a  000009b4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009b4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000a24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f50  00000000  00000000  00000ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008ed  00000000  00000000  00001a14  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a31  00000000  00000000  00002301  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000019c  00000000  00000000  00002d34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e6  00000000  00000000  00002ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000652  00000000  00000000  000034b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00003b08  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	6d c0       	rjmp	.+218    	; 0xdc <__ctors_end>
   2:	00 00       	nop
   4:	88 c0       	rjmp	.+272    	; 0x116 <__bad_interrupt>
   6:	00 00       	nop
   8:	86 c0       	rjmp	.+268    	; 0x116 <__bad_interrupt>
   a:	00 00       	nop
   c:	84 c0       	rjmp	.+264    	; 0x116 <__bad_interrupt>
   e:	00 00       	nop
  10:	82 c0       	rjmp	.+260    	; 0x116 <__bad_interrupt>
  12:	00 00       	nop
  14:	ab c1       	rjmp	.+854    	; 0x36c <__vector_5>
  16:	00 00       	nop
  18:	95 c1       	rjmp	.+810    	; 0x344 <__vector_6>
  1a:	00 00       	nop
  1c:	7c c0       	rjmp	.+248    	; 0x116 <__bad_interrupt>
  1e:	00 00       	nop
  20:	7a c0       	rjmp	.+244    	; 0x116 <__bad_interrupt>
  22:	00 00       	nop
  24:	78 c0       	rjmp	.+240    	; 0x116 <__bad_interrupt>
  26:	00 00       	nop
  28:	76 c0       	rjmp	.+236    	; 0x116 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	74 c0       	rjmp	.+232    	; 0x116 <__bad_interrupt>
  2e:	00 00       	nop
  30:	72 c0       	rjmp	.+228    	; 0x116 <__bad_interrupt>
  32:	00 00       	nop
  34:	70 c0       	rjmp	.+224    	; 0x116 <__bad_interrupt>
  36:	00 00       	nop
  38:	6e c0       	rjmp	.+220    	; 0x116 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	64 c2       	rjmp	.+1224   	; 0x506 <__vector_15>
  3e:	00 00       	nop
  40:	6a c0       	rjmp	.+212    	; 0x116 <__bad_interrupt>
  42:	00 00       	nop
  44:	68 c0       	rjmp	.+208    	; 0x116 <__bad_interrupt>
  46:	00 00       	nop
  48:	66 c0       	rjmp	.+204    	; 0x116 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	64 c0       	rjmp	.+200    	; 0x116 <__bad_interrupt>
  4e:	00 00       	nop
  50:	62 c0       	rjmp	.+196    	; 0x116 <__bad_interrupt>
  52:	00 00       	nop
  54:	60 c0       	rjmp	.+192    	; 0x116 <__bad_interrupt>
  56:	00 00       	nop
  58:	5e c0       	rjmp	.+188    	; 0x116 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5c c0       	rjmp	.+184    	; 0x116 <__bad_interrupt>
  5e:	00 00       	nop
  60:	5a c0       	rjmp	.+180    	; 0x116 <__bad_interrupt>
  62:	00 00       	nop
  64:	58 c0       	rjmp	.+176    	; 0x116 <__bad_interrupt>
  66:	00 00       	nop
  68:	56 c0       	rjmp	.+172    	; 0x116 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	54 c0       	rjmp	.+168    	; 0x116 <__bad_interrupt>
  6e:	00 00       	nop
  70:	52 c0       	rjmp	.+164    	; 0x116 <__bad_interrupt>
  72:	00 00       	nop
  74:	50 c0       	rjmp	.+160    	; 0x116 <__bad_interrupt>
  76:	00 00       	nop
  78:	4e c0       	rjmp	.+156    	; 0x116 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4c c0       	rjmp	.+152    	; 0x116 <__bad_interrupt>
  7e:	00 00       	nop
  80:	4a c0       	rjmp	.+148    	; 0x116 <__bad_interrupt>
  82:	00 00       	nop
  84:	48 c0       	rjmp	.+144    	; 0x116 <__bad_interrupt>
  86:	00 00       	nop
  88:	46 c0       	rjmp	.+140    	; 0x116 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	cf 00       	.word	0x00cf	; ????
  8e:	d3 00       	.word	0x00d3	; ????
  90:	d1 00       	.word	0x00d1	; ????
  92:	d7 00       	.word	0x00d7	; ????
  94:	dd 00       	.word	0x00dd	; ????
  96:	d5 00       	.word	0x00d5	; ????
  98:	dd 00       	.word	0x00dd	; ????
  9a:	db 00       	.word	0x00db	; ????
  9c:	f8 00       	.word	0x00f8	; ????
  9e:	dd 00       	.word	0x00dd	; ????
  a0:	dd 00       	.word	0x00dd	; ????
  a2:	d9 00       	.word	0x00d9	; ????
  a4:	e8 00       	.word	0x00e8	; ????
  a6:	ec 00       	.word	0x00ec	; ????
  a8:	ea 00       	.word	0x00ea	; ????
  aa:	f0 00       	.word	0x00f0	; ????
  ac:	f6 00       	.word	0x00f6	; ????
  ae:	ee 00       	.word	0x00ee	; ????
  b0:	f6 00       	.word	0x00f6	; ????
  b2:	f4 00       	.word	0x00f4	; ????
  b4:	fa 00       	.word	0x00fa	; ????
  b6:	f6 00       	.word	0x00f6	; ????
  b8:	f6 00       	.word	0x00f6	; ????
  ba:	f2 00       	.word	0x00f2	; ????
  bc:	75 02       	muls	r23, r21
  be:	4f 02       	muls	r20, r31
  c0:	49 02       	muls	r20, r25
  c2:	80 02       	muls	r24, r16
  c4:	49 02       	muls	r20, r25
  c6:	3d 02       	muls	r19, r29
  c8:	49 02       	muls	r20, r25
  ca:	3d 02       	muls	r19, r29
  cc:	62 02       	muls	r22, r18
  ce:	80 02       	muls	r24, r16
  d0:	43 02       	muls	r20, r19
  d2:	1f 02       	muls	r17, r31
  d4:	80 02       	muls	r24, r16
  d6:	2e 02       	muls	r18, r30
  d8:	43 02       	muls	r20, r19
  da:	f0 01       	movw	r30, r0

000000dc <__ctors_end>:
  dc:	11 24       	eor	r1, r1
  de:	1f be       	out	0x3f, r1	; 63
  e0:	cf ef       	ldi	r28, 0xFF	; 255
  e2:	d0 e1       	ldi	r29, 0x10	; 16
  e4:	de bf       	out	0x3e, r29	; 62
  e6:	cd bf       	out	0x3d, r28	; 61

000000e8 <__do_copy_data>:
  e8:	11 e0       	ldi	r17, 0x01	; 1
  ea:	a0 e0       	ldi	r26, 0x00	; 0
  ec:	b1 e0       	ldi	r27, 0x01	; 1
  ee:	e6 e0       	ldi	r30, 0x06	; 6
  f0:	f9 e0       	ldi	r31, 0x09	; 9
  f2:	00 e0       	ldi	r16, 0x00	; 0
  f4:	0b bf       	out	0x3b, r16	; 59
  f6:	02 c0       	rjmp	.+4      	; 0xfc <__do_copy_data+0x14>
  f8:	07 90       	elpm	r0, Z+
  fa:	0d 92       	st	X+, r0
  fc:	aa 31       	cpi	r26, 0x1A	; 26
  fe:	b1 07       	cpc	r27, r17
 100:	d9 f7       	brne	.-10     	; 0xf8 <__do_copy_data+0x10>

00000102 <__do_clear_bss>:
 102:	21 e0       	ldi	r18, 0x01	; 1
 104:	aa e1       	ldi	r26, 0x1A	; 26
 106:	b1 e0       	ldi	r27, 0x01	; 1
 108:	01 c0       	rjmp	.+2      	; 0x10c <.do_clear_bss_start>

0000010a <.do_clear_bss_loop>:
 10a:	1d 92       	st	X+, r1

0000010c <.do_clear_bss_start>:
 10c:	aa 32       	cpi	r26, 0x2A	; 42
 10e:	b2 07       	cpc	r27, r18
 110:	e1 f7       	brne	.-8      	; 0x10a <.do_clear_bss_loop>
 112:	84 d3       	rcall	.+1800   	; 0x81c <main>
 114:	f6 c3       	rjmp	.+2028   	; 0x902 <_exit>

00000116 <__bad_interrupt>:
 116:	74 cf       	rjmp	.-280    	; 0x0 <__vectors>

00000118 <initFlag>:
			case 0x80: step=0x10; break;
			default: step=0x80; break;
		}
	}
	return step;
}
 118:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <motorForceLeftFlag>
 11c:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <motorForceRightFlag>
 120:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <countStopSign>
 124:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <stopSign>
 128:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <forceRightSign>
 12c:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <forceLeftSign>
 130:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <calibLeft>
 134:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <calibRight>
 138:	84 e6       	ldi	r24, 0x64	; 100
 13a:	81 bf       	out	0x31, r24	; 49
 13c:	08 95       	ret

0000013e <initPort>:
 13e:	1b ba       	out	0x1b, r1	; 27
 140:	1a ba       	out	0x1a, r1	; 26
 142:	18 ba       	out	0x18, r1	; 24
 144:	17 ba       	out	0x17, r1	; 23
 146:	15 ba       	out	0x15, r1	; 21
 148:	14 ba       	out	0x14, r1	; 20
 14a:	12 ba       	out	0x12, r1	; 18
 14c:	8f ef       	ldi	r24, 0xFF	; 255
 14e:	81 bb       	out	0x11, r24	; 17
 150:	13 b8       	out	0x03, r1	; 3
 152:	12 b8       	out	0x02, r1	; 2
 154:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 158:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 15c:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
 160:	83 e0       	ldi	r24, 0x03	; 3
 162:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
 166:	08 95       	ret

00000168 <initDevices>:
 168:	f8 94       	cli
 16a:	1c be       	out	0x3c, r1	; 60
 16c:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
 170:	e6 df       	rcall	.-52     	; 0x13e <initPort>
 172:	15 be       	out	0x35, r1	; 53
 174:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
 178:	1a be       	out	0x3a, r1	; 58
 17a:	19 be       	out	0x39, r1	; 57
 17c:	17 be       	out	0x37, r1	; 55
 17e:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <__TEXT_REGION_LENGTH__+0x7e007d>
 182:	78 94       	sei
 184:	08 95       	ret

00000186 <LEFTmotorOneClock>:
 186:	8f 70       	andi	r24, 0x0F	; 15
 188:	66 23       	and	r22, r22
 18a:	c9 f0       	breq	.+50     	; 0x1be <LEFTmotorOneClock+0x38>
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	fc 01       	movw	r30, r24
 190:	31 97       	sbiw	r30, 0x01	; 1
 192:	ec 30       	cpi	r30, 0x0C	; 12
 194:	f1 05       	cpc	r31, r1
 196:	88 f4       	brcc	.+34     	; 0x1ba <LEFTmotorOneClock+0x34>
 198:	ea 5b       	subi	r30, 0xBA	; 186
 19a:	ff 4f       	sbci	r31, 0xFF	; 255
 19c:	9a c3       	rjmp	.+1844   	; 0x8d2 <__tablejump2__>
 19e:	83 e0       	ldi	r24, 0x03	; 3
 1a0:	08 95       	ret
 1a2:	82 e0       	ldi	r24, 0x02	; 2
 1a4:	08 95       	ret
 1a6:	86 e0       	ldi	r24, 0x06	; 6
 1a8:	08 95       	ret
 1aa:	84 e0       	ldi	r24, 0x04	; 4
 1ac:	08 95       	ret
 1ae:	8c e0       	ldi	r24, 0x0C	; 12
 1b0:	08 95       	ret
 1b2:	88 e0       	ldi	r24, 0x08	; 8
 1b4:	08 95       	ret
 1b6:	89 e0       	ldi	r24, 0x09	; 9
 1b8:	08 95       	ret
 1ba:	8c e0       	ldi	r24, 0x0C	; 12
 1bc:	08 95       	ret
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	fc 01       	movw	r30, r24
 1c2:	31 97       	sbiw	r30, 0x01	; 1
 1c4:	ec 30       	cpi	r30, 0x0C	; 12
 1c6:	f1 05       	cpc	r31, r1
 1c8:	88 f4       	brcc	.+34     	; 0x1ec <LEFTmotorOneClock+0x66>
 1ca:	ee 5a       	subi	r30, 0xAE	; 174
 1cc:	ff 4f       	sbci	r31, 0xFF	; 255
 1ce:	81 c3       	rjmp	.+1794   	; 0x8d2 <__tablejump2__>
 1d0:	89 e0       	ldi	r24, 0x09	; 9
 1d2:	08 95       	ret
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	08 95       	ret
 1d8:	83 e0       	ldi	r24, 0x03	; 3
 1da:	08 95       	ret
 1dc:	82 e0       	ldi	r24, 0x02	; 2
 1de:	08 95       	ret
 1e0:	86 e0       	ldi	r24, 0x06	; 6
 1e2:	08 95       	ret
 1e4:	84 e0       	ldi	r24, 0x04	; 4
 1e6:	08 95       	ret
 1e8:	8c e0       	ldi	r24, 0x0C	; 12
 1ea:	08 95       	ret
 1ec:	8c e0       	ldi	r24, 0x0C	; 12
 1ee:	08 95       	ret
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	08 95       	ret
 1f4:	88 e0       	ldi	r24, 0x08	; 8
 1f6:	08 95       	ret

000001f8 <RIGHTmotorOneClock>:
	

unsigned char  RIGHTmotorOneClock(unsigned char step, char dir)
{    
    step = step & 0xf0;
 1f8:	80 7f       	andi	r24, 0xF0	; 240
    if(dir){
 1fa:	66 23       	and	r22, r22
 1fc:	29 f1       	breq	.+74     	; 0x248 <RIGHTmotorOneClock+0x50>
        switch(step){//후진
 1fe:	80 34       	cpi	r24, 0x40	; 64
 200:	d9 f0       	breq	.+54     	; 0x238 <RIGHTmotorOneClock+0x40>
 202:	38 f4       	brcc	.+14     	; 0x212 <RIGHTmotorOneClock+0x1a>
 204:	80 32       	cpi	r24, 0x20	; 32
 206:	a1 f0       	breq	.+40     	; 0x230 <RIGHTmotorOneClock+0x38>
 208:	80 33       	cpi	r24, 0x30	; 48
 20a:	81 f0       	breq	.+32     	; 0x22c <RIGHTmotorOneClock+0x34>
 20c:	80 31       	cpi	r24, 0x10	; 16
 20e:	d1 f4       	brne	.+52     	; 0x244 <RIGHTmotorOneClock+0x4c>
 210:	0b c0       	rjmp	.+22     	; 0x228 <RIGHTmotorOneClock+0x30>
 212:	80 38       	cpi	r24, 0x80	; 128
 214:	a9 f0       	breq	.+42     	; 0x240 <RIGHTmotorOneClock+0x48>
 216:	18 f4       	brcc	.+6      	; 0x21e <RIGHTmotorOneClock+0x26>
 218:	80 36       	cpi	r24, 0x60	; 96
 21a:	61 f0       	breq	.+24     	; 0x234 <RIGHTmotorOneClock+0x3c>
 21c:	13 c0       	rjmp	.+38     	; 0x244 <RIGHTmotorOneClock+0x4c>
 21e:	80 39       	cpi	r24, 0x90	; 144
 220:	c1 f1       	breq	.+112    	; 0x292 <RIGHTmotorOneClock+0x9a>
 222:	80 3c       	cpi	r24, 0xC0	; 192
 224:	59 f0       	breq	.+22     	; 0x23c <RIGHTmotorOneClock+0x44>
 226:	0e c0       	rjmp	.+28     	; 0x244 <RIGHTmotorOneClock+0x4c>
            case 0x90: step=0x10; break;
            case 0x10: step=0x30; break;
 228:	80 e3       	ldi	r24, 0x30	; 48
 22a:	08 95       	ret
            case 0x30: step=0x20; break;
 22c:	80 e2       	ldi	r24, 0x20	; 32
 22e:	08 95       	ret
            case 0x20: step=0x60; break;
 230:	80 e6       	ldi	r24, 0x60	; 96
 232:	08 95       	ret
            case 0x60: step=0x40; break;
 234:	80 e4       	ldi	r24, 0x40	; 64
 236:	08 95       	ret
            case 0x40: step=0xc0; break;
 238:	80 ec       	ldi	r24, 0xC0	; 192
 23a:	08 95       	ret
            case 0xc0: step=0x80; break;
 23c:	80 e8       	ldi	r24, 0x80	; 128
 23e:	08 95       	ret
            case 0x80: step=0x90; break;
 240:	80 e9       	ldi	r24, 0x90	; 144
 242:	08 95       	ret
            default: step=0xc0; break;
 244:	80 ec       	ldi	r24, 0xC0	; 192
 246:	08 95       	ret
        }
    }else{  
        switch(step){//전진
 248:	80 34       	cpi	r24, 0x40	; 64
 24a:	d9 f0       	breq	.+54     	; 0x282 <RIGHTmotorOneClock+0x8a>
 24c:	38 f4       	brcc	.+14     	; 0x25c <RIGHTmotorOneClock+0x64>
 24e:	80 32       	cpi	r24, 0x20	; 32
 250:	a1 f0       	breq	.+40     	; 0x27a <RIGHTmotorOneClock+0x82>
 252:	80 33       	cpi	r24, 0x30	; 48
 254:	81 f0       	breq	.+32     	; 0x276 <RIGHTmotorOneClock+0x7e>
 256:	80 31       	cpi	r24, 0x10	; 16
 258:	d1 f4       	brne	.+52     	; 0x28e <RIGHTmotorOneClock+0x96>
 25a:	0b c0       	rjmp	.+22     	; 0x272 <RIGHTmotorOneClock+0x7a>
 25c:	80 38       	cpi	r24, 0x80	; 128
 25e:	a9 f0       	breq	.+42     	; 0x28a <RIGHTmotorOneClock+0x92>
 260:	18 f4       	brcc	.+6      	; 0x268 <RIGHTmotorOneClock+0x70>
 262:	80 36       	cpi	r24, 0x60	; 96
 264:	61 f0       	breq	.+24     	; 0x27e <RIGHTmotorOneClock+0x86>
 266:	13 c0       	rjmp	.+38     	; 0x28e <RIGHTmotorOneClock+0x96>
 268:	80 39       	cpi	r24, 0x90	; 144
 26a:	a9 f0       	breq	.+42     	; 0x296 <RIGHTmotorOneClock+0x9e>
 26c:	80 3c       	cpi	r24, 0xC0	; 192
 26e:	59 f0       	breq	.+22     	; 0x286 <RIGHTmotorOneClock+0x8e>
 270:	0e c0       	rjmp	.+28     	; 0x28e <RIGHTmotorOneClock+0x96>
            case 0x90: step=0x80; break;//1001
            case 0x10: step=0x90; break;//0001
 272:	80 e9       	ldi	r24, 0x90	; 144
 274:	08 95       	ret
            case 0x30: step=0x10; break;//0011
 276:	80 e1       	ldi	r24, 0x10	; 16
 278:	08 95       	ret
            case 0x20: step=0x30; break;//0010
 27a:	80 e3       	ldi	r24, 0x30	; 48
 27c:	08 95       	ret
            case 0x60: step=0x20; break;//0110
 27e:	80 e2       	ldi	r24, 0x20	; 32
 280:	08 95       	ret
            case 0x40: step=0x60; break;//0100
 282:	80 e6       	ldi	r24, 0x60	; 96
 284:	08 95       	ret
            case 0xc0: step=0x40; break;//1100
 286:	80 e4       	ldi	r24, 0x40	; 64
 288:	08 95       	ret
            case 0x80: step=0xc0; break;//1000
 28a:	80 ec       	ldi	r24, 0xC0	; 192
 28c:	08 95       	ret
            default: step=0xc0; break;
 28e:	80 ec       	ldi	r24, 0xC0	; 192
 290:	08 95       	ret
unsigned char  RIGHTmotorOneClock(unsigned char step, char dir)
{    
    step = step & 0xf0;
    if(dir){
        switch(step){//후진
            case 0x90: step=0x10; break;
 292:	80 e1       	ldi	r24, 0x10	; 16
 294:	08 95       	ret
            case 0x80: step=0x90; break;
            default: step=0xc0; break;
        }
    }else{  
        switch(step){//전진
            case 0x90: step=0x80; break;//1001
 296:	80 e8       	ldi	r24, 0x80	; 128
            case 0x80: step=0xc0; break;//1000
            default: step=0xc0; break;
        }
    }
    return step;
}
 298:	08 95       	ret

0000029a <printSeg>:
void printSeg(int segNum, int segDigit){
    //by schematic, PORTE must being clear before set segment's digit and led.
    //because circuit use same port(A) to set segment's digit and led by latch.

    //set segment digit to print
    PORTA = FND_SEGPOS[segDigit];
 29a:	fb 01       	movw	r30, r22
 29c:	e6 5f       	subi	r30, 0xF6	; 246
 29e:	fe 4f       	sbci	r31, 0xFE	; 254
 2a0:	20 81       	ld	r18, Z
 2a2:	2b bb       	out	0x1b, r18	; 27
    PORTE |= 0x04; //set 1 segment digit latch
 2a4:	1a 9a       	sbi	0x03, 2	; 3
    PORTE &= ~(0x04); //clear LED_CTL(PE2)
 2a6:	1a 98       	cbi	0x03, 2	; 3

    //print num at segment
    PORTA = FND_SEGNP[segNum]; //print with out decimal point
 2a8:	82 5f       	subi	r24, 0xF2	; 242
 2aa:	9e 4f       	sbci	r25, 0xFE	; 254
 2ac:	fc 01       	movw	r30, r24
 2ae:	80 81       	ld	r24, Z
 2b0:	8b bb       	out	0x1b, r24	; 27
    PORTE |= 0x08; //set 1 segment led latch
 2b2:	1b 9a       	sbi	0x03, 3	; 3
    PORTE &= ~(0x08); //clear LED_DATA(PE3)
 2b4:	1b 98       	cbi	0x03, 3	; 3
 2b6:	08 95       	ret

000002b8 <initSegment>:
}

void initSegment(){
    //initialize port A and E
    DDRA = 0xFF;    //set portA(7:0) to output
 2b8:	8f ef       	ldi	r24, 0xFF	; 255
 2ba:	8a bb       	out	0x1a, r24	; 26
    DDRE |= 0x0C;   //set portE(3:2) to output
 2bc:	82 b1       	in	r24, 0x02	; 2
 2be:	8c 60       	ori	r24, 0x0C	; 12
 2c0:	82 b9       	out	0x02, r24	; 2
    PORTE |= 0x04;  //init portE(3)
 2c2:	1a 9a       	sbi	0x03, 2	; 3
    PORTA = 0x0F;   //init portA(3:0)
 2c4:	8f e0       	ldi	r24, 0x0F	; 15
 2c6:	8b bb       	out	0x1b, r24	; 27
 2c8:	08 95       	ret

000002ca <initInterrupt>:
}

void initInterrupt(){
        //external interrupt int4 enable
        //int4 pin falling edge활성화
        EICRB &= ~(1 << ISC40);
 2ca:	8a b7       	in	r24, 0x3a	; 58
 2cc:	8e 7f       	andi	r24, 0xFE	; 254
 2ce:	8a bf       	out	0x3a, r24	; 58
        EICRB |= 1 << ISC41; //same to EICRB = 0d00000010
 2d0:	8a b7       	in	r24, 0x3a	; 58
 2d2:	82 60       	ori	r24, 0x02	; 2
 2d4:	8a bf       	out	0x3a, r24	; 58
        //enable external interrupt 4
        EIMSK |= 1 << INT4;
 2d6:	89 b7       	in	r24, 0x39	; 57
 2d8:	80 61       	ori	r24, 0x10	; 16
 2da:	89 bf       	out	0x39, r24	; 57

        //external interrupt int5 enable
        //int5 pin falling edge활성화
        EICRB &= ~(1 << ISC50); //clear
 2dc:	8a b7       	in	r24, 0x3a	; 58
 2de:	8b 7f       	andi	r24, 0xFB	; 251
 2e0:	8a bf       	out	0x3a, r24	; 58
        EICRB |= 1 << ISC51;    //set
 2e2:	8a b7       	in	r24, 0x3a	; 58
 2e4:	88 60       	ori	r24, 0x08	; 8
 2e6:	8a bf       	out	0x3a, r24	; 58
        //enable external interrupt 5
        EIMSK |= 1 << INT5;
 2e8:	89 b7       	in	r24, 0x39	; 57
 2ea:	80 62       	ori	r24, 0x20	; 32
 2ec:	89 bf       	out	0x39, r24	; 57
 2ee:	08 95       	ret

000002f0 <initTimerInterrupt>:
}

void initTimerInterrupt()
{
    TCCR0 = 0x0d; //0d00001110//CTC mode and 64 prescaling
 2f0:	8d e0       	ldi	r24, 0x0D	; 13
 2f2:	83 bf       	out	0x33, r24	; 51
    TCNT0 = 0x00; //clear count value register. TCNT0 increase count from 0, clear on 63
 2f4:	12 be       	out	0x32, r1	; 50
    TIMSK = 0x02; //enable Timer/Counter0 compare match interrupt, disable overflow interrupt
 2f6:	82 e0       	ldi	r24, 0x02	; 2
 2f8:	87 bf       	out	0x37, r24	; 55
    TIFR = 0xff;  //write logic 1 on flag for clear register
 2fa:	8f ef       	ldi	r24, 0xFF	; 255
 2fc:	86 bf       	out	0x36, r24	; 54
    OCR0 = 0x6d;  //compare 110
 2fe:	8d e6       	ldi	r24, 0x6D	; 109
 300:	81 bf       	out	0x31, r24	; 49
 302:	08 95       	ret

00000304 <motor>:
	    case LEFT  :
	    stepRight = RIGHTmotorOneClock1Sang(stepRight, 1);
	    break;
    }
	*/
	switch(direction){
 304:	81 30       	cpi	r24, 0x01	; 1
 306:	51 f0       	breq	.+20     	; 0x31c <motor+0x18>
 308:	18 f0       	brcs	.+6      	; 0x310 <motor+0xc>
 30a:	82 30       	cpi	r24, 0x02	; 2
 30c:	71 f0       	breq	.+28     	; 0x32a <motor+0x26>
 30e:	13 c0       	rjmp	.+38     	; 0x336 <motor+0x32>
        case STRAIGHT : 
            stepRight = RIGHTmotorOneClock(stepRight, 1);  //break 없으니까 밑에꺼도 실행됨
 310:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 314:	61 e0       	ldi	r22, 0x01	; 1
 316:	70 df       	rcall	.-288    	; 0x1f8 <RIGHTmotorOneClock>
 318:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
        case RIGHT : 
            stepLeft = LEFTmotorOneClock(stepLeft, 0);
 31c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <stepLeft>
 320:	60 e0       	ldi	r22, 0x00	; 0
 322:	31 df       	rcall	.-414    	; 0x186 <LEFTmotorOneClock>
 324:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <stepLeft>
            break;
 328:	06 c0       	rjmp	.+12     	; 0x336 <motor+0x32>
        case LEFT  : 
            stepRight = RIGHTmotorOneClock(stepRight, 1);
 32a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 32e:	61 e0       	ldi	r22, 0x01	; 1
 330:	63 df       	rcall	.-314    	; 0x1f8 <RIGHTmotorOneClock>
 332:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
            break;
    }
	
    MOTOR_PORT = stepLeft|stepRight;
 336:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <stepLeft>
 33a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 33e:	89 2b       	or	r24, r25
 340:	82 bb       	out	0x12, r24	; 18
 342:	08 95       	ret

00000344 <__vector_6>:
}

//출발
ISR(INT5_vect){
 344:	1f 92       	push	r1
 346:	0f 92       	push	r0
 348:	0f b6       	in	r0, 0x3f	; 63
 34a:	0f 92       	push	r0
 34c:	11 24       	eor	r1, r1
 34e:	8f 93       	push	r24
 350:	9f 93       	push	r25
    state = STATE_RUNNING;
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <state+0x1>
 35a:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <state>
}
 35e:	9f 91       	pop	r25
 360:	8f 91       	pop	r24
 362:	0f 90       	pop	r0
 364:	0f be       	out	0x3f, r0	; 63
 366:	0f 90       	pop	r0
 368:	1f 90       	pop	r1
 36a:	18 95       	reti

0000036c <__vector_5>:

//속도조절

ISR(INT4_vect){
 36c:	1f 92       	push	r1
 36e:	0f 92       	push	r0
 370:	0f b6       	in	r0, 0x3f	; 63
 372:	0f 92       	push	r0
 374:	11 24       	eor	r1, r1
 376:	8f 93       	push	r24
 378:	9f 93       	push	r25
    //when interrupt 4 excu, increase num
    
    timeNum -= 5;
 37a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <timeNum>
 37e:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <timeNum+0x1>
 382:	05 97       	sbiw	r24, 0x05	; 5
 384:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <timeNum+0x1>
 388:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <timeNum>
    if (timeNum < 50){
 38c:	82 33       	cpi	r24, 0x32	; 50
 38e:	91 05       	cpc	r25, r1
 390:	a0 f4       	brcc	.+40     	; 0x3ba <__vector_5+0x4e>
        OCR0 = timeNum = 160;
 392:	80 ea       	ldi	r24, 0xA0	; 160
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <timeNum+0x1>
 39a:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <timeNum>
 39e:	80 ea       	ldi	r24, 0xA0	; 160
 3a0:	81 bf       	out	0x31, r24	; 49
    }
	if(timeNum < 110){
 3a2:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <timeNum>
 3a6:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <timeNum+0x1>
 3aa:	8e 36       	cpi	r24, 0x6E	; 110
 3ac:	91 05       	cpc	r25, r1
 3ae:	18 f4       	brcc	.+6      	; 0x3b6 <__vector_5+0x4a>
		OCR0 = 110;
 3b0:	8e e6       	ldi	r24, 0x6E	; 110
 3b2:	81 bf       	out	0x31, r24	; 49
 3b4:	06 c0       	rjmp	.+12     	; 0x3c2 <__vector_5+0x56>
	}else if(timeNum >=110){
		OCR0 = timeNum;
 3b6:	81 bf       	out	0x31, r24	; 49
	}
		
}
 3b8:	04 c0       	rjmp	.+8      	; 0x3c2 <__vector_5+0x56>
    
    timeNum -= 5;
    if (timeNum < 50){
        OCR0 = timeNum = 160;
    }
	if(timeNum < 110){
 3ba:	8e 36       	cpi	r24, 0x6E	; 110
 3bc:	91 05       	cpc	r25, r1
 3be:	d8 f7       	brcc	.-10     	; 0x3b6 <__vector_5+0x4a>
 3c0:	f7 cf       	rjmp	.-18     	; 0x3b0 <__vector_5+0x44>
		OCR0 = 110;
	}else if(timeNum >=110){
		OCR0 = timeNum;
	}
		
}
 3c2:	9f 91       	pop	r25
 3c4:	8f 91       	pop	r24
 3c6:	0f 90       	pop	r0
 3c8:	0f be       	out	0x3f, r0	; 63
 3ca:	0f 90       	pop	r0
 3cc:	1f 90       	pop	r1
 3ce:	18 95       	reti

000003d0 <sensorScan>:

char rightSmoth = 0;
char leftSmoth = 0;

void sensorScan(int sensor){
    switch(sensor){
 3d0:	80 31       	cpi	r24, 0x10	; 16
 3d2:	91 05       	cpc	r25, r1
 3d4:	08 f0       	brcs	.+2      	; 0x3d8 <sensorScan+0x8>
 3d6:	94 c0       	rjmp	.+296    	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
 3d8:	fc 01       	movw	r30, r24
 3da:	e2 5a       	subi	r30, 0xA2	; 162
 3dc:	ff 4f       	sbci	r31, 0xFF	; 255
 3de:	79 c2       	rjmp	.+1266   	; 0x8d2 <__tablejump2__>
        case 0x0f:{                      //1111 - 걸리는거없음 직진
            //정지신호 있을때
            if(stopSign==1){            // stop sign(0110)이 있은뒤 사라지면 카운트
 3e0:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <stopSign>
 3e4:	81 30       	cpi	r24, 0x01	; 1
 3e6:	99 f4       	brne	.+38     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
                forceRightSign = forceLeftSign = 0; //정지신호가 양쪽 조금씩 다르게 들어간경우 예외처리
 3e8:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <forceLeftSign>
 3ec:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <forceRightSign>
                stopSign=0;
 3f0:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <stopSign>
                countStopSign++;
 3f4:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <countStopSign>
 3f8:	8f 5f       	subi	r24, 0xFF	; 255
 3fa:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <countStopSign>

                if(countStopSign >2){    //stopsign 3번 나오면 종료
 3fe:	83 30       	cpi	r24, 0x03	; 3
 400:	d8 f0       	brcs	.+54     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
                    state = STATE_INIT;
 402:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <state+0x1>
 406:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <state>
                    initFlag();
 40a:	86 ce       	rjmp	.-756    	; 0x118 <initFlag>
                    return;
 40c:	08 95       	ret
                }
            }else if(forceRightSign){
 40e:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <forceRightSign>
 412:	88 23       	and	r24, r24
 414:	39 f0       	breq	.+14     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
                state=STATE_FORCE_RIGHT;
 416:	82 e0       	ldi	r24, 0x02	; 2
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <state+0x1>
 41e:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <state>
 422:	0a c0       	rjmp	.+20     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
            }else if(forceLeftSign){
 424:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <forceLeftSign>
 428:	88 23       	and	r24, r24
 42a:	31 f0       	breq	.+12     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
                state=STATE_FORCE_LEFT;
 42c:	83 e0       	ldi	r24, 0x03	; 3
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <state+0x1>
 434:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <state>
            }
            motor(STRAIGHT);   //직진!
 438:	80 e0       	ldi	r24, 0x00	; 0
 43a:	64 cf       	rjmp	.-312    	; 0x304 <motor>
            break;
 43c:	08 95       	ret
        }
        case 0x0b:{                      //1011 -- 하나걸림 좌회전
            if(leftSmoth == 1){
 43e:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <leftSmoth>
 442:	81 30       	cpi	r24, 0x01	; 1
	            motor(STRAIGHT);
 444:	29 f4       	brne	.+10     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 446:	80 e0       	ldi	r24, 0x00	; 0
 448:	5d df       	rcall	.-326    	; 0x304 <motor>
	            leftSmoth=0;
 44a:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <leftSmoth>
 44e:	08 95       	ret
	        }else{
	            leftSmoth++;
 450:	8f 5f       	subi	r24, 0xFF	; 255
 452:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <leftSmoth>
				motor(LEFT);
 456:	82 e0       	ldi	r24, 0x02	; 2
 458:	55 cf       	rjmp	.-342    	; 0x304 <motor>
 45a:	08 95       	ret
            }
			
            break;
        }
        case 0x0d:{                      //1101 -- 하나걸림 -우회전
            if(rightSmoth == 1){
 45c:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <rightSmoth>
 460:	81 30       	cpi	r24, 0x01	; 1
	            motor(STRAIGHT);
 462:	29 f4       	brne	.+10     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 464:	80 e0       	ldi	r24, 0x00	; 0
 466:	4e df       	rcall	.-356    	; 0x304 <motor>
	            rightSmoth=0;
 468:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <rightSmoth>
	         }else{
	            rightSmoth++;
 46c:	08 95       	ret
 46e:	8f 5f       	subi	r24, 0xFF	; 255
 470:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <rightSmoth>
				motor(RIGHT);
 474:	81 e0       	ldi	r24, 0x01	; 1
 476:	46 cf       	rjmp	.-372    	; 0x304 <motor>
			
            break;
        }
		case 0x05:
        case 0x07:{                      //0111 -- 교차로 좌회전 신호
            forceLeftSign = 1;
 478:	08 95       	ret
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <forceLeftSign>
            motor(STRAIGHT);
 480:	80 e0       	ldi	r24, 0x00	; 0
            break;
 482:	40 cf       	rjmp	.-384    	; 0x304 <motor>
        }
		case 0x0a:
        case 0x0e:{                      //1110 -- 교차로 우회전 신호
            
            forceRightSign = 1;
 484:	08 95       	ret
 486:	81 e0       	ldi	r24, 0x01	; 1
            motor(STRAIGHT);
 488:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <forceRightSign>
 48c:	80 e0       	ldi	r24, 0x00	; 0
            break;		
 48e:	3a cf       	rjmp	.-396    	; 0x304 <motor>
        }
		case 0x02://0010
		case 0x04://0100
        case 0x06:{                      //0110 -- 정지 신호
            
            stopSign=1;                    //flag 설정
 490:	08 95       	ret
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <stopSign>
            motor(STRAIGHT);
 498:	80 e0       	ldi	r24, 0x00	; 0
 49a:	34 cf       	rjmp	.-408    	; 0x304 <motor>
            break;
 49c:	08 95       	ret
        }
        case 0x01:{                        //0001 - 교차로로 치우쳐 들어감
            if(calibRight == 1){                //교차로 1000으로 들어와서 0001로 나온경우엔 오른쪽으로칼리브레이션을 해줘야 합니다.
 49e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <calibRight>
 4a2:	81 30       	cpi	r24, 0x01	; 1
 4a4:	49 f4       	brne	.+18     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
                state = STATE_CALIB_RIGHT;
 4a6:	84 e0       	ldi	r24, 0x04	; 4
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <state+0x1>
 4ae:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <state>
                calibRight = 0;//스테이트 바꿨으면 초기화하기
 4b2:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <calibRight>
                return;
            }else{
                calibLeft = 1;
 4b6:	08 95       	ret
 4b8:	81 e0       	ldi	r24, 0x01	; 1
 4ba:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <calibLeft>
            }
            motor(STRAIGHT);
 4be:	80 e0       	ldi	r24, 0x00	; 0
 4c0:	21 cf       	rjmp	.-446    	; 0x304 <motor>
            break;
 4c2:	08 95       	ret
        }
        case 0x08:{                        //1000    - 교차로로 치우쳐 들어감
            if(calibLeft == 1){                //교차로 0001으로 들어와서 1000로 나온경우 왼쪽으로칼리브레이션을 해줘야 합니다.
 4c4:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <calibLeft>
 4c8:	81 30       	cpi	r24, 0x01	; 1
 4ca:	49 f4       	brne	.+18     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
                state = STATE_CALIB_LEFT;
 4cc:	85 e0       	ldi	r24, 0x05	; 5
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <state+0x1>
 4d4:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <state>
                calibLeft = 0;//스테이트 바꿨으면 초기화하기
 4d8:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <calibLeft>
                return;
            }else{
                calibRight = 1;
 4dc:	08 95       	ret
 4de:	81 e0       	ldi	r24, 0x01	; 1
 4e0:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <calibRight>
            }
            motor(STRAIGHT);
 4e4:	80 e0       	ldi	r24, 0x00	; 0
            break;
 4e6:	0e cf       	rjmp	.-484    	; 0x304 <motor>
        }
        case 0x00:{                      //0000 - 교차로
            forceLeftSign = forceRightSign = stopSign= countStopSign = 0;                //교차로에 많이 치우쳐 들어온경우(0111이 인식된뒤 들어온)교차로 를 나간뒤 STATE_FORCE로 들어가지 않게 초기화 해줘야 합니다.
 4e8:	08 95       	ret
 4ea:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <countStopSign>
 4ee:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <stopSign>
 4f2:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <forceRightSign>
            motor(STRAIGHT);
 4f6:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <forceLeftSign>
 4fa:	80 e0       	ldi	r24, 0x00	; 0
            break;
 4fc:	03 cf       	rjmp	.-506    	; 0x304 <motor>
        }
        default: {   
            motor(STRAIGHT);
 4fe:	08 95       	ret
 500:	80 e0       	ldi	r24, 0x00	; 0
 502:	00 cf       	rjmp	.-512    	; 0x304 <motor>
 504:	08 95       	ret

00000506 <__vector_15>:
}
char smothStart=0;
char stateForceSmoth = 0;
short forceStraight = 0;
ISR(TIMER0_COMP_vect)  //OCR0와 카운터 비교해서 실행됨. 즉 모터의 펄스 간격(속도)가 ocr0에 따라 가변
{
 506:	1f 92       	push	r1
 508:	0f 92       	push	r0
 50a:	0f b6       	in	r0, 0x3f	; 63
 50c:	0f 92       	push	r0
 50e:	11 24       	eor	r1, r1
 510:	0b b6       	in	r0, 0x3b	; 59
 512:	0f 92       	push	r0
 514:	2f 93       	push	r18
 516:	3f 93       	push	r19
 518:	4f 93       	push	r20
 51a:	5f 93       	push	r21
 51c:	6f 93       	push	r22
 51e:	7f 93       	push	r23
 520:	8f 93       	push	r24
 522:	9f 93       	push	r25
 524:	af 93       	push	r26
 526:	bf 93       	push	r27
 528:	cf 93       	push	r28
 52a:	df 93       	push	r29
 52c:	ef 93       	push	r30
 52e:	ff 93       	push	r31
    int sensor = SENSOR_PORT & 0x0F; //센서값 읽기
 530:	83 b3       	in	r24, 0x13	; 19
 532:	8f 70       	andi	r24, 0x0F	; 15
 534:	c8 2f       	mov	r28, r24
 536:	d0 e0       	ldi	r29, 0x00	; 0
	
	
	
    if(state == STATE_FORCE_RIGHT){                                 //-강제회전
 538:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <state>
 53c:	30 91 29 01 	lds	r19, 0x0129	; 0x800129 <state+0x1>
 540:	22 30       	cpi	r18, 0x02	; 2
 542:	31 05       	cpc	r19, r1
 544:	09 f0       	breq	.+2      	; 0x548 <__vector_15+0x42>
 546:	82 c0       	rjmp	.+260    	; 0x64c <__vector_15+0x146>
		if(100 != OCR0&&(smothStart==10)){
 548:	91 b7       	in	r25, 0x31	; 49
 54a:	94 36       	cpi	r25, 0x64	; 100
 54c:	51 f0       	breq	.+20     	; 0x562 <__vector_15+0x5c>
 54e:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <smothStart>
 552:	9a 30       	cpi	r25, 0x0A	; 10
 554:	31 f4       	brne	.+12     	; 0x562 <__vector_15+0x5c>
			OCR0++;
 556:	91 b7       	in	r25, 0x31	; 49
 558:	9f 5f       	subi	r25, 0xFF	; 255
 55a:	91 bf       	out	0x31, r25	; 49
			smothStart=0;
 55c:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <smothStart>
 560:	05 c0       	rjmp	.+10     	; 0x56c <__vector_15+0x66>
			
			}else{
			smothStart++;
 562:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <smothStart>
 566:	9f 5f       	subi	r25, 0xFF	; 255
 568:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <smothStart>
		}
        if(!forceRightSign){
 56c:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <forceRightSign>
 570:	91 11       	cpse	r25, r1
 572:	29 c0       	rjmp	.+82     	; 0x5c6 <__vector_15+0xc0>
            if(stateForceSmoth==3){
 574:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <stateForceSmoth>
 578:	83 30       	cpi	r24, 0x03	; 3
 57a:	29 f4       	brne	.+10     	; 0x586 <__vector_15+0x80>
				motor(STRAIGHT); 
 57c:	80 e0       	ldi	r24, 0x00	; 0
 57e:	c2 de       	rcall	.-636    	; 0x304 <motor>
				stateForceSmoth=0;
 580:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <stateForceSmoth>
 584:	05 c0       	rjmp	.+10     	; 0x590 <__vector_15+0x8a>
			}else{
				stateForceSmoth++;
 586:	8f 5f       	subi	r24, 0xFF	; 255
 588:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <stateForceSmoth>
				motor(RIGHT); 
 58c:	81 e0       	ldi	r24, 0x01	; 1
 58e:	ba de       	rcall	.-652    	; 0x304 <motor>
			}
			forceStraight++;                                          //교차로에 들어간 뒤엔 회전만 합니다
 590:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
 594:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <__data_end+0x1>
 598:	01 96       	adiw	r24, 0x01	; 1
 59a:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <__data_end+0x1>
 59e:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end>
            if((forceStraight>320)&&(sensor == 0x0d)){
 5a2:	81 34       	cpi	r24, 0x41	; 65
 5a4:	91 40       	sbci	r25, 0x01	; 1
 5a6:	0c f4       	brge	.+2      	; 0x5aa <__vector_15+0xa4>
 5a8:	24 c1       	rjmp	.+584    	; 0x7f2 <__vector_15+0x2ec>
 5aa:	2d 97       	sbiw	r28, 0x0d	; 13
 5ac:	09 f0       	breq	.+2      	; 0x5b0 <__vector_15+0xaa>
 5ae:	21 c1       	rjmp	.+578    	; 0x7f2 <__vector_15+0x2ec>
                state = STATE_RUNNING;   
 5b0:	81 e0       	ldi	r24, 0x01	; 1
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <state+0x1>
 5b8:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <state>
				forceStraight=0;                           //강제 회전하다 라인이 잡히면 트랙 타기
 5bc:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <__data_end+0x1>
 5c0:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <__data_end>
 5c4:	16 c1       	rjmp	.+556    	; 0x7f2 <__vector_15+0x2ec>
            }
        }else{
            if(timeNum<100&&(forceStraight<300)){
 5c6:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <timeNum>
 5ca:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <timeNum+0x1>
 5ce:	24 36       	cpi	r18, 0x64	; 100
 5d0:	31 05       	cpc	r19, r1
 5d2:	00 f5       	brcc	.+64     	; 0x614 <__vector_15+0x10e>
 5d4:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <__data_end>
 5d8:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <__data_end+0x1>
 5dc:	2c 32       	cpi	r18, 0x2C	; 44
 5de:	31 40       	sbci	r19, 0x01	; 1
	            motor(STRAIGHT);
 5e0:	cc f4       	brge	.+50     	; 0x614 <__vector_15+0x10e>
 5e2:	80 e0       	ldi	r24, 0x00	; 0
 5e4:	8f de       	rcall	.-738    	; 0x304 <motor>
	            forceStraight++;
 5e6:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <__data_end>
 5ea:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <__data_end+0x1>
 5ee:	c9 01       	movw	r24, r18
 5f0:	01 96       	adiw	r24, 0x01	; 1
 5f2:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <__data_end+0x1>
 5f6:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end>
				if(forceStraight==240){
 5fa:	80 3f       	cpi	r24, 0xF0	; 240
 5fc:	91 05       	cpc	r25, r1
 5fe:	09 f0       	breq	.+2      	; 0x602 <__vector_15+0xfc>
 600:	f8 c0       	rjmp	.+496    	; 0x7f2 <__vector_15+0x2ec>
					forceRightSign = 0;
 602:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <forceRightSign>
					forceStraight++;
 606:	2e 5f       	subi	r18, 0xFE	; 254
 608:	3f 4f       	sbci	r19, 0xFF	; 255
 60a:	30 93 1b 01 	sts	0x011B, r19	; 0x80011b <__data_end+0x1>
 60e:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <__data_end>
 612:	ef c0       	rjmp	.+478    	; 0x7f2 <__vector_15+0x2ec>
				}
            }else if(sensor == 0x00 || sensor == 0x01 || sensor == 0x08){    
 614:	82 30       	cpi	r24, 0x02	; 2
 616:	10 f0       	brcs	.+4      	; 0x61c <__vector_15+0x116>
 618:	28 97       	sbiw	r28, 0x08	; 8
 61a:	29 f4       	brne	.+10     	; 0x626 <__vector_15+0x120>
                forceRightSign = 0;  
 61c:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <forceRightSign>
				motor(RIGHT);                               //교차로 나타나면 플래그 초기화 하고 강제로 돌림
 620:	81 e0       	ldi	r24, 0x01	; 1
 622:	70 de       	rcall	.-800    	; 0x304 <motor>
 624:	e6 c0       	rjmp	.+460    	; 0x7f2 <__vector_15+0x2ec>
            }else{
				switch(sensor){
 626:	8d 30       	cpi	r24, 0x0D	; 13
 628:	59 f0       	breq	.+22     	; 0x640 <__vector_15+0x13a>
 62a:	8f 30       	cpi	r24, 0x0F	; 15
 62c:	19 f0       	breq	.+6      	; 0x634 <__vector_15+0x12e>
 62e:	8b 30       	cpi	r24, 0x0B	; 11
 630:	51 f4       	brne	.+20     	; 0x646 <__vector_15+0x140>
					case 0x0f: 
						motor(STRAIGHT);
 632:	03 c0       	rjmp	.+6      	; 0x63a <__vector_15+0x134>
 634:	80 e0       	ldi	r24, 0x00	; 0
						break;
					case 0x0b:{                      //1011 -- 하나걸림 좌회전
						motor(LEFT);
 636:	66 de       	rcall	.-820    	; 0x304 <motor>
 638:	dc c0       	rjmp	.+440    	; 0x7f2 <__vector_15+0x2ec>
						break;
 63a:	82 e0       	ldi	r24, 0x02	; 2
					}
					case 0x0d:{                      //1101 -- 하나걸림 -우회전
						motor(RIGHT);
 63c:	63 de       	rcall	.-826    	; 0x304 <motor>
 63e:	d9 c0       	rjmp	.+434    	; 0x7f2 <__vector_15+0x2ec>
 640:	81 e0       	ldi	r24, 0x01	; 1
						break;
 642:	60 de       	rcall	.-832    	; 0x304 <motor>
					}
					default:
						motor(STRAIGHT);
 644:	d6 c0       	rjmp	.+428    	; 0x7f2 <__vector_15+0x2ec>
 646:	80 e0       	ldi	r24, 0x00	; 0
 648:	5d de       	rcall	.-838    	; 0x304 <motor>
 64a:	d3 c0       	rjmp	.+422    	; 0x7f2 <__vector_15+0x2ec>
				}
			}                                      //교차로 들어가기 전까지는 무조껀 직진
        }
    }else if(state == STATE_FORCE_LEFT){                            //-강제회전
 64c:	23 30       	cpi	r18, 0x03	; 3
 64e:	31 05       	cpc	r19, r1
 650:	09 f0       	breq	.+2      	; 0x654 <__vector_15+0x14e>
 652:	82 c0       	rjmp	.+260    	; 0x758 <__vector_15+0x252>
		
		if(100 != OCR0&&(smothStart==10)){
 654:	91 b7       	in	r25, 0x31	; 49
 656:	94 36       	cpi	r25, 0x64	; 100
 658:	51 f0       	breq	.+20     	; 0x66e <__vector_15+0x168>
 65a:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <smothStart>
 65e:	9a 30       	cpi	r25, 0x0A	; 10
 660:	31 f4       	brne	.+12     	; 0x66e <__vector_15+0x168>
			OCR0++;
 662:	91 b7       	in	r25, 0x31	; 49
 664:	9f 5f       	subi	r25, 0xFF	; 255
 666:	91 bf       	out	0x31, r25	; 49
			smothStart=0;
 668:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <smothStart>
 66c:	05 c0       	rjmp	.+10     	; 0x678 <__vector_15+0x172>
			
			}else{
			smothStart++;
 66e:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <smothStart>
 672:	9f 5f       	subi	r25, 0xFF	; 255
 674:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <smothStart>
		}
        if(!forceLeftSign){
 678:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <forceLeftSign>
 67c:	91 11       	cpse	r25, r1
            if(stateForceSmoth==3){
 67e:	29 c0       	rjmp	.+82     	; 0x6d2 <__vector_15+0x1cc>
 680:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <stateForceSmoth>
 684:	83 30       	cpi	r24, 0x03	; 3
	            motor(STRAIGHT);
 686:	29 f4       	brne	.+10     	; 0x692 <__vector_15+0x18c>
 688:	80 e0       	ldi	r24, 0x00	; 0
	            stateForceSmoth=0;
 68a:	3c de       	rcall	.-904    	; 0x304 <motor>
 68c:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <stateForceSmoth>
	            }else{
	            stateForceSmoth++;
 690:	05 c0       	rjmp	.+10     	; 0x69c <__vector_15+0x196>
 692:	8f 5f       	subi	r24, 0xFF	; 255
 694:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <stateForceSmoth>
				motor(LEFT);   
 698:	82 e0       	ldi	r24, 0x02	; 2
 69a:	34 de       	rcall	.-920    	; 0x304 <motor>
            }
			 forceStraight++;                                           //교차로에 들어간 뒤엔 회전만 합니다
 69c:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
 6a0:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <__data_end+0x1>
 6a4:	01 96       	adiw	r24, 0x01	; 1
 6a6:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <__data_end+0x1>
 6aa:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end>
            if((forceStraight>320)&&(sensor == 0x0b)){                                        //강제 회전하다 라인 잡히면 트랙 타기
 6ae:	81 34       	cpi	r24, 0x41	; 65
 6b0:	91 40       	sbci	r25, 0x01	; 1
 6b2:	0c f4       	brge	.+2      	; 0x6b6 <__vector_15+0x1b0>
 6b4:	9e c0       	rjmp	.+316    	; 0x7f2 <__vector_15+0x2ec>
 6b6:	2b 97       	sbiw	r28, 0x0b	; 11
 6b8:	09 f0       	breq	.+2      	; 0x6bc <__vector_15+0x1b6>
 6ba:	9b c0       	rjmp	.+310    	; 0x7f2 <__vector_15+0x2ec>
                state = STATE_RUNNING;
 6bc:	81 e0       	ldi	r24, 0x01	; 1
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <state+0x1>
 6c4:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <state>
				forceStraight=0;
 6c8:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <__data_end+0x1>
 6cc:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <__data_end>
 6d0:	90 c0       	rjmp	.+288    	; 0x7f2 <__vector_15+0x2ec>
            }
        }else{         
			if(timeNum<100&&(forceStraight<300)){
 6d2:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <timeNum>
 6d6:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <timeNum+0x1>
 6da:	24 36       	cpi	r18, 0x64	; 100
 6dc:	31 05       	cpc	r19, r1
 6de:	00 f5       	brcc	.+64     	; 0x720 <__vector_15+0x21a>
 6e0:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <__data_end>
 6e4:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <__data_end+0x1>
 6e8:	2c 32       	cpi	r18, 0x2C	; 44
 6ea:	31 40       	sbci	r19, 0x01	; 1
				motor(STRAIGHT);
 6ec:	cc f4       	brge	.+50     	; 0x720 <__vector_15+0x21a>
 6ee:	80 e0       	ldi	r24, 0x00	; 0
 6f0:	09 de       	rcall	.-1006   	; 0x304 <motor>
				forceStraight++;
 6f2:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <__data_end>
 6f6:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <__data_end+0x1>
 6fa:	c9 01       	movw	r24, r18
 6fc:	01 96       	adiw	r24, 0x01	; 1
 6fe:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <__data_end+0x1>
 702:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end>
				if(forceStraight==240){
 706:	80 3f       	cpi	r24, 0xF0	; 240
 708:	91 05       	cpc	r25, r1
 70a:	09 f0       	breq	.+2      	; 0x70e <__vector_15+0x208>
 70c:	72 c0       	rjmp	.+228    	; 0x7f2 <__vector_15+0x2ec>
					forceLeftSign = 0;
 70e:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <forceLeftSign>
					forceStraight++;
 712:	2e 5f       	subi	r18, 0xFE	; 254
 714:	3f 4f       	sbci	r19, 0xFF	; 255
 716:	30 93 1b 01 	sts	0x011B, r19	; 0x80011b <__data_end+0x1>
 71a:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <__data_end>
					
				}
			}else if(sensor == 0x00 || sensor == 0x01 || sensor == 0x08){
 71e:	69 c0       	rjmp	.+210    	; 0x7f2 <__vector_15+0x2ec>
 720:	82 30       	cpi	r24, 0x02	; 2
 722:	10 f0       	brcs	.+4      	; 0x728 <__vector_15+0x222>
 724:	28 97       	sbiw	r28, 0x08	; 8
                forceLeftSign = 0;   
 726:	29 f4       	brne	.+10     	; 0x732 <__vector_15+0x22c>
 728:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <forceLeftSign>
				motor(LEFT);                               //교차로 나타나면 플래그 초기화 하고 강제로 돌림
 72c:	82 e0       	ldi	r24, 0x02	; 2
 72e:	ea dd       	rcall	.-1068   	; 0x304 <motor>
            }else{
				switch(sensor){
 730:	60 c0       	rjmp	.+192    	; 0x7f2 <__vector_15+0x2ec>
 732:	8d 30       	cpi	r24, 0x0D	; 13
 734:	59 f0       	breq	.+22     	; 0x74c <__vector_15+0x246>
 736:	8f 30       	cpi	r24, 0x0F	; 15
 738:	19 f0       	breq	.+6      	; 0x740 <__vector_15+0x23a>
					case 0x0f:
					motor(STRAIGHT);
 73a:	8b 30       	cpi	r24, 0x0B	; 11
 73c:	51 f4       	brne	.+20     	; 0x752 <__vector_15+0x24c>
 73e:	03 c0       	rjmp	.+6      	; 0x746 <__vector_15+0x240>
					break;
 740:	80 e0       	ldi	r24, 0x00	; 0
					case 0x0b:{                      //1011 -- 하나걸림 좌회전
						motor(LEFT);
 742:	e0 dd       	rcall	.-1088   	; 0x304 <motor>
 744:	56 c0       	rjmp	.+172    	; 0x7f2 <__vector_15+0x2ec>
 746:	82 e0       	ldi	r24, 0x02	; 2
						break;
 748:	dd dd       	rcall	.-1094   	; 0x304 <motor>
					}
					case 0x0d:{                      //1101 -- 하나걸림 -우회전
						motor(RIGHT);
 74a:	53 c0       	rjmp	.+166    	; 0x7f2 <__vector_15+0x2ec>
 74c:	81 e0       	ldi	r24, 0x01	; 1
 74e:	da dd       	rcall	.-1100   	; 0x304 <motor>
						break;
 750:	50 c0       	rjmp	.+160    	; 0x7f2 <__vector_15+0x2ec>
					}
					default:
						motor(STRAIGHT);
 752:	80 e0       	ldi	r24, 0x00	; 0
 754:	d7 dd       	rcall	.-1106   	; 0x304 <motor>
 756:	4d c0       	rjmp	.+154    	; 0x7f2 <__vector_15+0x2ec>
 758:	24 30       	cpi	r18, 0x04	; 4
				}                                        //교차로 들어가기 전까지는 무조껀 직진
			}
        }
    }else if(state == STATE_CALIB_RIGHT){                           //-교차로를 틀어져서 왼쪽으로 들어갈때 칼리브레이션
 75a:	31 05       	cpc	r19, r1
 75c:	a9 f4       	brne	.+42     	; 0x788 <__vector_15+0x282>
 75e:	cb 30       	cpi	r28, 0x0B	; 11
        if(sensor == 0x0b||sensor == 0x0d){                         //레일 위로 돌아가면 종료
 760:	d1 05       	cpc	r29, r1
 762:	19 f0       	breq	.+6      	; 0x76a <__vector_15+0x264>
 764:	cd 30       	cpi	r28, 0x0D	; 13
 766:	d1 05       	cpc	r29, r1
            state = STATE_RUNNING;
 768:	39 f4       	brne	.+14     	; 0x778 <__vector_15+0x272>
 76a:	81 e0       	ldi	r24, 0x01	; 1
 76c:	90 e0       	ldi	r25, 0x00	; 0
 76e:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <state+0x1>
 772:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <state>
        }else if(sensor == 0x0f){                                   //하나도 안걸릴때 일딴 오른쪽으로 돌림
 776:	3d c0       	rjmp	.+122    	; 0x7f2 <__vector_15+0x2ec>
 778:	2f 97       	sbiw	r28, 0x0f	; 15
            motor(RIGHT);
 77a:	19 f4       	brne	.+6      	; 0x782 <__vector_15+0x27c>
 77c:	81 e0       	ldi	r24, 0x01	; 1
 77e:	c2 dd       	rcall	.-1148   	; 0x304 <motor>
 780:	38 c0       	rjmp	.+112    	; 0x7f2 <__vector_15+0x2ec>
        }else{                                                      //교차로를 나오기 전까지는 무조껀 직진
            motor(STRAIGHT);
 782:	80 e0       	ldi	r24, 0x00	; 0
 784:	bf dd       	rcall	.-1154   	; 0x304 <motor>
 786:	35 c0       	rjmp	.+106    	; 0x7f2 <__vector_15+0x2ec>
 788:	25 30       	cpi	r18, 0x05	; 5
        }
    }else if(state == STATE_CALIB_LEFT){                            //-교차로를 틀어져서 오른쪽으로 들어갈때 칼리브레이션
 78a:	31 05       	cpc	r19, r1
 78c:	a9 f4       	brne	.+42     	; 0x7b8 <__vector_15+0x2b2>
        if(sensor == 0x0b||sensor == 0x0d){                         //레일 위로 돌아가면 종료
 78e:	cb 30       	cpi	r28, 0x0B	; 11
 790:	d1 05       	cpc	r29, r1
 792:	19 f0       	breq	.+6      	; 0x79a <__vector_15+0x294>
 794:	cd 30       	cpi	r28, 0x0D	; 13
 796:	d1 05       	cpc	r29, r1
            state = STATE_RUNNING;
 798:	39 f4       	brne	.+14     	; 0x7a8 <__vector_15+0x2a2>
 79a:	81 e0       	ldi	r24, 0x01	; 1
 79c:	90 e0       	ldi	r25, 0x00	; 0
 79e:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <state+0x1>
 7a2:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <state>
        }else if(sensor == 0x0f){                                   //하나도 안걸릴때 일딴 오른쪽으로 돌림
 7a6:	25 c0       	rjmp	.+74     	; 0x7f2 <__vector_15+0x2ec>
 7a8:	2f 97       	sbiw	r28, 0x0f	; 15
            motor(LEFT);
 7aa:	19 f4       	brne	.+6      	; 0x7b2 <__vector_15+0x2ac>
 7ac:	82 e0       	ldi	r24, 0x02	; 2
 7ae:	aa dd       	rcall	.-1196   	; 0x304 <motor>
 7b0:	20 c0       	rjmp	.+64     	; 0x7f2 <__vector_15+0x2ec>
        }else{                                                      //교차로를 나오기 전까지는 무조껀 직진
            motor(STRAIGHT);
 7b2:	80 e0       	ldi	r24, 0x00	; 0
 7b4:	a7 dd       	rcall	.-1202   	; 0x304 <motor>
 7b6:	1d c0       	rjmp	.+58     	; 0x7f2 <__vector_15+0x2ec>
 7b8:	21 30       	cpi	r18, 0x01	; 1
        }
    }else if(state == STATE_RUNNING){
 7ba:	31 05       	cpc	r19, r1
 7bc:	d1 f4       	brne	.+52     	; 0x7f2 <__vector_15+0x2ec>
 7be:	81 b7       	in	r24, 0x31	; 49
		if(timeNum != OCR0&&(smothStart==10)){
 7c0:	90 e0       	ldi	r25, 0x00	; 0
 7c2:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <timeNum>
 7c6:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <timeNum+0x1>
 7ca:	82 17       	cp	r24, r18
 7cc:	93 07       	cpc	r25, r19
 7ce:	51 f0       	breq	.+20     	; 0x7e4 <__vector_15+0x2de>
 7d0:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <smothStart>
 7d4:	8a 30       	cpi	r24, 0x0A	; 10
 7d6:	31 f4       	brne	.+12     	; 0x7e4 <__vector_15+0x2de>
			OCR0--;
 7d8:	81 b7       	in	r24, 0x31	; 49
 7da:	81 50       	subi	r24, 0x01	; 1
 7dc:	81 bf       	out	0x31, r24	; 49
			smothStart=0;
 7de:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <smothStart>
 7e2:	05 c0       	rjmp	.+10     	; 0x7ee <__vector_15+0x2e8>
			
			}else{
			smothStart++;
 7e4:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <smothStart>
 7e8:	8f 5f       	subi	r24, 0xFF	; 255
 7ea:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <smothStart>
		}
		
        sensorScan(sensor);                    //일반적인 라인 팔로잉 상태
 7ee:	ce 01       	movw	r24, r28
 7f0:	ef dd       	rcall	.-1058   	; 0x3d0 <sensorScan>
 7f2:	ff 91       	pop	r31
    }
}
 7f4:	ef 91       	pop	r30
 7f6:	df 91       	pop	r29
 7f8:	cf 91       	pop	r28
 7fa:	bf 91       	pop	r27
 7fc:	af 91       	pop	r26
 7fe:	9f 91       	pop	r25
 800:	8f 91       	pop	r24
 802:	7f 91       	pop	r23
 804:	6f 91       	pop	r22
 806:	5f 91       	pop	r21
 808:	4f 91       	pop	r20
 80a:	3f 91       	pop	r19
 80c:	2f 91       	pop	r18
 80e:	0f 90       	pop	r0
 810:	0b be       	out	0x3b, r0	; 59
 812:	0f 90       	pop	r0
 814:	0f be       	out	0x3f, r0	; 63
 816:	0f 90       	pop	r0
 818:	1f 90       	pop	r1
 81a:	18 95       	reti

0000081c <main>:
 81c:	a5 dc       	rcall	.-1718   	; 0x168 <initDevices>

int main(void){

    //initialize port and interrupt
    initDevices();
    initSegment();
 81e:	4c dd       	rcall	.-1384   	; 0x2b8 <initSegment>
    initInterrupt();
 820:	54 dd       	rcall	.-1368   	; 0x2ca <initInterrupt>
    initTimerInterrupt();
 822:	66 dd       	rcall	.-1332   	; 0x2f0 <initTimerInterrupt>
 824:	79 dc       	rcall	.-1806   	; 0x118 <initFlag>
    initFlag();
 826:	8f ef       	ldi	r24, 0xFF	; 255
 828:	81 bb       	out	0x11, r24	; 17
    
    MOTOR_PORT_DDR = 0xff;
 82a:	78 94       	sei
 82c:	0f 2e       	mov	r0, r31
    //Global Interrupt Enable
    sei();
 82e:	f8 ee       	ldi	r31, 0xE8	; 232
    //print 7segment by global variable timeNum
    //timeNum variable is state and OCR0
    while (1){
        //segment print
        for(int i = 0; i < 4; i++){
            printSeg(((state*1000 + timeNum)/exp10[i])%10,3-i); //OCR0를 세그먼트에 출력합니다.
 830:	ef 2e       	mov	r14, r31
 832:	f3 e0       	ldi	r31, 0x03	; 3
 834:	ff 2e       	mov	r15, r31
 836:	f0 2d       	mov	r31, r0
 838:	02 e0       	ldi	r16, 0x02	; 2
 83a:	11 e0       	ldi	r17, 0x01	; 1
 83c:	c3 e0       	ldi	r28, 0x03	; 3
 83e:	d0 e0       	ldi	r29, 0x00	; 0
        sensorScan(sensor);                    //일반적인 라인 팔로잉 상태
    }
}
///////////////////interrupt service routine end////////////////////////

int main(void){
 840:	f8 01       	movw	r30, r16
 842:	61 91       	ld	r22, Z+
    //print 7segment by global variable timeNum
    //timeNum variable is state and OCR0
    while (1){
        //segment print
        for(int i = 0; i < 4; i++){
            printSeg(((state*1000 + timeNum)/exp10[i])%10,3-i); //OCR0를 세그먼트에 출력합니다.
 844:	71 91       	ld	r23, Z+
 846:	8f 01       	movw	r16, r30
 848:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <state>
 84c:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <state+0x1>
 850:	8e 9d       	mul	r24, r14
 852:	90 01       	movw	r18, r0
 854:	8f 9d       	mul	r24, r15
 856:	30 0d       	add	r19, r0
 858:	9e 9d       	mul	r25, r14
 85a:	30 0d       	add	r19, r0
 85c:	11 24       	eor	r1, r1
 85e:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <timeNum>
 862:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <timeNum+0x1>
 866:	82 0f       	add	r24, r18
 868:	93 1f       	adc	r25, r19
 86a:	1f d0       	rcall	.+62     	; 0x8aa <__udivmodhi4>
 86c:	ab 01       	movw	r20, r22
 86e:	9b 01       	movw	r18, r22
 870:	ad ec       	ldi	r26, 0xCD	; 205
 872:	bc ec       	ldi	r27, 0xCC	; 204
 874:	37 d0       	rcall	.+110    	; 0x8e4 <__umulhisi3>
 876:	96 95       	lsr	r25
 878:	87 95       	ror	r24
 87a:	96 95       	lsr	r25
 87c:	87 95       	ror	r24
 87e:	96 95       	lsr	r25
 880:	87 95       	ror	r24
 882:	9c 01       	movw	r18, r24
 884:	22 0f       	add	r18, r18
 886:	33 1f       	adc	r19, r19
 888:	88 0f       	add	r24, r24
 88a:	99 1f       	adc	r25, r25
 88c:	88 0f       	add	r24, r24
 88e:	99 1f       	adc	r25, r25
 890:	88 0f       	add	r24, r24
 892:	99 1f       	adc	r25, r25
 894:	82 0f       	add	r24, r18
 896:	93 1f       	adc	r25, r19
 898:	be 01       	movw	r22, r28
 89a:	9a 01       	movw	r18, r20
 89c:	28 1b       	sub	r18, r24
 89e:	39 0b       	sbc	r19, r25
 8a0:	c9 01       	movw	r24, r18
 8a2:	fb dc       	rcall	.-1546   	; 0x29a <printSeg>
 8a4:	21 97       	sbiw	r28, 0x01	; 1
 8a6:	60 f6       	brcc	.-104    	; 0x840 <main+0x24>
 8a8:	c7 cf       	rjmp	.-114    	; 0x838 <main+0x1c>

000008aa <__udivmodhi4>:
 8aa:	aa 1b       	sub	r26, r26
 8ac:	bb 1b       	sub	r27, r27
 8ae:	51 e1       	ldi	r21, 0x11	; 17
 8b0:	07 c0       	rjmp	.+14     	; 0x8c0 <__udivmodhi4_ep>

000008b2 <__udivmodhi4_loop>:
 8b2:	aa 1f       	adc	r26, r26
 8b4:	bb 1f       	adc	r27, r27
 8b6:	a6 17       	cp	r26, r22
 8b8:	b7 07       	cpc	r27, r23
 8ba:	10 f0       	brcs	.+4      	; 0x8c0 <__udivmodhi4_ep>
 8bc:	a6 1b       	sub	r26, r22
 8be:	b7 0b       	sbc	r27, r23

000008c0 <__udivmodhi4_ep>:
 8c0:	88 1f       	adc	r24, r24
 8c2:	99 1f       	adc	r25, r25
 8c4:	5a 95       	dec	r21
 8c6:	a9 f7       	brne	.-22     	; 0x8b2 <__udivmodhi4_loop>
 8c8:	80 95       	com	r24
 8ca:	90 95       	com	r25
 8cc:	bc 01       	movw	r22, r24
 8ce:	cd 01       	movw	r24, r26
 8d0:	08 95       	ret

000008d2 <__tablejump2__>:
 8d2:	ee 0f       	add	r30, r30
 8d4:	ff 1f       	adc	r31, r31
 8d6:	00 24       	eor	r0, r0
 8d8:	00 1c       	adc	r0, r0
 8da:	0b be       	out	0x3b, r0	; 59
 8dc:	07 90       	elpm	r0, Z+
 8de:	f6 91       	elpm	r31, Z
 8e0:	e0 2d       	mov	r30, r0
 8e2:	09 94       	ijmp

000008e4 <__umulhisi3>:
 8e4:	a2 9f       	mul	r26, r18
 8e6:	b0 01       	movw	r22, r0
 8e8:	b3 9f       	mul	r27, r19
 8ea:	c0 01       	movw	r24, r0
 8ec:	a3 9f       	mul	r26, r19
 8ee:	70 0d       	add	r23, r0
 8f0:	81 1d       	adc	r24, r1
 8f2:	11 24       	eor	r1, r1
 8f4:	91 1d       	adc	r25, r1
 8f6:	b2 9f       	mul	r27, r18
 8f8:	70 0d       	add	r23, r0
 8fa:	81 1d       	adc	r24, r1
 8fc:	11 24       	eor	r1, r1
 8fe:	91 1d       	adc	r25, r1
 900:	08 95       	ret

00000902 <_exit>:
 902:	f8 94       	cli

00000904 <__stop_program>:
 904:	ff cf       	rjmp	.-2      	; 0x904 <__stop_program>
