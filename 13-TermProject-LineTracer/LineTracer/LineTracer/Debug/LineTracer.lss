
LineTracer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00000a76  00000b0a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a76  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  0080011c  0080011c  00000b26  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b26  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b58  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000b98  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001076  00000000  00000000  00000c38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008ed  00000000  00000000  00001cae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b4b  00000000  00000000  0000259b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000019c  00000000  00000000  000030e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005f4  00000000  00000000  00003284  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000652  00000000  00000000  00003878  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00003eca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	6d c0       	rjmp	.+218    	; 0xdc <__ctors_end>
   2:	00 00       	nop
   4:	88 c0       	rjmp	.+272    	; 0x116 <__bad_interrupt>
   6:	00 00       	nop
   8:	86 c0       	rjmp	.+268    	; 0x116 <__bad_interrupt>
   a:	00 00       	nop
   c:	84 c0       	rjmp	.+264    	; 0x116 <__bad_interrupt>
   e:	00 00       	nop
  10:	82 c0       	rjmp	.+260    	; 0x116 <__bad_interrupt>
  12:	00 00       	nop
  14:	ab c1       	rjmp	.+854    	; 0x36c <__vector_5>
  16:	00 00       	nop
  18:	95 c1       	rjmp	.+810    	; 0x344 <__vector_6>
  1a:	00 00       	nop
  1c:	7c c0       	rjmp	.+248    	; 0x116 <__bad_interrupt>
  1e:	00 00       	nop
  20:	7a c0       	rjmp	.+244    	; 0x116 <__bad_interrupt>
  22:	00 00       	nop
  24:	78 c0       	rjmp	.+240    	; 0x116 <__bad_interrupt>
  26:	00 00       	nop
  28:	76 c0       	rjmp	.+236    	; 0x116 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	74 c0       	rjmp	.+232    	; 0x116 <__bad_interrupt>
  2e:	00 00       	nop
  30:	72 c0       	rjmp	.+228    	; 0x116 <__bad_interrupt>
  32:	00 00       	nop
  34:	70 c0       	rjmp	.+224    	; 0x116 <__bad_interrupt>
  36:	00 00       	nop
  38:	6e c0       	rjmp	.+220    	; 0x116 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	a0 c2       	rjmp	.+1344   	; 0x57e <__vector_15>
  3e:	00 00       	nop
  40:	6a c0       	rjmp	.+212    	; 0x116 <__bad_interrupt>
  42:	00 00       	nop
  44:	68 c0       	rjmp	.+208    	; 0x116 <__bad_interrupt>
  46:	00 00       	nop
  48:	66 c0       	rjmp	.+204    	; 0x116 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	64 c0       	rjmp	.+200    	; 0x116 <__bad_interrupt>
  4e:	00 00       	nop
  50:	62 c0       	rjmp	.+196    	; 0x116 <__bad_interrupt>
  52:	00 00       	nop
  54:	60 c0       	rjmp	.+192    	; 0x116 <__bad_interrupt>
  56:	00 00       	nop
  58:	5e c0       	rjmp	.+188    	; 0x116 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5c c0       	rjmp	.+184    	; 0x116 <__bad_interrupt>
  5e:	00 00       	nop
  60:	5a c0       	rjmp	.+180    	; 0x116 <__bad_interrupt>
  62:	00 00       	nop
  64:	58 c0       	rjmp	.+176    	; 0x116 <__bad_interrupt>
  66:	00 00       	nop
  68:	56 c0       	rjmp	.+172    	; 0x116 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	54 c0       	rjmp	.+168    	; 0x116 <__bad_interrupt>
  6e:	00 00       	nop
  70:	52 c0       	rjmp	.+164    	; 0x116 <__bad_interrupt>
  72:	00 00       	nop
  74:	50 c0       	rjmp	.+160    	; 0x116 <__bad_interrupt>
  76:	00 00       	nop
  78:	4e c0       	rjmp	.+156    	; 0x116 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4c c0       	rjmp	.+152    	; 0x116 <__bad_interrupt>
  7e:	00 00       	nop
  80:	4a c0       	rjmp	.+148    	; 0x116 <__bad_interrupt>
  82:	00 00       	nop
  84:	48 c0       	rjmp	.+144    	; 0x116 <__bad_interrupt>
  86:	00 00       	nop
  88:	46 c0       	rjmp	.+140    	; 0x116 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	cf 00       	.word	0x00cf	; ????
  8e:	d3 00       	.word	0x00d3	; ????
  90:	d1 00       	.word	0x00d1	; ????
  92:	d7 00       	.word	0x00d7	; ????
  94:	dd 00       	.word	0x00dd	; ????
  96:	d5 00       	.word	0x00d5	; ????
  98:	dd 00       	.word	0x00dd	; ????
  9a:	db 00       	.word	0x00db	; ????
  9c:	f8 00       	.word	0x00f8	; ????
  9e:	dd 00       	.word	0x00dd	; ????
  a0:	dd 00       	.word	0x00dd	; ????
  a2:	d9 00       	.word	0x00d9	; ????
  a4:	e8 00       	.word	0x00e8	; ????
  a6:	ec 00       	.word	0x00ec	; ????
  a8:	ea 00       	.word	0x00ea	; ????
  aa:	f0 00       	.word	0x00f0	; ????
  ac:	f6 00       	.word	0x00f6	; ????
  ae:	ee 00       	.word	0x00ee	; ????
  b0:	f6 00       	.word	0x00f6	; ????
  b2:	f4 00       	.word	0x00f4	; ????
  b4:	fa 00       	.word	0x00fa	; ????
  b6:	f6 00       	.word	0x00f6	; ????
  b8:	f6 00       	.word	0x00f6	; ????
  ba:	f2 00       	.word	0x00f2	; ????
  bc:	b1 02       	muls	r27, r17
  be:	8b 02       	muls	r24, r27
  c0:	85 02       	muls	r24, r21
  c2:	79 02       	muls	r23, r25
  c4:	85 02       	muls	r24, r21
  c6:	79 02       	muls	r23, r25
  c8:	85 02       	muls	r24, r21
  ca:	79 02       	muls	r23, r25
  cc:	9e 02       	muls	r25, r30
  ce:	bc 02       	muls	r27, r28
  d0:	7f 02       	muls	r23, r31
  d2:	2f 02       	muls	r18, r31
  d4:	7f 02       	muls	r23, r31
  d6:	54 02       	muls	r21, r20
  d8:	7f 02       	muls	r23, r31
  da:	fc 01       	movw	r30, r24

000000dc <__ctors_end>:
  dc:	11 24       	eor	r1, r1
  de:	1f be       	out	0x3f, r1	; 63
  e0:	cf ef       	ldi	r28, 0xFF	; 255
  e2:	d0 e1       	ldi	r29, 0x10	; 16
  e4:	de bf       	out	0x3e, r29	; 62
  e6:	cd bf       	out	0x3d, r28	; 61

000000e8 <__do_copy_data>:
  e8:	11 e0       	ldi	r17, 0x01	; 1
  ea:	a0 e0       	ldi	r26, 0x00	; 0
  ec:	b1 e0       	ldi	r27, 0x01	; 1
  ee:	e6 e7       	ldi	r30, 0x76	; 118
  f0:	fa e0       	ldi	r31, 0x0A	; 10
  f2:	00 e0       	ldi	r16, 0x00	; 0
  f4:	0b bf       	out	0x3b, r16	; 59
  f6:	02 c0       	rjmp	.+4      	; 0xfc <__do_copy_data+0x14>
  f8:	07 90       	elpm	r0, Z+
  fa:	0d 92       	st	X+, r0
  fc:	ac 31       	cpi	r26, 0x1C	; 28
  fe:	b1 07       	cpc	r27, r17
 100:	d9 f7       	brne	.-10     	; 0xf8 <__do_copy_data+0x10>

00000102 <__do_clear_bss>:
 102:	21 e0       	ldi	r18, 0x01	; 1
 104:	ac e1       	ldi	r26, 0x1C	; 28
 106:	b1 e0       	ldi	r27, 0x01	; 1
 108:	01 c0       	rjmp	.+2      	; 0x10c <.do_clear_bss_start>

0000010a <.do_clear_bss_loop>:
 10a:	1d 92       	st	X+, r1

0000010c <.do_clear_bss_start>:
 10c:	ac 32       	cpi	r26, 0x2C	; 44
 10e:	b2 07       	cpc	r27, r18
 110:	e1 f7       	brne	.-8      	; 0x10a <.do_clear_bss_loop>
 112:	3c d4       	rcall	.+2168   	; 0x98c <main>
 114:	ae c4       	rjmp	.+2396   	; 0xa72 <_exit>

00000116 <__bad_interrupt>:
 116:	74 cf       	rjmp	.-280    	; 0x0 <__vectors>

00000118 <initFlag>:
            case 0x80: step=0x10; break;
            default: step=0x80; break;
        }
    }
    return step;
}
 118:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <motorForceLeftFlag>
 11c:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <motorForceRightFlag>
 120:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <countStopSign>
 124:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <stopSign>
 128:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <forceRightSign>
 12c:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <forceLeftSign>
 130:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <calibLeft>
 134:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <calibRight>
 138:	84 e6       	ldi	r24, 0x64	; 100
 13a:	81 bf       	out	0x31, r24	; 49
 13c:	08 95       	ret

0000013e <initPort>:
 13e:	1b ba       	out	0x1b, r1	; 27
 140:	1a ba       	out	0x1a, r1	; 26
 142:	18 ba       	out	0x18, r1	; 24
 144:	17 ba       	out	0x17, r1	; 23
 146:	15 ba       	out	0x15, r1	; 21
 148:	14 ba       	out	0x14, r1	; 20
 14a:	12 ba       	out	0x12, r1	; 18
 14c:	8f ef       	ldi	r24, 0xFF	; 255
 14e:	81 bb       	out	0x11, r24	; 17
 150:	13 b8       	out	0x03, r1	; 3
 152:	12 b8       	out	0x02, r1	; 2
 154:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 158:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 15c:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
 160:	83 e0       	ldi	r24, 0x03	; 3
 162:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
 166:	08 95       	ret

00000168 <initDevices>:
 168:	f8 94       	cli
 16a:	1c be       	out	0x3c, r1	; 60
 16c:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
 170:	e6 df       	rcall	.-52     	; 0x13e <initPort>
 172:	15 be       	out	0x35, r1	; 53
 174:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
 178:	1a be       	out	0x3a, r1	; 58
 17a:	19 be       	out	0x39, r1	; 57
 17c:	17 be       	out	0x37, r1	; 55
 17e:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <__TEXT_REGION_LENGTH__+0x7e007d>
 182:	78 94       	sei
 184:	08 95       	ret

00000186 <LEFTmotorOneClock>:
 186:	8f 70       	andi	r24, 0x0F	; 15
 188:	66 23       	and	r22, r22
 18a:	c9 f0       	breq	.+50     	; 0x1be <LEFTmotorOneClock+0x38>
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	fc 01       	movw	r30, r24
 190:	31 97       	sbiw	r30, 0x01	; 1
 192:	ec 30       	cpi	r30, 0x0C	; 12
 194:	f1 05       	cpc	r31, r1
 196:	88 f4       	brcc	.+34     	; 0x1ba <LEFTmotorOneClock+0x34>
 198:	ea 5b       	subi	r30, 0xBA	; 186
 19a:	ff 4f       	sbci	r31, 0xFF	; 255
 19c:	52 c4       	rjmp	.+2212   	; 0xa42 <__tablejump2__>
 19e:	83 e0       	ldi	r24, 0x03	; 3
 1a0:	08 95       	ret
 1a2:	82 e0       	ldi	r24, 0x02	; 2
 1a4:	08 95       	ret
 1a6:	86 e0       	ldi	r24, 0x06	; 6
 1a8:	08 95       	ret
 1aa:	84 e0       	ldi	r24, 0x04	; 4
 1ac:	08 95       	ret
 1ae:	8c e0       	ldi	r24, 0x0C	; 12
 1b0:	08 95       	ret
 1b2:	88 e0       	ldi	r24, 0x08	; 8
 1b4:	08 95       	ret
 1b6:	89 e0       	ldi	r24, 0x09	; 9
 1b8:	08 95       	ret
 1ba:	8c e0       	ldi	r24, 0x0C	; 12
 1bc:	08 95       	ret
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	fc 01       	movw	r30, r24
 1c2:	31 97       	sbiw	r30, 0x01	; 1
 1c4:	ec 30       	cpi	r30, 0x0C	; 12
 1c6:	f1 05       	cpc	r31, r1
 1c8:	88 f4       	brcc	.+34     	; 0x1ec <LEFTmotorOneClock+0x66>
 1ca:	ee 5a       	subi	r30, 0xAE	; 174
 1cc:	ff 4f       	sbci	r31, 0xFF	; 255
 1ce:	39 c4       	rjmp	.+2162   	; 0xa42 <__tablejump2__>
 1d0:	89 e0       	ldi	r24, 0x09	; 9
 1d2:	08 95       	ret
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	08 95       	ret
 1d8:	83 e0       	ldi	r24, 0x03	; 3
 1da:	08 95       	ret
 1dc:	82 e0       	ldi	r24, 0x02	; 2
 1de:	08 95       	ret
 1e0:	86 e0       	ldi	r24, 0x06	; 6
 1e2:	08 95       	ret
 1e4:	84 e0       	ldi	r24, 0x04	; 4
 1e6:	08 95       	ret
 1e8:	8c e0       	ldi	r24, 0x0C	; 12
 1ea:	08 95       	ret
 1ec:	8c e0       	ldi	r24, 0x0C	; 12
 1ee:	08 95       	ret
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	08 95       	ret
 1f4:	88 e0       	ldi	r24, 0x08	; 8
 1f6:	08 95       	ret

000001f8 <RIGHTmotorOneClock>:
    

unsigned char  RIGHTmotorOneClock(unsigned char step, char dir)
{    
    step = step & 0xf0;
 1f8:	80 7f       	andi	r24, 0xF0	; 240
    if(dir){
 1fa:	66 23       	and	r22, r22
 1fc:	29 f1       	breq	.+74     	; 0x248 <RIGHTmotorOneClock+0x50>
        switch(step){//후진
 1fe:	80 34       	cpi	r24, 0x40	; 64
 200:	d9 f0       	breq	.+54     	; 0x238 <RIGHTmotorOneClock+0x40>
 202:	38 f4       	brcc	.+14     	; 0x212 <RIGHTmotorOneClock+0x1a>
 204:	80 32       	cpi	r24, 0x20	; 32
 206:	a1 f0       	breq	.+40     	; 0x230 <RIGHTmotorOneClock+0x38>
 208:	80 33       	cpi	r24, 0x30	; 48
 20a:	81 f0       	breq	.+32     	; 0x22c <RIGHTmotorOneClock+0x34>
 20c:	80 31       	cpi	r24, 0x10	; 16
 20e:	d1 f4       	brne	.+52     	; 0x244 <RIGHTmotorOneClock+0x4c>
 210:	0b c0       	rjmp	.+22     	; 0x228 <RIGHTmotorOneClock+0x30>
 212:	80 38       	cpi	r24, 0x80	; 128
 214:	a9 f0       	breq	.+42     	; 0x240 <RIGHTmotorOneClock+0x48>
 216:	18 f4       	brcc	.+6      	; 0x21e <RIGHTmotorOneClock+0x26>
 218:	80 36       	cpi	r24, 0x60	; 96
 21a:	61 f0       	breq	.+24     	; 0x234 <RIGHTmotorOneClock+0x3c>
 21c:	13 c0       	rjmp	.+38     	; 0x244 <RIGHTmotorOneClock+0x4c>
 21e:	80 39       	cpi	r24, 0x90	; 144
 220:	c1 f1       	breq	.+112    	; 0x292 <RIGHTmotorOneClock+0x9a>
 222:	80 3c       	cpi	r24, 0xC0	; 192
 224:	59 f0       	breq	.+22     	; 0x23c <RIGHTmotorOneClock+0x44>
 226:	0e c0       	rjmp	.+28     	; 0x244 <RIGHTmotorOneClock+0x4c>
            case 0x90: step=0x10; break;
            case 0x10: step=0x30; break;
 228:	80 e3       	ldi	r24, 0x30	; 48
 22a:	08 95       	ret
            case 0x30: step=0x20; break;
 22c:	80 e2       	ldi	r24, 0x20	; 32
 22e:	08 95       	ret
            case 0x20: step=0x60; break;
 230:	80 e6       	ldi	r24, 0x60	; 96
 232:	08 95       	ret
            case 0x60: step=0x40; break;
 234:	80 e4       	ldi	r24, 0x40	; 64
 236:	08 95       	ret
            case 0x40: step=0xc0; break;
 238:	80 ec       	ldi	r24, 0xC0	; 192
 23a:	08 95       	ret
            case 0xc0: step=0x80; break;
 23c:	80 e8       	ldi	r24, 0x80	; 128
 23e:	08 95       	ret
            case 0x80: step=0x90; break;
 240:	80 e9       	ldi	r24, 0x90	; 144
 242:	08 95       	ret
            default: step=0xc0; break;
 244:	80 ec       	ldi	r24, 0xC0	; 192
 246:	08 95       	ret
        }
    }else{  
        switch(step){//전진
 248:	80 34       	cpi	r24, 0x40	; 64
 24a:	d9 f0       	breq	.+54     	; 0x282 <RIGHTmotorOneClock+0x8a>
 24c:	38 f4       	brcc	.+14     	; 0x25c <RIGHTmotorOneClock+0x64>
 24e:	80 32       	cpi	r24, 0x20	; 32
 250:	a1 f0       	breq	.+40     	; 0x27a <RIGHTmotorOneClock+0x82>
 252:	80 33       	cpi	r24, 0x30	; 48
 254:	81 f0       	breq	.+32     	; 0x276 <RIGHTmotorOneClock+0x7e>
 256:	80 31       	cpi	r24, 0x10	; 16
 258:	d1 f4       	brne	.+52     	; 0x28e <RIGHTmotorOneClock+0x96>
 25a:	0b c0       	rjmp	.+22     	; 0x272 <RIGHTmotorOneClock+0x7a>
 25c:	80 38       	cpi	r24, 0x80	; 128
 25e:	a9 f0       	breq	.+42     	; 0x28a <RIGHTmotorOneClock+0x92>
 260:	18 f4       	brcc	.+6      	; 0x268 <RIGHTmotorOneClock+0x70>
 262:	80 36       	cpi	r24, 0x60	; 96
 264:	61 f0       	breq	.+24     	; 0x27e <RIGHTmotorOneClock+0x86>
 266:	13 c0       	rjmp	.+38     	; 0x28e <RIGHTmotorOneClock+0x96>
 268:	80 39       	cpi	r24, 0x90	; 144
 26a:	a9 f0       	breq	.+42     	; 0x296 <RIGHTmotorOneClock+0x9e>
 26c:	80 3c       	cpi	r24, 0xC0	; 192
 26e:	59 f0       	breq	.+22     	; 0x286 <RIGHTmotorOneClock+0x8e>
 270:	0e c0       	rjmp	.+28     	; 0x28e <RIGHTmotorOneClock+0x96>
            case 0x90: step=0x80; break;//1001
            case 0x10: step=0x90; break;//0001
 272:	80 e9       	ldi	r24, 0x90	; 144
 274:	08 95       	ret
            case 0x30: step=0x10; break;//0011
 276:	80 e1       	ldi	r24, 0x10	; 16
 278:	08 95       	ret
            case 0x20: step=0x30; break;//0010
 27a:	80 e3       	ldi	r24, 0x30	; 48
 27c:	08 95       	ret
            case 0x60: step=0x20; break;//0110
 27e:	80 e2       	ldi	r24, 0x20	; 32
 280:	08 95       	ret
            case 0x40: step=0x60; break;//0100
 282:	80 e6       	ldi	r24, 0x60	; 96
 284:	08 95       	ret
            case 0xc0: step=0x40; break;//1100
 286:	80 e4       	ldi	r24, 0x40	; 64
 288:	08 95       	ret
            case 0x80: step=0xc0; break;//1000
 28a:	80 ec       	ldi	r24, 0xC0	; 192
 28c:	08 95       	ret
            default: step=0xc0; break;
 28e:	80 ec       	ldi	r24, 0xC0	; 192
 290:	08 95       	ret
unsigned char  RIGHTmotorOneClock(unsigned char step, char dir)
{    
    step = step & 0xf0;
    if(dir){
        switch(step){//후진
            case 0x90: step=0x10; break;
 292:	80 e1       	ldi	r24, 0x10	; 16
 294:	08 95       	ret
            case 0x80: step=0x90; break;
            default: step=0xc0; break;
        }
    }else{  
        switch(step){//전진
            case 0x90: step=0x80; break;//1001
 296:	80 e8       	ldi	r24, 0x80	; 128
            case 0x80: step=0xc0; break;//1000
            default: step=0xc0; break;
        }
    }
    return step;
}
 298:	08 95       	ret

0000029a <printSeg>:
void printSeg(int segNum, int segDigit){
    //by schematic, PORTE must being clear before set segment's digit and led.
    //because circuit use same port(A) to set segment's digit and led by latch.

    //set segment digit to print
    PORTA = FND_SEGPOS[segDigit];
 29a:	fb 01       	movw	r30, r22
 29c:	e4 5f       	subi	r30, 0xF4	; 244
 29e:	fe 4f       	sbci	r31, 0xFE	; 254
 2a0:	20 81       	ld	r18, Z
 2a2:	2b bb       	out	0x1b, r18	; 27
    PORTE |= 0x04; //set 1 segment digit latch
 2a4:	1a 9a       	sbi	0x03, 2	; 3
    PORTE &= ~(0x04); //clear LED_CTL(PE2)
 2a6:	1a 98       	cbi	0x03, 2	; 3

    //print num at segment
    PORTA = FND_SEGNP[segNum]; //print with out decimal point
 2a8:	80 5f       	subi	r24, 0xF0	; 240
 2aa:	9e 4f       	sbci	r25, 0xFE	; 254
 2ac:	fc 01       	movw	r30, r24
 2ae:	80 81       	ld	r24, Z
 2b0:	8b bb       	out	0x1b, r24	; 27
    PORTE |= 0x08; //set 1 segment led latch
 2b2:	1b 9a       	sbi	0x03, 3	; 3
    PORTE &= ~(0x08); //clear LED_DATA(PE3)
 2b4:	1b 98       	cbi	0x03, 3	; 3
 2b6:	08 95       	ret

000002b8 <initSegment>:
}

void initSegment(){
    //initialize port A and E
    DDRA = 0xFF;    //set portA(7:0) to output
 2b8:	8f ef       	ldi	r24, 0xFF	; 255
 2ba:	8a bb       	out	0x1a, r24	; 26
    DDRE |= 0x0C;   //set portE(3:2) to output
 2bc:	82 b1       	in	r24, 0x02	; 2
 2be:	8c 60       	ori	r24, 0x0C	; 12
 2c0:	82 b9       	out	0x02, r24	; 2
    PORTE |= 0x04;  //init portE(3)
 2c2:	1a 9a       	sbi	0x03, 2	; 3
    PORTA = 0x0F;   //init portA(3:0)
 2c4:	8f e0       	ldi	r24, 0x0F	; 15
 2c6:	8b bb       	out	0x1b, r24	; 27
 2c8:	08 95       	ret

000002ca <initInterrupt>:
}

void initInterrupt(){
        //external interrupt int4 enable
        //int4 pin falling edge활성화
        EICRB &= ~(1 << ISC40);
 2ca:	8a b7       	in	r24, 0x3a	; 58
 2cc:	8e 7f       	andi	r24, 0xFE	; 254
 2ce:	8a bf       	out	0x3a, r24	; 58
        EICRB |= 1 << ISC41; //same to EICRB = 0d00000010
 2d0:	8a b7       	in	r24, 0x3a	; 58
 2d2:	82 60       	ori	r24, 0x02	; 2
 2d4:	8a bf       	out	0x3a, r24	; 58
        //enable external interrupt 4
        EIMSK |= 1 << INT4;
 2d6:	89 b7       	in	r24, 0x39	; 57
 2d8:	80 61       	ori	r24, 0x10	; 16
 2da:	89 bf       	out	0x39, r24	; 57

        //external interrupt int5 enable
        //int5 pin falling edge활성화
        EICRB &= ~(1 << ISC50); //clear
 2dc:	8a b7       	in	r24, 0x3a	; 58
 2de:	8b 7f       	andi	r24, 0xFB	; 251
 2e0:	8a bf       	out	0x3a, r24	; 58
        EICRB |= 1 << ISC51;    //set
 2e2:	8a b7       	in	r24, 0x3a	; 58
 2e4:	88 60       	ori	r24, 0x08	; 8
 2e6:	8a bf       	out	0x3a, r24	; 58
        //enable external interrupt 5
        EIMSK |= 1 << INT5;
 2e8:	89 b7       	in	r24, 0x39	; 57
 2ea:	80 62       	ori	r24, 0x20	; 32
 2ec:	89 bf       	out	0x39, r24	; 57
 2ee:	08 95       	ret

000002f0 <initTimerInterrupt>:
}

void initTimerInterrupt()
{
    TCCR0 = 0x0d; //0d00001110//CTC mode and 64 prescaling
 2f0:	8d e0       	ldi	r24, 0x0D	; 13
 2f2:	83 bf       	out	0x33, r24	; 51
    TCNT0 = 0x00; //clear count value register. TCNT0 increase count from 0, clear on 63
 2f4:	12 be       	out	0x32, r1	; 50
    TIMSK = 0x02; //enable Timer/Counter0 compare match interrupt, disable overflow interrupt
 2f6:	82 e0       	ldi	r24, 0x02	; 2
 2f8:	87 bf       	out	0x37, r24	; 55
    TIFR = 0xff;  //write logic 1 on flag for clear register
 2fa:	8f ef       	ldi	r24, 0xFF	; 255
 2fc:	86 bf       	out	0x36, r24	; 54
    OCR0 = 0x6d;  //compare 110
 2fe:	8d e6       	ldi	r24, 0x6D	; 109
 300:	81 bf       	out	0x31, r24	; 49
 302:	08 95       	ret

00000304 <motor>:
        case LEFT  :
        stepRight = RIGHTmotorOneClock1Sang(stepRight, 1);
        break;
    }
    */
    switch(direction){
 304:	81 30       	cpi	r24, 0x01	; 1
 306:	51 f0       	breq	.+20     	; 0x31c <motor+0x18>
 308:	18 f0       	brcs	.+6      	; 0x310 <motor+0xc>
 30a:	82 30       	cpi	r24, 0x02	; 2
 30c:	71 f0       	breq	.+28     	; 0x32a <motor+0x26>
 30e:	13 c0       	rjmp	.+38     	; 0x336 <motor+0x32>
        case STRAIGHT : 
            stepRight = RIGHTmotorOneClock(stepRight, 1);  //break 없으니까 밑에꺼도 실행됨
 310:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <stepRight>
 314:	61 e0       	ldi	r22, 0x01	; 1
 316:	70 df       	rcall	.-288    	; 0x1f8 <RIGHTmotorOneClock>
 318:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <stepRight>
        case RIGHT : 
            stepLeft = LEFTmotorOneClock(stepLeft, 0);
 31c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <stepLeft>
 320:	60 e0       	ldi	r22, 0x00	; 0
 322:	31 df       	rcall	.-414    	; 0x186 <LEFTmotorOneClock>
 324:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <stepLeft>
            break;
 328:	06 c0       	rjmp	.+12     	; 0x336 <motor+0x32>
        case LEFT  : 
            stepRight = RIGHTmotorOneClock(stepRight, 1);
 32a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <stepRight>
 32e:	61 e0       	ldi	r22, 0x01	; 1
 330:	63 df       	rcall	.-314    	; 0x1f8 <RIGHTmotorOneClock>
 332:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <stepRight>
            break;
    }
    
    MOTOR_PORT = stepLeft|stepRight;
 336:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <stepLeft>
 33a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <stepRight>
 33e:	89 2b       	or	r24, r25
 340:	82 bb       	out	0x12, r24	; 18
 342:	08 95       	ret

00000344 <__vector_6>:
}

//출발
ISR(INT5_vect){
 344:	1f 92       	push	r1
 346:	0f 92       	push	r0
 348:	0f b6       	in	r0, 0x3f	; 63
 34a:	0f 92       	push	r0
 34c:	11 24       	eor	r1, r1
 34e:	8f 93       	push	r24
 350:	9f 93       	push	r25
    state = STATE_RUNNING;
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <state+0x1>
 35a:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <state>
}
 35e:	9f 91       	pop	r25
 360:	8f 91       	pop	r24
 362:	0f 90       	pop	r0
 364:	0f be       	out	0x3f, r0	; 63
 366:	0f 90       	pop	r0
 368:	1f 90       	pop	r1
 36a:	18 95       	reti

0000036c <__vector_5>:

//속도조절

ISR(INT4_vect){
 36c:	1f 92       	push	r1
 36e:	0f 92       	push	r0
 370:	0f b6       	in	r0, 0x3f	; 63
 372:	0f 92       	push	r0
 374:	11 24       	eor	r1, r1
 376:	8f 93       	push	r24
 378:	9f 93       	push	r25
    //when interrupt 4 excu, increase num
     
    if(timeNum > 70){
 37a:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <timeNum>
 37e:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <timeNum+0x1>
 382:	87 34       	cpi	r24, 0x47	; 71
 384:	91 05       	cpc	r25, r1
 386:	30 f0       	brcs	.+12     	; 0x394 <__vector_5+0x28>
        timeNum -= 5;
 388:	05 97       	sbiw	r24, 0x05	; 5
 38a:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <timeNum+0x1>
 38e:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <timeNum>
 392:	05 c0       	rjmp	.+10     	; 0x39e <__vector_5+0x32>
    }else{
        timeNum -= 2;
 394:	02 97       	sbiw	r24, 0x02	; 2
 396:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <timeNum+0x1>
 39a:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <timeNum>
    }
    if (timeNum < 40){
 39e:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <timeNum>
 3a2:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <timeNum+0x1>
 3a6:	88 32       	cpi	r24, 0x28	; 40
 3a8:	91 05       	cpc	r25, r1
 3aa:	98 f4       	brcc	.+38     	; 0x3d2 <__vector_5+0x66>
        OCR0 = timeNum = 110;
 3ac:	8e e6       	ldi	r24, 0x6E	; 110
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <timeNum+0x1>
 3b4:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <timeNum>
 3b8:	81 bf       	out	0x31, r24	; 49
    }
    if(timeNum < 100){
 3ba:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <timeNum>
 3be:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <timeNum+0x1>
 3c2:	84 36       	cpi	r24, 0x64	; 100
 3c4:	91 05       	cpc	r25, r1
 3c6:	18 f4       	brcc	.+6      	; 0x3ce <__vector_5+0x62>
        OCR0 = 100;
 3c8:	84 e6       	ldi	r24, 0x64	; 100
 3ca:	81 bf       	out	0x31, r24	; 49
 3cc:	06 c0       	rjmp	.+12     	; 0x3da <__vector_5+0x6e>
    }else if(timeNum >=100){
        OCR0 = timeNum;
 3ce:	81 bf       	out	0x31, r24	; 49
    }
        
}
 3d0:	04 c0       	rjmp	.+8      	; 0x3da <__vector_5+0x6e>
        timeNum -= 2;
    }
    if (timeNum < 40){
        OCR0 = timeNum = 110;
    }
    if(timeNum < 100){
 3d2:	84 36       	cpi	r24, 0x64	; 100
 3d4:	91 05       	cpc	r25, r1
 3d6:	d8 f7       	brcc	.-10     	; 0x3ce <__vector_5+0x62>
 3d8:	f7 cf       	rjmp	.-18     	; 0x3c8 <__vector_5+0x5c>
        OCR0 = 100;
    }else if(timeNum >=100){
        OCR0 = timeNum;
    }
        
}
 3da:	9f 91       	pop	r25
 3dc:	8f 91       	pop	r24
 3de:	0f 90       	pop	r0
 3e0:	0f be       	out	0x3f, r0	; 63
 3e2:	0f 90       	pop	r0
 3e4:	1f 90       	pop	r1
 3e6:	18 95       	reti

000003e8 <sensorScan>:

char rightSmoth = 0;
char leftSmoth = 0;

void sensorScan(int sensor){
    switch(sensor){
 3e8:	80 31       	cpi	r24, 0x10	; 16
 3ea:	91 05       	cpc	r25, r1
 3ec:	08 f0       	brcs	.+2      	; 0x3f0 <sensorScan+0x8>
 3ee:	c4 c0       	rjmp	.+392    	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
 3f0:	fc 01       	movw	r30, r24
 3f2:	e2 5a       	subi	r30, 0xA2	; 162
 3f4:	ff 4f       	sbci	r31, 0xFF	; 255
 3f6:	25 c3       	rjmp	.+1610   	; 0xa42 <__tablejump2__>
        case 0x0f:{                      //1111 - 걸리는거없음 직진
            //정지신호 있을때
            if(stopSign==1){            // stop sign(0110)이 있은뒤 사라지면 카운트
 3f8:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <stopSign>
 3fc:	81 30       	cpi	r24, 0x01	; 1
 3fe:	b9 f4       	brne	.+46     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
                forceRightSign = forceLeftSign = 0; //정지신호가 양쪽 조금씩 다르게 들어간경우 예외처리
 400:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <forceLeftSign>
 404:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <forceRightSign>
                stopSign=0;
 408:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <stopSign>
                countStopSign++;
 40c:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <countStopSign>
 410:	8f 5f       	subi	r24, 0xFF	; 255
 412:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <countStopSign>
                countTimeStop = 0;
 416:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
 41a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
                if (countTimeStop == 300){
                    countStopSign = 0;
                }

                if((countTimeStop < 300)&&(countStopSign > 2)){    //stopsign 3번 나오면 종료
 41e:	83 30       	cpi	r24, 0x03	; 3
 420:	d8 f0       	brcs	.+54     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
                    state = STATE_INIT;
 422:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <state+0x1>
 426:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <state>
                    initFlag();
 42a:	76 ce       	rjmp	.-788    	; 0x118 <initFlag>
                    return;
 42c:	08 95       	ret
                }
            }else if(forceRightSign){
 42e:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <forceRightSign>
 432:	88 23       	and	r24, r24
 434:	39 f0       	breq	.+14     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
                state=STATE_FORCE_RIGHT;
 436:	82 e0       	ldi	r24, 0x02	; 2
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <state+0x1>
 43e:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <state>
 442:	0a c0       	rjmp	.+20     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
            }else if(forceLeftSign){
 444:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <forceLeftSign>
 448:	88 23       	and	r24, r24
 44a:	31 f0       	breq	.+12     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
                state=STATE_FORCE_LEFT;
 44c:	83 e0       	ldi	r24, 0x03	; 3
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <state+0x1>
 454:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <state>
            }
            motor(STRAIGHT);   //직진!
 458:	80 e0       	ldi	r24, 0x00	; 0
 45a:	54 cf       	rjmp	.-344    	; 0x304 <motor>
            break;
 45c:	08 95       	ret
        }
        case 0x0b:{                      //1011 -- 하나걸림 좌회전
            if(leftSmoth == 1){
 45e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <leftSmoth>
 462:	81 30       	cpi	r24, 0x01	; 1
                motor(STRAIGHT);
 464:	29 f4       	brne	.+10     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 466:	80 e0       	ldi	r24, 0x00	; 0
 468:	4d df       	rcall	.-358    	; 0x304 <motor>
                leftSmoth=0;
 46a:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <leftSmoth>
 46e:	05 c0       	rjmp	.+10     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
            }else{
                leftSmoth++;
 470:	8f 5f       	subi	r24, 0xFF	; 255
 472:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <leftSmoth>
                motor(LEFT);
 476:	82 e0       	ldi	r24, 0x02	; 2
 478:	45 df       	rcall	.-374    	; 0x304 <motor>
            }
            if(forceRightSign){
 47a:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <forceRightSign>
 47e:	88 23       	and	r24, r24
 480:	39 f0       	breq	.+14     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
	            state=STATE_FORCE_RIGHT;
 482:	82 e0       	ldi	r24, 0x02	; 2
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <state+0x1>
 48a:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <state>
 48e:	08 95       	ret
	            }else if(forceLeftSign){
 490:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <forceLeftSign>
 494:	88 23       	and	r24, r24
 496:	09 f4       	brne	.+2      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 498:	71 c0       	rjmp	.+226    	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
	            state=STATE_FORCE_LEFT;
 49a:	83 e0       	ldi	r24, 0x03	; 3
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <state+0x1>
 4a2:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <state>
 4a6:	08 95       	ret
            }
            break;
        }
        case 0x0d:{                      //1101 -- 하나걸림 -우회전
            if(rightSmoth == 1){
 4a8:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <rightSmoth>
 4ac:	81 30       	cpi	r24, 0x01	; 1
                motor(STRAIGHT);
 4ae:	29 f4       	brne	.+10     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
 4b0:	80 e0       	ldi	r24, 0x00	; 0
 4b2:	28 df       	rcall	.-432    	; 0x304 <motor>
                rightSmoth=0;
 4b4:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <rightSmoth>
             }else{
                rightSmoth++;
 4b8:	05 c0       	rjmp	.+10     	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
 4ba:	8f 5f       	subi	r24, 0xFF	; 255
 4bc:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <rightSmoth>
                motor(RIGHT);
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	20 df       	rcall	.-448    	; 0x304 <motor>
            }
			if(forceRightSign){
 4c4:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <forceRightSign>
 4c8:	88 23       	and	r24, r24
 4ca:	39 f0       	breq	.+14     	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
				state=STATE_FORCE_RIGHT;
 4cc:	82 e0       	ldi	r24, 0x02	; 2
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <state+0x1>
 4d4:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <state>
 4d8:	08 95       	ret
				}else if(forceLeftSign){
 4da:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <forceLeftSign>
 4de:	88 23       	and	r24, r24
 4e0:	09 f4       	brne	.+2      	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
 4e2:	4c c0       	rjmp	.+152    	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
				state=STATE_FORCE_LEFT;
 4e4:	83 e0       	ldi	r24, 0x03	; 3
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <state+0x1>
 4ec:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <state>
        }
		
		case 0x03:		//0011
        case 0x05:		//0101
        case 0x07:{                      //0111 -- 교차로 좌회전 신호
            forceLeftSign = 1;
 4f0:	08 95       	ret
 4f2:	81 e0       	ldi	r24, 0x01	; 1
 4f4:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <forceLeftSign>
            motor(STRAIGHT);
 4f8:	80 e0       	ldi	r24, 0x00	; 0
            break;
 4fa:	04 cf       	rjmp	.-504    	; 0x304 <motor>
        }
		case 0x0c:			//1100
        case 0x0a:
        case 0x0e:{                      //1110 -- 교차로 우회전 신호
            
            forceRightSign = 1;
 4fc:	08 95       	ret
 4fe:	81 e0       	ldi	r24, 0x01	; 1
            motor(STRAIGHT);
 500:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <forceRightSign>
 504:	80 e0       	ldi	r24, 0x00	; 0
            break;        
 506:	fe ce       	rjmp	.-516    	; 0x304 <motor>
        }
        case 0x02://0010
        case 0x04://0100
        case 0x06:{                      //0110 -- 정지 신호
            
            stopSign=1;                    //flag 설정
 508:	08 95       	ret
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <stopSign>
            motor(STRAIGHT);
 510:	80 e0       	ldi	r24, 0x00	; 0
 512:	f8 ce       	rjmp	.-528    	; 0x304 <motor>
            break;
 514:	08 95       	ret
        }
        case 0x01:{                        //0001 - 교차로로 치우쳐 들어감
            if(calibRight == 1){                //교차로 1000으로 들어와서 0001로 나온경우엔 오른쪽으로칼리브레이션을 해줘야 합니다.
 516:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <calibRight>
 51a:	81 30       	cpi	r24, 0x01	; 1
 51c:	49 f4       	brne	.+18     	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
                state = STATE_CALIB_RIGHT;
 51e:	84 e0       	ldi	r24, 0x04	; 4
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <state+0x1>
 526:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <state>
                calibRight = 0;//스테이트 바꿨으면 초기화하기
 52a:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <calibRight>
                return;
            }else{
                calibLeft = 1;
 52e:	08 95       	ret
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <calibLeft>
            }
            motor(STRAIGHT);
 536:	80 e0       	ldi	r24, 0x00	; 0
 538:	e5 ce       	rjmp	.-566    	; 0x304 <motor>
            break;
 53a:	08 95       	ret
        }
        case 0x08:{                        //1000    - 교차로로 치우쳐 들어감
            if(calibLeft == 1){                //교차로 0001으로 들어와서 1000로 나온경우 왼쪽으로칼리브레이션을 해줘야 합니다.
 53c:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <calibLeft>
 540:	81 30       	cpi	r24, 0x01	; 1
 542:	49 f4       	brne	.+18     	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
                state = STATE_CALIB_LEFT;
 544:	85 e0       	ldi	r24, 0x05	; 5
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <state+0x1>
 54c:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <state>
                calibLeft = 0;//스테이트 바꿨으면 초기화하기
 550:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <calibLeft>
                return;
            }else{
                calibRight = 1;
 554:	08 95       	ret
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <calibRight>
            }
            motor(STRAIGHT);
 55c:	80 e0       	ldi	r24, 0x00	; 0
            break;
 55e:	d2 ce       	rjmp	.-604    	; 0x304 <motor>
        }
        case 0x00:{                      //0000 - 교차로
            forceLeftSign = forceRightSign = stopSign= countStopSign = 0;                //교차로에 많이 치우쳐 들어온경우(0111이 인식된뒤 들어온)교차로 를 나간뒤 STATE_FORCE로 들어가지 않게 초기화 해줘야 합니다.
 560:	08 95       	ret
 562:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <countStopSign>
 566:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <stopSign>
 56a:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <forceRightSign>
            motor(STRAIGHT);
 56e:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <forceLeftSign>
 572:	80 e0       	ldi	r24, 0x00	; 0
            break;
 574:	c7 ce       	rjmp	.-626    	; 0x304 <motor>
        }
        default: {   
            motor(STRAIGHT);
 576:	08 95       	ret
 578:	80 e0       	ldi	r24, 0x00	; 0
 57a:	c4 ce       	rjmp	.-632    	; 0x304 <motor>
 57c:	08 95       	ret

0000057e <__vector_15>:
}
char smothStart=0;
char stateForceSmoth = 0;
short forceStraight = 0;
ISR(TIMER0_COMP_vect)  //OCR0와 카운터 비교해서 실행됨. 즉 모터의 펄스 간격(속도)가 ocr0에 따라 가변
{
 57e:	1f 92       	push	r1
 580:	0f 92       	push	r0
 582:	0f b6       	in	r0, 0x3f	; 63
 584:	0f 92       	push	r0
 586:	11 24       	eor	r1, r1
 588:	0b b6       	in	r0, 0x3b	; 59
 58a:	0f 92       	push	r0
 58c:	2f 93       	push	r18
 58e:	3f 93       	push	r19
 590:	4f 93       	push	r20
 592:	5f 93       	push	r21
 594:	6f 93       	push	r22
 596:	7f 93       	push	r23
 598:	8f 93       	push	r24
 59a:	9f 93       	push	r25
 59c:	af 93       	push	r26
 59e:	bf 93       	push	r27
 5a0:	cf 93       	push	r28
 5a2:	df 93       	push	r29
 5a4:	ef 93       	push	r30
 5a6:	ff 93       	push	r31
    int sensor = SENSOR_PORT & 0x0F; //센서값 읽기
 5a8:	83 b3       	in	r24, 0x13	; 19
 5aa:	8f 70       	andi	r24, 0x0F	; 15
 5ac:	c8 2f       	mov	r28, r24
 5ae:	d0 e0       	ldi	r29, 0x00	; 0
    
    if(countTimeStop < 1000){
 5b0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 5b4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 5b8:	28 3e       	cpi	r18, 0xE8	; 232
 5ba:	93 e0       	ldi	r25, 0x03	; 3
 5bc:	39 07       	cpc	r19, r25
 5be:	34 f4       	brge	.+12     	; 0x5cc <__vector_15+0x4e>
        countTimeStop++;
 5c0:	2f 5f       	subi	r18, 0xFF	; 255
 5c2:	3f 4f       	sbci	r19, 0xFF	; 255
 5c4:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__data_start+0x1>
 5c8:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__data_start>
    }
    
    
    if(state == STATE_FORCE_RIGHT){                                 //-강제회전
 5cc:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <state>
 5d0:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <state+0x1>
 5d4:	22 30       	cpi	r18, 0x02	; 2
 5d6:	31 05       	cpc	r19, r1
 5d8:	09 f0       	breq	.+2      	; 0x5dc <__vector_15+0x5e>
 5da:	b9 c0       	rjmp	.+370    	; 0x74e <__vector_15+0x1d0>
        if(80 > OCR0&&(smothStart==10)){
 5dc:	91 b7       	in	r25, 0x31	; 49
 5de:	90 35       	cpi	r25, 0x50	; 80
 5e0:	50 f4       	brcc	.+20     	; 0x5f6 <__vector_15+0x78>
 5e2:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <smothStart>
 5e6:	9a 30       	cpi	r25, 0x0A	; 10
 5e8:	31 f4       	brne	.+12     	; 0x5f6 <__vector_15+0x78>
            OCR0++;
 5ea:	91 b7       	in	r25, 0x31	; 49
 5ec:	9f 5f       	subi	r25, 0xFF	; 255
 5ee:	91 bf       	out	0x31, r25	; 49
            smothStart=0;
 5f0:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <smothStart>
 5f4:	05 c0       	rjmp	.+10     	; 0x600 <__vector_15+0x82>
            }else{
            smothStart++;
 5f6:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <smothStart>
 5fa:	9f 5f       	subi	r25, 0xFF	; 255
 5fc:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <smothStart>
        }
        if(!forceRightSign){
 600:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <forceRightSign>
 604:	91 11       	cpse	r25, r1
 606:	29 c0       	rjmp	.+82     	; 0x65a <__vector_15+0xdc>
            if(stateForceSmoth==3){
 608:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <stateForceSmoth>
 60c:	83 30       	cpi	r24, 0x03	; 3
 60e:	29 f4       	brne	.+10     	; 0x61a <__vector_15+0x9c>
                motor(STRAIGHT); 
 610:	80 e0       	ldi	r24, 0x00	; 0
 612:	78 de       	rcall	.-784    	; 0x304 <motor>
                stateForceSmoth=0;
 614:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <stateForceSmoth>
 618:	05 c0       	rjmp	.+10     	; 0x624 <__vector_15+0xa6>
            }else{
                stateForceSmoth++;
 61a:	8f 5f       	subi	r24, 0xFF	; 255
 61c:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <stateForceSmoth>
                motor(RIGHT); 
 620:	81 e0       	ldi	r24, 0x01	; 1
 622:	70 de       	rcall	.-800    	; 0x304 <motor>
            }
            forceStraight++;                                          //교차로에 들어간 뒤엔 회전만 합니다
 624:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
 628:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
 62c:	01 96       	adiw	r24, 0x01	; 1
 62e:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <__data_end+0x1>
 632:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
            if((forceStraight>80)&&(sensor == 0x0d)){
 636:	81 35       	cpi	r24, 0x51	; 81
 638:	91 05       	cpc	r25, r1
 63a:	0c f4       	brge	.+2      	; 0x63e <__vector_15+0xc0>
 63c:	92 c1       	rjmp	.+804    	; 0x962 <__vector_15+0x3e4>
 63e:	2d 97       	sbiw	r28, 0x0d	; 13
 640:	09 f0       	breq	.+2      	; 0x644 <__vector_15+0xc6>
 642:	8f c1       	rjmp	.+798    	; 0x962 <__vector_15+0x3e4>
                state = STATE_RUNNING;   
 644:	81 e0       	ldi	r24, 0x01	; 1
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <state+0x1>
 64c:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <state>
                forceStraight=0;                           //강제 회전하다 라인이 잡히면 트랙 타기
 650:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <__data_end+0x1>
 654:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <__data_end>
 658:	84 c1       	rjmp	.+776    	; 0x962 <__vector_15+0x3e4>
            }
        }else{
            if(timeNum<100){
 65a:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <timeNum>
 65e:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <timeNum+0x1>
 662:	24 36       	cpi	r18, 0x64	; 100
 664:	31 05       	cpc	r19, r1
 666:	08 f0       	brcs	.+2      	; 0x66a <__vector_15+0xec>
 668:	3e c0       	rjmp	.+124    	; 0x6e6 <__vector_15+0x168>
                switch(sensor){
 66a:	8d 30       	cpi	r24, 0x0D	; 13
 66c:	b9 f0       	breq	.+46     	; 0x69c <__vector_15+0x11e>
 66e:	8f 30       	cpi	r24, 0x0F	; 15
 670:	19 f0       	breq	.+6      	; 0x678 <__vector_15+0xfa>
 672:	8b 30       	cpi	r24, 0x0B	; 11
 674:	11 f5       	brne	.+68     	; 0x6ba <__vector_15+0x13c>
	                case 0x0f:
	                motor(STRAIGHT);
 676:	03 c0       	rjmp	.+6      	; 0x67e <__vector_15+0x100>
 678:	80 e0       	ldi	r24, 0x00	; 0
 67a:	44 de       	rcall	.-888    	; 0x304 <motor>
	                break;
 67c:	20 c0       	rjmp	.+64     	; 0x6be <__vector_15+0x140>
	                case 0x0b:{                      //1011 -- 하나걸림 좌회전
		                if(stateForceSmoth==3){
 67e:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <stateForceSmoth>
 682:	83 30       	cpi	r24, 0x03	; 3
			                motor(STRAIGHT);
 684:	29 f4       	brne	.+10     	; 0x690 <__vector_15+0x112>
 686:	80 e0       	ldi	r24, 0x00	; 0
 688:	3d de       	rcall	.-902    	; 0x304 <motor>
			                stateForceSmoth=0;
 68a:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <stateForceSmoth>
 68e:	17 c0       	rjmp	.+46     	; 0x6be <__vector_15+0x140>
			                }else{
			                stateForceSmoth++;
 690:	8f 5f       	subi	r24, 0xFF	; 255
 692:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <stateForceSmoth>
			                motor(LEFT);
 696:	82 e0       	ldi	r24, 0x02	; 2
 698:	35 de       	rcall	.-918    	; 0x304 <motor>
 69a:	11 c0       	rjmp	.+34     	; 0x6be <__vector_15+0x140>
		                }
		                break;
	                }
	                case 0x0d:{                      //1101 -- 하나걸림 -우회전
		                if(stateForceSmoth==3){
 69c:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <stateForceSmoth>
 6a0:	83 30       	cpi	r24, 0x03	; 3
			                motor(STRAIGHT);
 6a2:	29 f4       	brne	.+10     	; 0x6ae <__vector_15+0x130>
 6a4:	80 e0       	ldi	r24, 0x00	; 0
 6a6:	2e de       	rcall	.-932    	; 0x304 <motor>
			                stateForceSmoth=0;
 6a8:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <stateForceSmoth>
			                }else{
			                stateForceSmoth++;
 6ac:	08 c0       	rjmp	.+16     	; 0x6be <__vector_15+0x140>
 6ae:	8f 5f       	subi	r24, 0xFF	; 255
			                motor(RIGHT);
 6b0:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <stateForceSmoth>
 6b4:	81 e0       	ldi	r24, 0x01	; 1
 6b6:	26 de       	rcall	.-948    	; 0x304 <motor>
		                }
		                break;
	                }
	                default:
	                motor(STRAIGHT);
 6b8:	02 c0       	rjmp	.+4      	; 0x6be <__vector_15+0x140>
 6ba:	80 e0       	ldi	r24, 0x00	; 0
 6bc:	23 de       	rcall	.-954    	; 0x304 <motor>
                }
                forceStraight++;
 6be:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
 6c2:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
 6c6:	01 96       	adiw	r24, 0x01	; 1
 6c8:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <__data_end+0x1>
 6cc:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
                if(forceStraight==240){
 6d0:	80 3f       	cpi	r24, 0xF0	; 240
 6d2:	91 05       	cpc	r25, r1
 6d4:	09 f0       	breq	.+2      	; 0x6d8 <__vector_15+0x15a>
 6d6:	45 c1       	rjmp	.+650    	; 0x962 <__vector_15+0x3e4>
                    forceRightSign = 0;
 6d8:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <forceRightSign>
					forceStraight=0;  
 6dc:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <__data_end+0x1>
 6e0:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <__data_end>
                }
            }else if(sensor == 0x00 || sensor == 0x01 || sensor == 0x08){    
 6e4:	3e c1       	rjmp	.+636    	; 0x962 <__vector_15+0x3e4>
 6e6:	82 30       	cpi	r24, 0x02	; 2
 6e8:	10 f0       	brcs	.+4      	; 0x6ee <__vector_15+0x170>
 6ea:	28 97       	sbiw	r28, 0x08	; 8
                forceRightSign = 0;  
 6ec:	29 f4       	brne	.+10     	; 0x6f8 <__vector_15+0x17a>
 6ee:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <forceRightSign>
                motor(RIGHT);                               //교차로 나타나면 플래그 초기화 하고 강제로 돌림
 6f2:	81 e0       	ldi	r24, 0x01	; 1
 6f4:	07 de       	rcall	.-1010   	; 0x304 <motor>
            }else{
                switch(sensor){
 6f6:	35 c1       	rjmp	.+618    	; 0x962 <__vector_15+0x3e4>
 6f8:	8d 30       	cpi	r24, 0x0D	; 13
 6fa:	b9 f0       	breq	.+46     	; 0x72a <__vector_15+0x1ac>
 6fc:	8f 30       	cpi	r24, 0x0F	; 15
 6fe:	19 f0       	breq	.+6      	; 0x706 <__vector_15+0x188>
 700:	8b 30       	cpi	r24, 0x0B	; 11
                    case 0x0f: 
                        motor(STRAIGHT);
 702:	11 f5       	brne	.+68     	; 0x748 <__vector_15+0x1ca>
 704:	03 c0       	rjmp	.+6      	; 0x70c <__vector_15+0x18e>
 706:	80 e0       	ldi	r24, 0x00	; 0
                        break;
 708:	fd dd       	rcall	.-1030   	; 0x304 <motor>
                    case 0x0b:{                      //1011 -- 하나걸림 좌회전
                        if(stateForceSmoth==3){
 70a:	2b c1       	rjmp	.+598    	; 0x962 <__vector_15+0x3e4>
 70c:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <stateForceSmoth>
	                        motor(STRAIGHT);
 710:	83 30       	cpi	r24, 0x03	; 3
 712:	29 f4       	brne	.+10     	; 0x71e <__vector_15+0x1a0>
 714:	80 e0       	ldi	r24, 0x00	; 0
	                        stateForceSmoth=0;
 716:	f6 dd       	rcall	.-1044   	; 0x304 <motor>
 718:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <stateForceSmoth>
	                    }else{
	                        stateForceSmoth++;
 71c:	22 c1       	rjmp	.+580    	; 0x962 <__vector_15+0x3e4>
 71e:	8f 5f       	subi	r24, 0xFF	; 255
	                        motor(LEFT);
 720:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <stateForceSmoth>
 724:	82 e0       	ldi	r24, 0x02	; 2
 726:	ee dd       	rcall	.-1060   	; 0x304 <motor>
                        }
                        break;
                    }
                    case 0x0d:{                      //1101 -- 하나걸림 -우회전
                        if(stateForceSmoth==3){
 728:	1c c1       	rjmp	.+568    	; 0x962 <__vector_15+0x3e4>
 72a:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <stateForceSmoth>
	                        motor(STRAIGHT);
 72e:	83 30       	cpi	r24, 0x03	; 3
 730:	29 f4       	brne	.+10     	; 0x73c <__vector_15+0x1be>
	                        stateForceSmoth=0;
 732:	80 e0       	ldi	r24, 0x00	; 0
 734:	e7 dd       	rcall	.-1074   	; 0x304 <motor>
 736:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <stateForceSmoth>
	                    }else{
	                        stateForceSmoth++;
 73a:	13 c1       	rjmp	.+550    	; 0x962 <__vector_15+0x3e4>
 73c:	8f 5f       	subi	r24, 0xFF	; 255
	                        motor(RIGHT);
 73e:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <stateForceSmoth>
 742:	81 e0       	ldi	r24, 0x01	; 1
 744:	df dd       	rcall	.-1090   	; 0x304 <motor>
                        }
                        break;
                    }
                    default:
                        motor(STRAIGHT);
 746:	0d c1       	rjmp	.+538    	; 0x962 <__vector_15+0x3e4>
 748:	80 e0       	ldi	r24, 0x00	; 0
 74a:	dc dd       	rcall	.-1096   	; 0x304 <motor>
 74c:	0a c1       	rjmp	.+532    	; 0x962 <__vector_15+0x3e4>
                }
            }                                      //교차로 들어가기 전까지는 무조껀 직진
        }
    }else if(state == STATE_FORCE_LEFT){                            //-강제회전
 74e:	23 30       	cpi	r18, 0x03	; 3
 750:	31 05       	cpc	r19, r1
 752:	09 f0       	breq	.+2      	; 0x756 <__vector_15+0x1d8>
 754:	b9 c0       	rjmp	.+370    	; 0x8c8 <__vector_15+0x34a>
        
        if(80 > OCR0&&(smothStart==10)){
 756:	91 b7       	in	r25, 0x31	; 49
 758:	90 35       	cpi	r25, 0x50	; 80
 75a:	50 f4       	brcc	.+20     	; 0x770 <__vector_15+0x1f2>
 75c:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <smothStart>
 760:	9a 30       	cpi	r25, 0x0A	; 10
 762:	31 f4       	brne	.+12     	; 0x770 <__vector_15+0x1f2>
            OCR0++;
 764:	91 b7       	in	r25, 0x31	; 49
 766:	9f 5f       	subi	r25, 0xFF	; 255
 768:	91 bf       	out	0x31, r25	; 49
            smothStart=0;
 76a:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <smothStart>
            
            }else{
            smothStart++;
 76e:	05 c0       	rjmp	.+10     	; 0x77a <__vector_15+0x1fc>
 770:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <smothStart>
 774:	9f 5f       	subi	r25, 0xFF	; 255
 776:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <smothStart>
        }
        if(!forceLeftSign){
 77a:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <forceLeftSign>
            if(stateForceSmoth==3){
 77e:	91 11       	cpse	r25, r1
 780:	29 c0       	rjmp	.+82     	; 0x7d4 <__vector_15+0x256>
 782:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <stateForceSmoth>
                motor(STRAIGHT);
 786:	83 30       	cpi	r24, 0x03	; 3
 788:	29 f4       	brne	.+10     	; 0x794 <__vector_15+0x216>
 78a:	80 e0       	ldi	r24, 0x00	; 0
                stateForceSmoth=0;
 78c:	bb dd       	rcall	.-1162   	; 0x304 <motor>
 78e:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <stateForceSmoth>
            }else{
                stateForceSmoth++;
 792:	05 c0       	rjmp	.+10     	; 0x79e <__vector_15+0x220>
 794:	8f 5f       	subi	r24, 0xFF	; 255
 796:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <stateForceSmoth>
                motor(LEFT);   
 79a:	82 e0       	ldi	r24, 0x02	; 2
 79c:	b3 dd       	rcall	.-1178   	; 0x304 <motor>
            }
            forceStraight++;                                           //교차로에 들어간 뒤엔 회전만 합니다
 79e:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
 7a2:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
 7a6:	01 96       	adiw	r24, 0x01	; 1
 7a8:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <__data_end+0x1>
 7ac:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
            if((forceStraight>80)&&(sensor == 0x0b)){                                        //강제 회전하다 라인 잡히면 트랙 타기
 7b0:	81 35       	cpi	r24, 0x51	; 81
 7b2:	91 05       	cpc	r25, r1
 7b4:	0c f4       	brge	.+2      	; 0x7b8 <__vector_15+0x23a>
 7b6:	d5 c0       	rjmp	.+426    	; 0x962 <__vector_15+0x3e4>
 7b8:	2b 97       	sbiw	r28, 0x0b	; 11
 7ba:	09 f0       	breq	.+2      	; 0x7be <__vector_15+0x240>
 7bc:	d2 c0       	rjmp	.+420    	; 0x962 <__vector_15+0x3e4>
                state = STATE_RUNNING;
 7be:	81 e0       	ldi	r24, 0x01	; 1
 7c0:	90 e0       	ldi	r25, 0x00	; 0
 7c2:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <state+0x1>
 7c6:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <state>
                forceStraight=0;
 7ca:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <__data_end+0x1>
 7ce:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <__data_end>
            }
        }else{         
            if(timeNum<100){
 7d2:	c7 c0       	rjmp	.+398    	; 0x962 <__vector_15+0x3e4>
 7d4:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <timeNum>
 7d8:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <timeNum+0x1>
 7dc:	24 36       	cpi	r18, 0x64	; 100
 7de:	31 05       	cpc	r19, r1
                switch(sensor){
 7e0:	08 f0       	brcs	.+2      	; 0x7e4 <__vector_15+0x266>
 7e2:	3e c0       	rjmp	.+124    	; 0x860 <__vector_15+0x2e2>
 7e4:	8d 30       	cpi	r24, 0x0D	; 13
 7e6:	b9 f0       	breq	.+46     	; 0x816 <__vector_15+0x298>
 7e8:	8f 30       	cpi	r24, 0x0F	; 15
 7ea:	19 f0       	breq	.+6      	; 0x7f2 <__vector_15+0x274>
	                case 0x0f:
	                motor(STRAIGHT);
 7ec:	8b 30       	cpi	r24, 0x0B	; 11
 7ee:	11 f5       	brne	.+68     	; 0x834 <__vector_15+0x2b6>
 7f0:	03 c0       	rjmp	.+6      	; 0x7f8 <__vector_15+0x27a>
	                break;
 7f2:	80 e0       	ldi	r24, 0x00	; 0
	                case 0x0b:{                      //1011 -- 하나걸림 좌회전
		                if(stateForceSmoth==3){
 7f4:	87 dd       	rcall	.-1266   	; 0x304 <motor>
 7f6:	20 c0       	rjmp	.+64     	; 0x838 <__vector_15+0x2ba>
 7f8:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <stateForceSmoth>
			                motor(STRAIGHT);
 7fc:	83 30       	cpi	r24, 0x03	; 3
 7fe:	29 f4       	brne	.+10     	; 0x80a <__vector_15+0x28c>
			                stateForceSmoth=0;
 800:	80 e0       	ldi	r24, 0x00	; 0
 802:	80 dd       	rcall	.-1280   	; 0x304 <motor>
 804:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <stateForceSmoth>
			                }else{
			                stateForceSmoth++;
 808:	17 c0       	rjmp	.+46     	; 0x838 <__vector_15+0x2ba>
			                motor(LEFT);
 80a:	8f 5f       	subi	r24, 0xFF	; 255
 80c:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <stateForceSmoth>
		                }
		                break;
	                }
	                case 0x0d:{                      //1101 -- 하나걸림 -우회전
		                if(stateForceSmoth==3){
 810:	82 e0       	ldi	r24, 0x02	; 2
 812:	78 dd       	rcall	.-1296   	; 0x304 <motor>
 814:	11 c0       	rjmp	.+34     	; 0x838 <__vector_15+0x2ba>
 816:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <stateForceSmoth>
			                motor(STRAIGHT);
 81a:	83 30       	cpi	r24, 0x03	; 3
 81c:	29 f4       	brne	.+10     	; 0x828 <__vector_15+0x2aa>
			                stateForceSmoth=0;
 81e:	80 e0       	ldi	r24, 0x00	; 0
 820:	71 dd       	rcall	.-1310   	; 0x304 <motor>
 822:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <stateForceSmoth>
			                }else{
			                stateForceSmoth++;
 826:	08 c0       	rjmp	.+16     	; 0x838 <__vector_15+0x2ba>
 828:	8f 5f       	subi	r24, 0xFF	; 255
			                motor(RIGHT);
 82a:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <stateForceSmoth>
 82e:	81 e0       	ldi	r24, 0x01	; 1
 830:	69 dd       	rcall	.-1326   	; 0x304 <motor>
		                }
		                break;
	                }
	                default:
	                motor(STRAIGHT);
 832:	02 c0       	rjmp	.+4      	; 0x838 <__vector_15+0x2ba>
 834:	80 e0       	ldi	r24, 0x00	; 0
 836:	66 dd       	rcall	.-1332   	; 0x304 <motor>
                }
                forceStraight++;
 838:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
 83c:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
 840:	01 96       	adiw	r24, 0x01	; 1
 842:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <__data_end+0x1>
 846:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
                if(forceStraight==240){
 84a:	80 3f       	cpi	r24, 0xF0	; 240
 84c:	91 05       	cpc	r25, r1
 84e:	09 f0       	breq	.+2      	; 0x852 <__vector_15+0x2d4>
                    forceLeftSign = 0;
 850:	88 c0       	rjmp	.+272    	; 0x962 <__vector_15+0x3e4>
                    forceStraight=0;
 852:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <forceLeftSign>
 856:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <__data_end+0x1>
 85a:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <__data_end>
                    
                }
            }else if(sensor == 0x00 || sensor == 0x01 || sensor == 0x08){
 85e:	81 c0       	rjmp	.+258    	; 0x962 <__vector_15+0x3e4>
 860:	82 30       	cpi	r24, 0x02	; 2
                forceLeftSign = 0;   
 862:	10 f0       	brcs	.+4      	; 0x868 <__vector_15+0x2ea>
 864:	28 97       	sbiw	r28, 0x08	; 8
                motor(LEFT);                               //교차로 나타나면 플래그 초기화 하고 강제로 돌림
 866:	29 f4       	brne	.+10     	; 0x872 <__vector_15+0x2f4>
 868:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <forceLeftSign>
            }else{
                switch(sensor){
 86c:	82 e0       	ldi	r24, 0x02	; 2
 86e:	4a dd       	rcall	.-1388   	; 0x304 <motor>
 870:	78 c0       	rjmp	.+240    	; 0x962 <__vector_15+0x3e4>
 872:	8d 30       	cpi	r24, 0x0D	; 13
 874:	b9 f0       	breq	.+46     	; 0x8a4 <__vector_15+0x326>
 876:	8f 30       	cpi	r24, 0x0F	; 15
                    case 0x0f:
                    motor(STRAIGHT);
 878:	19 f0       	breq	.+6      	; 0x880 <__vector_15+0x302>
 87a:	8b 30       	cpi	r24, 0x0B	; 11
 87c:	11 f5       	brne	.+68     	; 0x8c2 <__vector_15+0x344>
                    break;
 87e:	03 c0       	rjmp	.+6      	; 0x886 <__vector_15+0x308>
                    case 0x0b:{                      //1011 -- 하나걸림 좌회전
	                    if(stateForceSmoth==3){
 880:	80 e0       	ldi	r24, 0x00	; 0
 882:	40 dd       	rcall	.-1408   	; 0x304 <motor>
 884:	6e c0       	rjmp	.+220    	; 0x962 <__vector_15+0x3e4>
		                    motor(STRAIGHT);
 886:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <stateForceSmoth>
		                    stateForceSmoth=0;
 88a:	83 30       	cpi	r24, 0x03	; 3
 88c:	29 f4       	brne	.+10     	; 0x898 <__vector_15+0x31a>
 88e:	80 e0       	ldi	r24, 0x00	; 0
		                    }else{
		                    stateForceSmoth++;
 890:	39 dd       	rcall	.-1422   	; 0x304 <motor>
 892:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <stateForceSmoth>
		                    motor(LEFT);
 896:	65 c0       	rjmp	.+202    	; 0x962 <__vector_15+0x3e4>
 898:	8f 5f       	subi	r24, 0xFF	; 255
 89a:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <stateForceSmoth>
	                    }
	                    break;
                    }
                    case 0x0d:{                      //1101 -- 하나걸림 -우회전
	                    if(stateForceSmoth==3){
 89e:	82 e0       	ldi	r24, 0x02	; 2
 8a0:	31 dd       	rcall	.-1438   	; 0x304 <motor>
 8a2:	5f c0       	rjmp	.+190    	; 0x962 <__vector_15+0x3e4>
 8a4:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <stateForceSmoth>
		                    motor(STRAIGHT);
 8a8:	83 30       	cpi	r24, 0x03	; 3
 8aa:	29 f4       	brne	.+10     	; 0x8b6 <__vector_15+0x338>
		                    stateForceSmoth=0;
 8ac:	80 e0       	ldi	r24, 0x00	; 0
 8ae:	2a dd       	rcall	.-1452   	; 0x304 <motor>
 8b0:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <stateForceSmoth>
		                    }else{
		                    stateForceSmoth++;
 8b4:	56 c0       	rjmp	.+172    	; 0x962 <__vector_15+0x3e4>
		                    motor(RIGHT);
 8b6:	8f 5f       	subi	r24, 0xFF	; 255
 8b8:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <stateForceSmoth>
	                    }
	                    break;
                    }
                    default:
                        motor(STRAIGHT);
 8bc:	81 e0       	ldi	r24, 0x01	; 1
 8be:	22 dd       	rcall	.-1468   	; 0x304 <motor>
 8c0:	50 c0       	rjmp	.+160    	; 0x962 <__vector_15+0x3e4>
 8c2:	80 e0       	ldi	r24, 0x00	; 0
                }                                        //교차로 들어가기 전까지는 무조껀 직진
            }
        }
    }else if(state == STATE_CALIB_RIGHT){                           //-교차로를 틀어져서 왼쪽으로 들어갈때 칼리브레이션
 8c4:	1f dd       	rcall	.-1474   	; 0x304 <motor>
 8c6:	4d c0       	rjmp	.+154    	; 0x962 <__vector_15+0x3e4>
 8c8:	24 30       	cpi	r18, 0x04	; 4
        if(sensor == 0x0b||sensor == 0x0d){                         //레일 위로 돌아가면 종료
 8ca:	31 05       	cpc	r19, r1
 8cc:	a9 f4       	brne	.+42     	; 0x8f8 <__vector_15+0x37a>
 8ce:	cb 30       	cpi	r28, 0x0B	; 11
 8d0:	d1 05       	cpc	r29, r1
 8d2:	19 f0       	breq	.+6      	; 0x8da <__vector_15+0x35c>
 8d4:	cd 30       	cpi	r28, 0x0D	; 13
            state = STATE_RUNNING;
 8d6:	d1 05       	cpc	r29, r1
 8d8:	39 f4       	brne	.+14     	; 0x8e8 <__vector_15+0x36a>
 8da:	81 e0       	ldi	r24, 0x01	; 1
 8dc:	90 e0       	ldi	r25, 0x00	; 0
 8de:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <state+0x1>
        }else if(sensor == 0x0f){                                   //하나도 안걸릴때 일딴 오른쪽으로 돌림
 8e2:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <state>
            motor(RIGHT);
 8e6:	3d c0       	rjmp	.+122    	; 0x962 <__vector_15+0x3e4>
 8e8:	2f 97       	sbiw	r28, 0x0f	; 15
 8ea:	19 f4       	brne	.+6      	; 0x8f2 <__vector_15+0x374>
        }else{                                                      //교차로를 나오기 전까지는 무조껀 직진
            motor(STRAIGHT);
 8ec:	81 e0       	ldi	r24, 0x01	; 1
 8ee:	0a dd       	rcall	.-1516   	; 0x304 <motor>
 8f0:	38 c0       	rjmp	.+112    	; 0x962 <__vector_15+0x3e4>
 8f2:	80 e0       	ldi	r24, 0x00	; 0
        }
    }else if(state == STATE_CALIB_LEFT){                            //-교차로를 틀어져서 오른쪽으로 들어갈때 칼리브레이션
 8f4:	07 dd       	rcall	.-1522   	; 0x304 <motor>
 8f6:	35 c0       	rjmp	.+106    	; 0x962 <__vector_15+0x3e4>
 8f8:	25 30       	cpi	r18, 0x05	; 5
        if(sensor == 0x0b||sensor == 0x0d){                         //레일 위로 돌아가면 종료
 8fa:	31 05       	cpc	r19, r1
 8fc:	a9 f4       	brne	.+42     	; 0x928 <__vector_15+0x3aa>
 8fe:	cb 30       	cpi	r28, 0x0B	; 11
 900:	d1 05       	cpc	r29, r1
 902:	19 f0       	breq	.+6      	; 0x90a <__vector_15+0x38c>
 904:	cd 30       	cpi	r28, 0x0D	; 13
            state = STATE_RUNNING;
 906:	d1 05       	cpc	r29, r1
 908:	39 f4       	brne	.+14     	; 0x918 <__vector_15+0x39a>
 90a:	81 e0       	ldi	r24, 0x01	; 1
 90c:	90 e0       	ldi	r25, 0x00	; 0
 90e:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <state+0x1>
 912:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <state>
        }else if(sensor == 0x0f){                                   //하나도 안걸릴때 일딴 오른쪽으로 돌림
 916:	25 c0       	rjmp	.+74     	; 0x962 <__vector_15+0x3e4>
            motor(LEFT);
 918:	2f 97       	sbiw	r28, 0x0f	; 15
 91a:	19 f4       	brne	.+6      	; 0x922 <__vector_15+0x3a4>
 91c:	82 e0       	ldi	r24, 0x02	; 2
        }else{                                                      //교차로를 나오기 전까지는 무조껀 직진
            motor(STRAIGHT);
 91e:	f2 dc       	rcall	.-1564   	; 0x304 <motor>
 920:	20 c0       	rjmp	.+64     	; 0x962 <__vector_15+0x3e4>
 922:	80 e0       	ldi	r24, 0x00	; 0
 924:	ef dc       	rcall	.-1570   	; 0x304 <motor>
        }
    }else if(state == STATE_RUNNING){
 926:	1d c0       	rjmp	.+58     	; 0x962 <__vector_15+0x3e4>
 928:	21 30       	cpi	r18, 0x01	; 1
 92a:	31 05       	cpc	r19, r1
        if(timeNum < OCR0&&(smothStart==10)){
 92c:	d1 f4       	brne	.+52     	; 0x962 <__vector_15+0x3e4>
 92e:	81 b7       	in	r24, 0x31	; 49
 930:	90 e0       	ldi	r25, 0x00	; 0
 932:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <timeNum>
 936:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <timeNum+0x1>
 93a:	28 17       	cp	r18, r24
 93c:	39 07       	cpc	r19, r25
 93e:	50 f4       	brcc	.+20     	; 0x954 <__vector_15+0x3d6>
 940:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <smothStart>
 944:	8a 30       	cpi	r24, 0x0A	; 10
            OCR0--;
 946:	31 f4       	brne	.+12     	; 0x954 <__vector_15+0x3d6>
 948:	81 b7       	in	r24, 0x31	; 49
 94a:	81 50       	subi	r24, 0x01	; 1
            smothStart=0;
 94c:	81 bf       	out	0x31, r24	; 49
 94e:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <smothStart>
            }else{
            smothStart++;
 952:	05 c0       	rjmp	.+10     	; 0x95e <__vector_15+0x3e0>
 954:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <smothStart>
 958:	8f 5f       	subi	r24, 0xFF	; 255
 95a:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <smothStart>
        }
        
        sensorScan(sensor);                    //일반적인 라인 팔로잉 상태
 95e:	ce 01       	movw	r24, r28
 960:	43 dd       	rcall	.-1402   	; 0x3e8 <sensorScan>
    }
}
 962:	ff 91       	pop	r31
 964:	ef 91       	pop	r30
 966:	df 91       	pop	r29
 968:	cf 91       	pop	r28
 96a:	bf 91       	pop	r27
 96c:	af 91       	pop	r26
 96e:	9f 91       	pop	r25
 970:	8f 91       	pop	r24
 972:	7f 91       	pop	r23
 974:	6f 91       	pop	r22
 976:	5f 91       	pop	r21
 978:	4f 91       	pop	r20
 97a:	3f 91       	pop	r19
 97c:	2f 91       	pop	r18
 97e:	0f 90       	pop	r0
 980:	0b be       	out	0x3b, r0	; 59
 982:	0f 90       	pop	r0
 984:	0f be       	out	0x3f, r0	; 63
 986:	0f 90       	pop	r0
 988:	1f 90       	pop	r1
 98a:	18 95       	reti

0000098c <main>:
///////////////////interrupt service routine end////////////////////////

int main(void){

    //initialize port and interrupt
    initDevices();
 98c:	ed db       	rcall	.-2086   	; 0x168 <initDevices>
    initSegment();
 98e:	94 dc       	rcall	.-1752   	; 0x2b8 <initSegment>
    initInterrupt();
 990:	9c dc       	rcall	.-1736   	; 0x2ca <initInterrupt>
    initTimerInterrupt();
 992:	ae dc       	rcall	.-1700   	; 0x2f0 <initTimerInterrupt>
 994:	c1 db       	rcall	.-2174   	; 0x118 <initFlag>
    initFlag();
 996:	8f ef       	ldi	r24, 0xFF	; 255
 998:	81 bb       	out	0x11, r24	; 17
    
    MOTOR_PORT_DDR = 0xff;
 99a:	78 94       	sei
 99c:	0f 2e       	mov	r0, r31
    //Global Interrupt Enable
    sei();
 99e:	f8 ee       	ldi	r31, 0xE8	; 232
    //print 7segment by global variable timeNum
    //timeNum variable is state and OCR0
    while (1){
        //segment print
        for(int i = 0; i < 4; i++){
            printSeg(((state*1000 + timeNum)/exp10[i])%10,3-i); //OCR0를 세그먼트에 출력합니다.
 9a0:	ef 2e       	mov	r14, r31
 9a2:	f3 e0       	ldi	r31, 0x03	; 3
 9a4:	ff 2e       	mov	r15, r31
 9a6:	f0 2d       	mov	r31, r0
 9a8:	04 e0       	ldi	r16, 0x04	; 4
 9aa:	11 e0       	ldi	r17, 0x01	; 1
 9ac:	c3 e0       	ldi	r28, 0x03	; 3
 9ae:	d0 e0       	ldi	r29, 0x00	; 0
        sensorScan(sensor);                    //일반적인 라인 팔로잉 상태
    }
}
///////////////////interrupt service routine end////////////////////////

int main(void){
 9b0:	f8 01       	movw	r30, r16
 9b2:	61 91       	ld	r22, Z+
    //print 7segment by global variable timeNum
    //timeNum variable is state and OCR0
    while (1){
        //segment print
        for(int i = 0; i < 4; i++){
            printSeg(((state*1000 + timeNum)/exp10[i])%10,3-i); //OCR0를 세그먼트에 출력합니다.
 9b4:	71 91       	ld	r23, Z+
 9b6:	8f 01       	movw	r16, r30
 9b8:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <state>
 9bc:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <state+0x1>
 9c0:	8e 9d       	mul	r24, r14
 9c2:	90 01       	movw	r18, r0
 9c4:	8f 9d       	mul	r24, r15
 9c6:	30 0d       	add	r19, r0
 9c8:	9e 9d       	mul	r25, r14
 9ca:	30 0d       	add	r19, r0
 9cc:	11 24       	eor	r1, r1
 9ce:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <timeNum>
 9d2:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <timeNum+0x1>
 9d6:	82 0f       	add	r24, r18
 9d8:	93 1f       	adc	r25, r19
 9da:	1f d0       	rcall	.+62     	; 0xa1a <__udivmodhi4>
 9dc:	ab 01       	movw	r20, r22
 9de:	9b 01       	movw	r18, r22
 9e0:	ad ec       	ldi	r26, 0xCD	; 205
 9e2:	bc ec       	ldi	r27, 0xCC	; 204
 9e4:	37 d0       	rcall	.+110    	; 0xa54 <__umulhisi3>
 9e6:	96 95       	lsr	r25
 9e8:	87 95       	ror	r24
 9ea:	96 95       	lsr	r25
 9ec:	87 95       	ror	r24
 9ee:	96 95       	lsr	r25
 9f0:	87 95       	ror	r24
 9f2:	9c 01       	movw	r18, r24
 9f4:	22 0f       	add	r18, r18
 9f6:	33 1f       	adc	r19, r19
 9f8:	88 0f       	add	r24, r24
 9fa:	99 1f       	adc	r25, r25
 9fc:	88 0f       	add	r24, r24
 9fe:	99 1f       	adc	r25, r25
 a00:	88 0f       	add	r24, r24
 a02:	99 1f       	adc	r25, r25
 a04:	82 0f       	add	r24, r18
 a06:	93 1f       	adc	r25, r19
 a08:	be 01       	movw	r22, r28
 a0a:	9a 01       	movw	r18, r20
 a0c:	28 1b       	sub	r18, r24
 a0e:	39 0b       	sbc	r19, r25
 a10:	c9 01       	movw	r24, r18
 a12:	43 dc       	rcall	.-1914   	; 0x29a <printSeg>
 a14:	21 97       	sbiw	r28, 0x01	; 1
 a16:	60 f6       	brcc	.-104    	; 0x9b0 <main+0x24>
 a18:	c7 cf       	rjmp	.-114    	; 0x9a8 <main+0x1c>

00000a1a <__udivmodhi4>:
 a1a:	aa 1b       	sub	r26, r26
 a1c:	bb 1b       	sub	r27, r27
 a1e:	51 e1       	ldi	r21, 0x11	; 17
 a20:	07 c0       	rjmp	.+14     	; 0xa30 <__udivmodhi4_ep>

00000a22 <__udivmodhi4_loop>:
 a22:	aa 1f       	adc	r26, r26
 a24:	bb 1f       	adc	r27, r27
 a26:	a6 17       	cp	r26, r22
 a28:	b7 07       	cpc	r27, r23
 a2a:	10 f0       	brcs	.+4      	; 0xa30 <__udivmodhi4_ep>
 a2c:	a6 1b       	sub	r26, r22
 a2e:	b7 0b       	sbc	r27, r23

00000a30 <__udivmodhi4_ep>:
 a30:	88 1f       	adc	r24, r24
 a32:	99 1f       	adc	r25, r25
 a34:	5a 95       	dec	r21
 a36:	a9 f7       	brne	.-22     	; 0xa22 <__udivmodhi4_loop>
 a38:	80 95       	com	r24
 a3a:	90 95       	com	r25
 a3c:	bc 01       	movw	r22, r24
 a3e:	cd 01       	movw	r24, r26
 a40:	08 95       	ret

00000a42 <__tablejump2__>:
 a42:	ee 0f       	add	r30, r30
 a44:	ff 1f       	adc	r31, r31
 a46:	00 24       	eor	r0, r0
 a48:	00 1c       	adc	r0, r0
 a4a:	0b be       	out	0x3b, r0	; 59
 a4c:	07 90       	elpm	r0, Z+
 a4e:	f6 91       	elpm	r31, Z
 a50:	e0 2d       	mov	r30, r0
 a52:	09 94       	ijmp

00000a54 <__umulhisi3>:
 a54:	a2 9f       	mul	r26, r18
 a56:	b0 01       	movw	r22, r0
 a58:	b3 9f       	mul	r27, r19
 a5a:	c0 01       	movw	r24, r0
 a5c:	a3 9f       	mul	r26, r19
 a5e:	70 0d       	add	r23, r0
 a60:	81 1d       	adc	r24, r1
 a62:	11 24       	eor	r1, r1
 a64:	91 1d       	adc	r25, r1
 a66:	b2 9f       	mul	r27, r18
 a68:	70 0d       	add	r23, r0
 a6a:	81 1d       	adc	r24, r1
 a6c:	11 24       	eor	r1, r1
 a6e:	91 1d       	adc	r25, r1
 a70:	08 95       	ret

00000a72 <_exit>:
 a72:	f8 94       	cli

00000a74 <__stop_program>:
 a74:	ff cf       	rjmp	.-2      	; 0xa74 <__stop_program>
